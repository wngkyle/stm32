
nucleo-f446re-freertos-blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005520  08005520  00006520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a8  080055a8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b0  080055b0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b0  080055b0  000065b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055b4  080055b4  000065b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080055b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be0  20000060  08005618  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c40  08005618  00007c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018248  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f3  00000000  00000000  0001f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  000225d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb3  00000000  00000000  000239f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003155  00000000  00000000  000249ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016564  00000000  00000000  00027b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dae8a  00000000  00000000  0003e064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118eee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000582c  00000000  00000000  00118f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0011e760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005508 	.word	0x08005508

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005508 	.word	0x08005508

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fab8 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8bc 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f890 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f002 f960 	bl	80027d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink, NULL, &blink01_attributes);
 8000518:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <main+0x40>)
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	@ (8000544 <main+0x44>)
 800051e:	f002 f9a5 	bl	800286c <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <main+0x48>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Blink02 */
  Blink02Handle = osThreadNew(StartBlink02, NULL, &Blink02_attributes);
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <main+0x4c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4808      	ldr	r0, [pc, #32]	@ (8000550 <main+0x50>)
 800052e:	f002 f99d 	bl	800286c <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <main+0x54>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f002 f972 	bl	8002820 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x3c>
 8000540:	08005548 	.word	0x08005548
 8000544:	08000765 	.word	0x08000765
 8000548:	200000c4 	.word	0x200000c4
 800054c:	0800556c 	.word	0x0800556c
 8000550:	08000785 	.word	0x08000785
 8000554:	200000c8 	.word	0x200000c8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	@ 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fee6 	bl	8005338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b2a      	ldr	r3, [pc, #168]	@ (800062c <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a29      	ldr	r2, [pc, #164]	@ (800062c <SystemClock_Config+0xd4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <SystemClock_Config+0xd4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xd8>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xd8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f8ae 	bl	8001748 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f2:	f000 f8e9 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fd1c 	bl	8001050 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800061e:	f000 f8d3 	bl	80007c8 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fdac 	bl	80021c8 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8a7 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000007c 	.word	0x2000007c
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	4812      	ldr	r0, [pc, #72]	@ (800075c <MX_GPIO_Init+0xd4>)
 8000714:	f000 fc68 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fac6 	bl	8000cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000734:	2320      	movs	r3, #32
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_GPIO_Init+0xd4>)
 800074c:	f000 fab8 	bl	8000cc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	@ 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40020800 	.word	0x40020800

08000764 <StartBlink>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink */
void StartBlink(void *argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800076c:	2120      	movs	r1, #32
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <StartBlink+0x1c>)
 8000770:	f000 fc53 	bl	800101a <HAL_GPIO_TogglePin>
	  // osDelay allows use to run other tasks while delaying this task, but using HAL_Delay() does not
	  osDelay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f002 f90a 	bl	8002990 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800077c:	bf00      	nop
 800077e:	e7f5      	b.n	800076c <StartBlink+0x8>
 8000780:	40020000 	.word	0x40020000

08000784 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800078c:	2120      	movs	r1, #32
 800078e:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <StartBlink02+0x1c>)
 8000790:	f000 fc43 	bl	800101a <HAL_GPIO_TogglePin>
	  // osDelay allows use to run other tasks while delaying this task, but using HAL_Delay() does not
	  osDelay(600);
 8000794:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000798:	f002 f8fa 	bl	8002990 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800079c:	bf00      	nop
 800079e:	e7f5      	b.n	800078c <StartBlink02+0x8>
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f981 	bl	8000abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	@ (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 fa27 	bl	8000c6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <HAL_UART_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12b      	bne.n	80008a6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6413      	str	r3, [r2, #64]	@ 0x40
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <HAL_UART_MspInit+0x8c>)
 80008a2:	f000 fa0d 	bl	8000cc0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	@ 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a32      	ldr	r2, [pc, #200]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008d6:	f043 0310 	orr.w	r3, r3, #16
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 0310 	and.w	r3, r3, #16
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e8:	f107 0210 	add.w	r2, r7, #16
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fcc6 	bl	8001284 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f8:	6a3b      	ldr	r3, [r7, #32]
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d103      	bne.n	800090a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000902:	f000 fc97 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8000906:	6378      	str	r0, [r7, #52]	@ 0x34
 8000908:	e004      	b.n	8000914 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800090a:	f000 fc93 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 800090e:	4603      	mov	r3, r0
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000916:	4a23      	ldr	r2, [pc, #140]	@ (80009a4 <HAL_InitTick+0xe8>)
 8000918:	fba2 2303 	umull	r2, r3, r2, r3
 800091c:	0c9b      	lsrs	r3, r3, #18
 800091e:	3b01      	subs	r3, #1
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000922:	4b21      	ldr	r3, [pc, #132]	@ (80009a8 <HAL_InitTick+0xec>)
 8000924:	4a21      	ldr	r2, [pc, #132]	@ (80009ac <HAL_InitTick+0xf0>)
 8000926:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000928:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <HAL_InitTick+0xec>)
 800092a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <HAL_InitTick+0xec>)
 8000932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000934:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <HAL_InitTick+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_InitTick+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000948:	4817      	ldr	r0, [pc, #92]	@ (80009a8 <HAL_InitTick+0xec>)
 800094a:	f001 f99b 	bl	8001c84 <HAL_TIM_Base_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000954:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11b      	bne.n	8000994 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800095c:	4812      	ldr	r0, [pc, #72]	@ (80009a8 <HAL_InitTick+0xec>)
 800095e:	f001 f9eb 	bl	8001d38 <HAL_TIM_Base_Start_IT>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800096c:	2b00      	cmp	r3, #0
 800096e:	d111      	bne.n	8000994 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000970:	2036      	movs	r0, #54	@ 0x36
 8000972:	f000 f997 	bl	8000ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d808      	bhi.n	800098e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2036      	movs	r0, #54	@ 0x36
 8000982:	f000 f973 	bl	8000c6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <HAL_InitTick+0xf4>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
 800098c:	e002      	b.n	8000994 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000998:	4618      	mov	r0, r3
 800099a:	3738      	adds	r7, #56	@ 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	431bde83 	.word	0x431bde83
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	40001000 	.word	0x40001000
 80009b0:	20000004 	.word	0x20000004

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <TIM6_DAC_IRQHandler+0x10>)
 80009f2:	f001 fa11 	bl	8001e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000cc 	.word	0x200000cc

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a28:	f7ff ffea 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	@ (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	@ (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 fccf 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd53 	bl	8000500 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a68:	080055b8 	.word	0x080055b8
  ldr r2, =_sbss
 8000a6c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a70:	20004c40 	.word	0x20004c40

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f8d8 	bl	8000c56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f7ff ff08 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe92 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000114 	.word	0x20000114

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000114 	.word	0x20000114

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ff4c 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7e:	f7ff ff61 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68b9      	ldr	r1, [r7, #8]
 8000c88:	6978      	ldr	r0, [r7, #20]
 8000c8a:	f7ff ffb1 	bl	8000bf0 <NVIC_EncodePriority>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff80 	bl	8000b9c <__NVIC_SetPriority>
}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff54 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	e165      	b.n	8000fa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cdc:	2201      	movs	r2, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	f040 8154 	bne.w	8000fa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d005      	beq.n	8000d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	d017      	beq.n	8000db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d123      	bne.n	8000e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	08da      	lsrs	r2, r3, #3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3208      	adds	r2, #8
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0203 	and.w	r2, r3, #3
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ae 	beq.w	8000fa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	4a5c      	ldr	r2, [pc, #368]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e56:	4b5a      	ldr	r3, [pc, #360]	@ (8000fc0 <HAL_GPIO_Init+0x300>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e62:	4a58      	ldr	r2, [pc, #352]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3302      	adds	r3, #2
 8000e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc8 <HAL_GPIO_Init+0x308>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4e      	ldr	r2, [pc, #312]	@ (8000fcc <HAL_GPIO_Init+0x30c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4d      	ldr	r2, [pc, #308]	@ (8000fd0 <HAL_GPIO_Init+0x310>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd4 <HAL_GPIO_Init+0x314>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x20e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd8 <HAL_GPIO_Init+0x318>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x20a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4a      	ldr	r2, [pc, #296]	@ (8000fdc <HAL_GPIO_Init+0x31c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x206>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a49      	ldr	r2, [pc, #292]	@ (8000fe0 <HAL_GPIO_Init+0x320>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x202>
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	e00c      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	e00a      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eca:	2304      	movs	r3, #4
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x21c>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	@ (8000fc4 <HAL_GPIO_Init+0x304>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000efa:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1e:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f24:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f48:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f9c:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_GPIO_Init+0x324>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f ae96 	bls.w	8000cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3724      	adds	r7, #36	@ 0x24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	041a      	lsls	r2, r3, #16
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	619a      	str	r2, [r3, #24]
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800101a:	b480      	push	{r7}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800102c:	887a      	ldrh	r2, [r7, #2]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4013      	ands	r3, r2
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43d9      	mvns	r1, r3
 8001038:	887b      	ldrh	r3, [r7, #2]
 800103a:	400b      	ands	r3, r1
 800103c:	431a      	orrs	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	619a      	str	r2, [r3, #24]
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0cc      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b68      	ldr	r3, [pc, #416]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d90c      	bls.n	800108c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b65      	ldr	r3, [pc, #404]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b63      	ldr	r3, [pc, #396]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b8      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b59      	ldr	r3, [pc, #356]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a58      	ldr	r2, [pc, #352]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b53      	ldr	r3, [pc, #332]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a52      	ldr	r2, [pc, #328]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b50      	ldr	r3, [pc, #320]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494d      	ldr	r1, [pc, #308]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d044      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b47      	ldr	r3, [pc, #284]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	2b03      	cmp	r3, #3
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e06f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3b      	ldr	r3, [pc, #236]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e067      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b37      	ldr	r3, [pc, #220]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4934      	ldr	r1, [pc, #208]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fcd0 	bl	8000ae4 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff fccc 	bl	8000ae4 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e04f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2b      	ldr	r3, [pc, #172]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b25      	ldr	r3, [pc, #148]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d20c      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e032      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4916      	ldr	r1, [pc, #88]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490e      	ldr	r1, [pc, #56]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f887 	bl	80012e8 <HAL_RCC_GetSysClockFreq>
 80011da:	4602      	mov	r2, r0
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	490a      	ldr	r1, [pc, #40]	@ (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	5ccb      	ldrb	r3, [r1, r3]
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	4a09      	ldr	r2, [pc, #36]	@ (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <HAL_RCC_ClockConfig+0x1c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb60 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00
 800120c:	40023800 	.word	0x40023800
 8001210:	08005590 	.word	0x08005590
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001220:	4b03      	ldr	r3, [pc, #12]	@ (8001230 <HAL_RCC_GetHCLKFreq+0x14>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000

08001234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001238:	f7ff fff0 	bl	800121c <HAL_RCC_GetHCLKFreq>
 800123c:	4602      	mov	r2, r0
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	0a9b      	lsrs	r3, r3, #10
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	4903      	ldr	r1, [pc, #12]	@ (8001258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800124a:	5ccb      	ldrb	r3, [r1, r3]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001250:	4618      	mov	r0, r3
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40023800 	.word	0x40023800
 8001258:	080055a0 	.word	0x080055a0

0800125c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001260:	f7ff ffdc 	bl	800121c <HAL_RCC_GetHCLKFreq>
 8001264:	4602      	mov	r2, r0
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	0b5b      	lsrs	r3, r3, #13
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	4903      	ldr	r1, [pc, #12]	@ (8001280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001272:	5ccb      	ldrb	r3, [r1, r3]
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	080055a0 	.word	0x080055a0

08001284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	220f      	movs	r2, #15
 8001292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_RCC_GetClockConfig+0x5c>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <HAL_RCC_GetClockConfig+0x5c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012b8:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <HAL_RCC_GetClockConfig+0x5c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	08db      	lsrs	r3, r3, #3
 80012be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_RCC_GetClockConfig+0x60>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 020f 	and.w	r2, r3, #15
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ec:	b0ae      	sub	sp, #184	@ 0xb8
 80012ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800130e:	4bcb      	ldr	r3, [pc, #812]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b0c      	cmp	r3, #12
 8001318:	f200 8206 	bhi.w	8001728 <HAL_RCC_GetSysClockFreq+0x440>
 800131c:	a201      	add	r2, pc, #4	@ (adr r2, 8001324 <HAL_RCC_GetSysClockFreq+0x3c>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001359 	.word	0x08001359
 8001328:	08001729 	.word	0x08001729
 800132c:	08001729 	.word	0x08001729
 8001330:	08001729 	.word	0x08001729
 8001334:	08001361 	.word	0x08001361
 8001338:	08001729 	.word	0x08001729
 800133c:	08001729 	.word	0x08001729
 8001340:	08001729 	.word	0x08001729
 8001344:	08001369 	.word	0x08001369
 8001348:	08001729 	.word	0x08001729
 800134c:	08001729 	.word	0x08001729
 8001350:	08001729 	.word	0x08001729
 8001354:	08001559 	.word	0x08001559
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001358:	4bb9      	ldr	r3, [pc, #740]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x358>)
 800135a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800135e:	e1e7      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001360:	4bb8      	ldr	r3, [pc, #736]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001366:	e1e3      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001368:	4bb4      	ldr	r3, [pc, #720]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001374:	4bb1      	ldr	r3, [pc, #708]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d071      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001380:	4bae      	ldr	r3, [pc, #696]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	099b      	lsrs	r3, r3, #6
 8001386:	2200      	movs	r2, #0
 8001388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800138c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001398:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013a6:	4622      	mov	r2, r4
 80013a8:	462b      	mov	r3, r5
 80013aa:	f04f 0000 	mov.w	r0, #0
 80013ae:	f04f 0100 	mov.w	r1, #0
 80013b2:	0159      	lsls	r1, r3, #5
 80013b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013b8:	0150      	lsls	r0, r2, #5
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4621      	mov	r1, r4
 80013c0:	1a51      	subs	r1, r2, r1
 80013c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80013c4:	4629      	mov	r1, r5
 80013c6:	eb63 0301 	sbc.w	r3, r3, r1
 80013ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80013d8:	4649      	mov	r1, r9
 80013da:	018b      	lsls	r3, r1, #6
 80013dc:	4641      	mov	r1, r8
 80013de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013e2:	4641      	mov	r1, r8
 80013e4:	018a      	lsls	r2, r1, #6
 80013e6:	4641      	mov	r1, r8
 80013e8:	1a51      	subs	r1, r2, r1
 80013ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013ec:	4649      	mov	r1, r9
 80013ee:	eb63 0301 	sbc.w	r3, r3, r1
 80013f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001400:	4649      	mov	r1, r9
 8001402:	00cb      	lsls	r3, r1, #3
 8001404:	4641      	mov	r1, r8
 8001406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800140a:	4641      	mov	r1, r8
 800140c:	00ca      	lsls	r2, r1, #3
 800140e:	4610      	mov	r0, r2
 8001410:	4619      	mov	r1, r3
 8001412:	4603      	mov	r3, r0
 8001414:	4622      	mov	r2, r4
 8001416:	189b      	adds	r3, r3, r2
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30
 800141a:	462b      	mov	r3, r5
 800141c:	460a      	mov	r2, r1
 800141e:	eb42 0303 	adc.w	r3, r2, r3
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001430:	4629      	mov	r1, r5
 8001432:	024b      	lsls	r3, r1, #9
 8001434:	4621      	mov	r1, r4
 8001436:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800143a:	4621      	mov	r1, r4
 800143c:	024a      	lsls	r2, r1, #9
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001446:	2200      	movs	r2, #0
 8001448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800144c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001450:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001454:	f7fe fedc 	bl	8000210 <__aeabi_uldivmod>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4613      	mov	r3, r2
 800145e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001462:	e067      	b.n	8001534 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	4b75      	ldr	r3, [pc, #468]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	2200      	movs	r2, #0
 800146c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001470:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001474:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800147e:	2300      	movs	r3, #0
 8001480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001482:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001486:	4622      	mov	r2, r4
 8001488:	462b      	mov	r3, r5
 800148a:	f04f 0000 	mov.w	r0, #0
 800148e:	f04f 0100 	mov.w	r1, #0
 8001492:	0159      	lsls	r1, r3, #5
 8001494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001498:	0150      	lsls	r0, r2, #5
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4621      	mov	r1, r4
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014a4:	4629      	mov	r1, r5
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014b8:	4649      	mov	r1, r9
 80014ba:	018b      	lsls	r3, r1, #6
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014c2:	4641      	mov	r1, r8
 80014c4:	018a      	lsls	r2, r1, #6
 80014c6:	4641      	mov	r1, r8
 80014c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80014cc:	4649      	mov	r1, r9
 80014ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014e6:	4692      	mov	sl, r2
 80014e8:	469b      	mov	fp, r3
 80014ea:	4623      	mov	r3, r4
 80014ec:	eb1a 0303 	adds.w	r3, sl, r3
 80014f0:	623b      	str	r3, [r7, #32]
 80014f2:	462b      	mov	r3, r5
 80014f4:	eb4b 0303 	adc.w	r3, fp, r3
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	f04f 0300 	mov.w	r3, #0
 8001502:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001506:	4629      	mov	r1, r5
 8001508:	028b      	lsls	r3, r1, #10
 800150a:	4621      	mov	r1, r4
 800150c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001510:	4621      	mov	r1, r4
 8001512:	028a      	lsls	r2, r1, #10
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800151c:	2200      	movs	r2, #0
 800151e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001520:	677a      	str	r2, [r7, #116]	@ 0x74
 8001522:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001526:	f7fe fe73 	bl	8000210 <__aeabi_uldivmod>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4613      	mov	r3, r2
 8001530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001534:	4b41      	ldr	r3, [pc, #260]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	0c1b      	lsrs	r3, r3, #16
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	3301      	adds	r3, #1
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001546:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800154a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001556:	e0eb      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001558:	4b38      	ldr	r3, [pc, #224]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001564:	4b35      	ldr	r3, [pc, #212]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d06b      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001570:	4b32      	ldr	r3, [pc, #200]	@ (800163c <HAL_RCC_GetSysClockFreq+0x354>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	2200      	movs	r2, #0
 8001578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800157a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800157c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800157e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001582:	663b      	str	r3, [r7, #96]	@ 0x60
 8001584:	2300      	movs	r3, #0
 8001586:	667b      	str	r3, [r7, #100]	@ 0x64
 8001588:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800158c:	4622      	mov	r2, r4
 800158e:	462b      	mov	r3, r5
 8001590:	f04f 0000 	mov.w	r0, #0
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	0159      	lsls	r1, r3, #5
 800159a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800159e:	0150      	lsls	r0, r2, #5
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4621      	mov	r1, r4
 80015a6:	1a51      	subs	r1, r2, r1
 80015a8:	61b9      	str	r1, [r7, #24]
 80015aa:	4629      	mov	r1, r5
 80015ac:	eb63 0301 	sbc.w	r3, r3, r1
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015be:	4659      	mov	r1, fp
 80015c0:	018b      	lsls	r3, r1, #6
 80015c2:	4651      	mov	r1, sl
 80015c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c8:	4651      	mov	r1, sl
 80015ca:	018a      	lsls	r2, r1, #6
 80015cc:	4651      	mov	r1, sl
 80015ce:	ebb2 0801 	subs.w	r8, r2, r1
 80015d2:	4659      	mov	r1, fp
 80015d4:	eb63 0901 	sbc.w	r9, r3, r1
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ec:	4690      	mov	r8, r2
 80015ee:	4699      	mov	r9, r3
 80015f0:	4623      	mov	r3, r4
 80015f2:	eb18 0303 	adds.w	r3, r8, r3
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	462b      	mov	r3, r5
 80015fa:	eb49 0303 	adc.w	r3, r9, r3
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800160c:	4629      	mov	r1, r5
 800160e:	024b      	lsls	r3, r1, #9
 8001610:	4621      	mov	r1, r4
 8001612:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001616:	4621      	mov	r1, r4
 8001618:	024a      	lsls	r2, r1, #9
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001622:	2200      	movs	r2, #0
 8001624:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001626:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001628:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800162c:	f7fe fdf0 	bl	8000210 <__aeabi_uldivmod>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4613      	mov	r3, r2
 8001636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800163a:	e065      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x420>
 800163c:	40023800 	.word	0x40023800
 8001640:	00f42400 	.word	0x00f42400
 8001644:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001648:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x458>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	099b      	lsrs	r3, r3, #6
 800164e:	2200      	movs	r2, #0
 8001650:	4618      	mov	r0, r3
 8001652:	4611      	mov	r1, r2
 8001654:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001658:	653b      	str	r3, [r7, #80]	@ 0x50
 800165a:	2300      	movs	r3, #0
 800165c:	657b      	str	r3, [r7, #84]	@ 0x54
 800165e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001662:	4642      	mov	r2, r8
 8001664:	464b      	mov	r3, r9
 8001666:	f04f 0000 	mov.w	r0, #0
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	0159      	lsls	r1, r3, #5
 8001670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001674:	0150      	lsls	r0, r2, #5
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4641      	mov	r1, r8
 800167c:	1a51      	subs	r1, r2, r1
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	4649      	mov	r1, r9
 8001682:	eb63 0301 	sbc.w	r3, r3, r1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001694:	4659      	mov	r1, fp
 8001696:	018b      	lsls	r3, r1, #6
 8001698:	4651      	mov	r1, sl
 800169a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169e:	4651      	mov	r1, sl
 80016a0:	018a      	lsls	r2, r1, #6
 80016a2:	4651      	mov	r1, sl
 80016a4:	1a54      	subs	r4, r2, r1
 80016a6:	4659      	mov	r1, fp
 80016a8:	eb63 0501 	sbc.w	r5, r3, r1
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	00eb      	lsls	r3, r5, #3
 80016b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ba:	00e2      	lsls	r2, r4, #3
 80016bc:	4614      	mov	r4, r2
 80016be:	461d      	mov	r5, r3
 80016c0:	4643      	mov	r3, r8
 80016c2:	18e3      	adds	r3, r4, r3
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	464b      	mov	r3, r9
 80016c8:	eb45 0303 	adc.w	r3, r5, r3
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016da:	4629      	mov	r1, r5
 80016dc:	028b      	lsls	r3, r1, #10
 80016de:	4621      	mov	r1, r4
 80016e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e4:	4621      	mov	r1, r4
 80016e6:	028a      	lsls	r2, r1, #10
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016f0:	2200      	movs	r2, #0
 80016f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016fa:	f7fe fd89 	bl	8000210 <__aeabi_uldivmod>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4613      	mov	r3, r2
 8001704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001708:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x458>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	0f1b      	lsrs	r3, r3, #28
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001716:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800171a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001726:	e003      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x45c>)
 800172a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800172e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001730:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001734:	4618      	mov	r0, r3
 8001736:	37b8      	adds	r7, #184	@ 0xb8
 8001738:	46bd      	mov	sp, r7
 800173a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400

08001748 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e28d      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8083 	beq.w	800186e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001768:	4b94      	ldr	r3, [pc, #592]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b04      	cmp	r3, #4
 8001772:	d019      	beq.n	80017a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001774:	4b91      	ldr	r3, [pc, #580]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
        || \
 800177c:	2b08      	cmp	r3, #8
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001780:	4b8e      	ldr	r3, [pc, #568]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800178c:	d00c      	beq.n	80017a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d112      	bne.n	80017c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179a:	4b88      	ldr	r3, [pc, #544]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a6:	d10b      	bne.n	80017c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d05b      	beq.n	800186c <HAL_RCC_OscConfig+0x124>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d157      	bne.n	800186c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e25a      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c8:	d106      	bne.n	80017d8 <HAL_RCC_OscConfig+0x90>
 80017ca:	4b7c      	ldr	r3, [pc, #496]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a7b      	ldr	r2, [pc, #492]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e01d      	b.n	8001814 <HAL_RCC_OscConfig+0xcc>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0xb4>
 80017e2:	4b76      	ldr	r3, [pc, #472]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a75      	ldr	r2, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	4b73      	ldr	r3, [pc, #460]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a72      	ldr	r2, [pc, #456]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0xcc>
 80017fc:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a6e      	ldr	r2, [pc, #440]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a6b      	ldr	r2, [pc, #428]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d013      	beq.n	8001844 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f962 	bl	8000ae4 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff f95e 	bl	8000ae4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	@ 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e21f      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b61      	ldr	r3, [pc, #388]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0xdc>
 8001842:	e014      	b.n	800186e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f94e 	bl	8000ae4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff f94a 	bl	8000ae4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e20b      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185e:	4b57      	ldr	r3, [pc, #348]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x104>
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06f      	beq.n	800195a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800187a:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b00      	cmp	r3, #0
 8001884:	d017      	beq.n	80018b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
        || \
 800188e:	2b08      	cmp	r3, #8
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d11c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d116      	bne.n	80018e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d005      	beq.n	80018ce <HAL_RCC_OscConfig+0x186>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e1d3      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ce:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4937      	ldr	r1, [pc, #220]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	e03a      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ec:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <HAL_RCC_OscConfig+0x278>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff f8f7 	bl	8000ae4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff f8f3 	bl	8000ae4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1b4      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b28      	ldr	r3, [pc, #160]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4925      	ldr	r1, [pc, #148]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e015      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192e:	4b24      	ldr	r3, [pc, #144]	@ (80019c0 <HAL_RCC_OscConfig+0x278>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff f8d6 	bl	8000ae4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff f8d2 	bl	8000ae4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e193      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194e:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d036      	beq.n	80019d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d016      	beq.n	800199c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b15      	ldr	r3, [pc, #84]	@ (80019c4 <HAL_RCC_OscConfig+0x27c>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff f8b6 	bl	8000ae4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff f8b2 	bl	8000ae4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e173      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_OscConfig+0x274>)
 8001990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x234>
 800199a:	e01b      	b.n	80019d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_RCC_OscConfig+0x27c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a2:	f7ff f89f 	bl	8000ae4 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a8:	e00e      	b.n	80019c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019aa:	f7ff f89b 	bl	8000ae4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d907      	bls.n	80019c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e15c      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470000 	.word	0x42470000
 80019c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ea      	bne.n	80019aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8097 	beq.w	8001b10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b83      	ldr	r3, [pc, #524]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a02:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b79      	ldr	r3, [pc, #484]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b76      	ldr	r3, [pc, #472]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a75      	ldr	r2, [pc, #468]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f85b 	bl	8000ae4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7ff f857 	bl	8000ae4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e118      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x31e>
 8001a58:	4b66      	ldr	r3, [pc, #408]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5c:	4a65      	ldr	r2, [pc, #404]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x358>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x340>
 8001a6e:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	4a60      	ldr	r2, [pc, #384]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x358>
 8001a88:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	4a59      	ldr	r2, [pc, #356]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a94:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a98:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	f023 0304 	bic.w	r3, r3, #4
 8001a9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d015      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f81c 	bl	8000ae4 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f818 	bl	8000ae4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0d7      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0ee      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x368>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f806 	bl	8000ae4 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff f802 	bl	8000ae4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0c1      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	4b40      	ldr	r3, [pc, #256]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ee      	bne.n	8001adc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 80ad 	beq.w	8001c74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d060      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d145      	bne.n	8001bba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b33      	ldr	r3, [pc, #204]	@ (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7fe ffd6 	bl	8000ae4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3c:	f7fe ffd2 	bl	8000ae4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e093      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b84:	071b      	lsls	r3, r3, #28
 8001b86:	491b      	ldr	r1, [pc, #108]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7fe ffa7 	bl	8000ae4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe ffa3 	bl	8000ae4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e064      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x452>
 8001bb8:	e05c      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_RCC_OscConfig+0x4b4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7fe ff90 	bl	8000ae4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7fe ff8c 	bl	8000ae4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e04d      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x480>
 8001be6:	e045      	b.n	8001c74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e040      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <HAL_RCC_OscConfig+0x538>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d030      	beq.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d129      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d122      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d119      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10f      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e041      	b.n	8001d1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f839 	bl	8001d22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 f9c0 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d001      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e04e      	b.n	8001dee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a23      	ldr	r2, [pc, #140]	@ (8001dfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7a:	d01d      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d018      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00e      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d009      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0x80>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a18      	ldr	r2, [pc, #96]	@ (8001e14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d010      	beq.n	8001dec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 0201 	orr.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dda:	e007      	b.n	8001dec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40000800 	.word	0x40000800
 8001e08:	40000c00 	.word	0x40000c00
 8001e0c:	40010400 	.word	0x40010400
 8001e10:	40014000 	.word	0x40014000
 8001e14:	40001800 	.word	0x40001800

08001e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d020      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0202 	mvn.w	r2, #2
 8001e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8d2 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e68:	e005      	b.n	8001e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8c4 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f8d5 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0204 	mvn.w	r2, #4
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8ac 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f89e 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f8af 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0208 	mvn.w	r2, #8
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2204      	movs	r2, #4
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f886 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f878 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f889 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0210 	mvn.w	r2, #16
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2208      	movs	r2, #8
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f860 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f852 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f863 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0201 	mvn.w	r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fc10 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f906 	bl	80021b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f834 	bl	8002034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8d8 	bl	80021a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002066:	d00f      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a43      	ldr	r2, [pc, #268]	@ (8002178 <TIM_Base_SetConfig+0x130>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00b      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a42      	ldr	r2, [pc, #264]	@ (800217c <TIM_Base_SetConfig+0x134>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a41      	ldr	r2, [pc, #260]	@ (8002180 <TIM_Base_SetConfig+0x138>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a40      	ldr	r2, [pc, #256]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d108      	bne.n	800209a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800208e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a35      	ldr	r2, [pc, #212]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a8:	d027      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a32      	ldr	r2, [pc, #200]	@ (8002178 <TIM_Base_SetConfig+0x130>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d023      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a31      	ldr	r2, [pc, #196]	@ (800217c <TIM_Base_SetConfig+0x134>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a30      	ldr	r2, [pc, #192]	@ (8002180 <TIM_Base_SetConfig+0x138>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d017      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002188 <TIM_Base_SetConfig+0x140>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <TIM_Base_SetConfig+0x144>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <TIM_Base_SetConfig+0x148>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <TIM_Base_SetConfig+0x14c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <TIM_Base_SetConfig+0x150>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a29      	ldr	r2, [pc, #164]	@ (800219c <TIM_Base_SetConfig+0x154>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <TIM_Base_SetConfig+0x12c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0xf8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a12      	ldr	r2, [pc, #72]	@ (8002184 <TIM_Base_SetConfig+0x13c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f023 0201 	bic.w	r2, r3, #1
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40000400 	.word	0x40000400
 800217c:	40000800 	.word	0x40000800
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40010400 	.word	0x40010400
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800
 8002194:	40001800 	.word	0x40001800
 8002198:	40001c00 	.word	0x40001c00
 800219c:	40002000 	.word	0x40002000

080021a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e042      	b.n	8002260 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fb1c 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	@ 0x24
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800220a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f82b 	bl	8002268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b0c0      	sub	sp, #256	@ 0x100
 800226e:	af00      	add	r7, sp, #0
 8002270:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	ea40 0301 	orr.w	r3, r0, r1
 8002290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	431a      	orrs	r2, r3
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022c0:	f021 010c 	bic.w	r1, r1, #12
 80022c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022ce:	430b      	orrs	r3, r1
 80022d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e2:	6999      	ldr	r1, [r3, #24]
 80022e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	ea40 0301 	orr.w	r3, r0, r1
 80022ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b8f      	ldr	r3, [pc, #572]	@ (8002534 <UART_SetConfig+0x2cc>)
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d005      	beq.n	8002308 <UART_SetConfig+0xa0>
 80022fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b8d      	ldr	r3, [pc, #564]	@ (8002538 <UART_SetConfig+0x2d0>)
 8002304:	429a      	cmp	r2, r3
 8002306:	d104      	bne.n	8002312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002308:	f7fe ffa8 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 800230c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002310:	e003      	b.n	800231a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002312:	f7fe ff8f 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
 8002316:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800231a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002324:	f040 810c 	bne.w	8002540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800232c:	2200      	movs	r2, #0
 800232e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002332:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800233a:	4622      	mov	r2, r4
 800233c:	462b      	mov	r3, r5
 800233e:	1891      	adds	r1, r2, r2
 8002340:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002342:	415b      	adcs	r3, r3
 8002344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800234a:	4621      	mov	r1, r4
 800234c:	eb12 0801 	adds.w	r8, r2, r1
 8002350:	4629      	mov	r1, r5
 8002352:	eb43 0901 	adc.w	r9, r3, r1
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800236a:	4690      	mov	r8, r2
 800236c:	4699      	mov	r9, r3
 800236e:	4623      	mov	r3, r4
 8002370:	eb18 0303 	adds.w	r3, r8, r3
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002378:	462b      	mov	r3, r5
 800237a:	eb49 0303 	adc.w	r3, r9, r3
 800237e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800238e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002396:	460b      	mov	r3, r1
 8002398:	18db      	adds	r3, r3, r3
 800239a:	653b      	str	r3, [r7, #80]	@ 0x50
 800239c:	4613      	mov	r3, r2
 800239e:	eb42 0303 	adc.w	r3, r2, r3
 80023a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80023a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023ac:	f7fd ff30 	bl	8000210 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4b61      	ldr	r3, [pc, #388]	@ (800253c <UART_SetConfig+0x2d4>)
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	011c      	lsls	r4, r3, #4
 80023be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023d0:	4642      	mov	r2, r8
 80023d2:	464b      	mov	r3, r9
 80023d4:	1891      	adds	r1, r2, r2
 80023d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023d8:	415b      	adcs	r3, r3
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023e0:	4641      	mov	r1, r8
 80023e2:	eb12 0a01 	adds.w	sl, r2, r1
 80023e6:	4649      	mov	r1, r9
 80023e8:	eb43 0b01 	adc.w	fp, r3, r1
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002400:	4692      	mov	sl, r2
 8002402:	469b      	mov	fp, r3
 8002404:	4643      	mov	r3, r8
 8002406:	eb1a 0303 	adds.w	r3, sl, r3
 800240a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800240e:	464b      	mov	r3, r9
 8002410:	eb4b 0303 	adc.w	r3, fp, r3
 8002414:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002424:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800242c:	460b      	mov	r3, r1
 800242e:	18db      	adds	r3, r3, r3
 8002430:	643b      	str	r3, [r7, #64]	@ 0x40
 8002432:	4613      	mov	r3, r2
 8002434:	eb42 0303 	adc.w	r3, r2, r3
 8002438:	647b      	str	r3, [r7, #68]	@ 0x44
 800243a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800243e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002442:	f7fd fee5 	bl	8000210 <__aeabi_uldivmod>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	4611      	mov	r1, r2
 800244c:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <UART_SetConfig+0x2d4>)
 800244e:	fba3 2301 	umull	r2, r3, r3, r1
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	2264      	movs	r2, #100	@ 0x64
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	1acb      	subs	r3, r1, r3
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002462:	4b36      	ldr	r3, [pc, #216]	@ (800253c <UART_SetConfig+0x2d4>)
 8002464:	fba3 2302 	umull	r2, r3, r3, r2
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002470:	441c      	add	r4, r3
 8002472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002476:	2200      	movs	r2, #0
 8002478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800247c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002484:	4642      	mov	r2, r8
 8002486:	464b      	mov	r3, r9
 8002488:	1891      	adds	r1, r2, r2
 800248a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800248c:	415b      	adcs	r3, r3
 800248e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002494:	4641      	mov	r1, r8
 8002496:	1851      	adds	r1, r2, r1
 8002498:	6339      	str	r1, [r7, #48]	@ 0x30
 800249a:	4649      	mov	r1, r9
 800249c:	414b      	adcs	r3, r1
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024ac:	4659      	mov	r1, fp
 80024ae:	00cb      	lsls	r3, r1, #3
 80024b0:	4651      	mov	r1, sl
 80024b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b6:	4651      	mov	r1, sl
 80024b8:	00ca      	lsls	r2, r1, #3
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	4642      	mov	r2, r8
 80024c2:	189b      	adds	r3, r3, r2
 80024c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024c8:	464b      	mov	r3, r9
 80024ca:	460a      	mov	r2, r1
 80024cc:	eb42 0303 	adc.w	r3, r2, r3
 80024d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024e8:	460b      	mov	r3, r1
 80024ea:	18db      	adds	r3, r3, r3
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ee:	4613      	mov	r3, r2
 80024f0:	eb42 0303 	adc.w	r3, r2, r3
 80024f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024fe:	f7fd fe87 	bl	8000210 <__aeabi_uldivmod>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <UART_SetConfig+0x2d4>)
 8002508:	fba3 1302 	umull	r1, r3, r3, r2
 800250c:	095b      	lsrs	r3, r3, #5
 800250e:	2164      	movs	r1, #100	@ 0x64
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	3332      	adds	r3, #50	@ 0x32
 800251a:	4a08      	ldr	r2, [pc, #32]	@ (800253c <UART_SetConfig+0x2d4>)
 800251c:	fba2 2303 	umull	r2, r3, r2, r3
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	f003 0207 	and.w	r2, r3, #7
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4422      	add	r2, r4
 800252e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002530:	e106      	b.n	8002740 <UART_SetConfig+0x4d8>
 8002532:	bf00      	nop
 8002534:	40011000 	.word	0x40011000
 8002538:	40011400 	.word	0x40011400
 800253c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002544:	2200      	movs	r2, #0
 8002546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800254a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800254e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002552:	4642      	mov	r2, r8
 8002554:	464b      	mov	r3, r9
 8002556:	1891      	adds	r1, r2, r2
 8002558:	6239      	str	r1, [r7, #32]
 800255a:	415b      	adcs	r3, r3
 800255c:	627b      	str	r3, [r7, #36]	@ 0x24
 800255e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002562:	4641      	mov	r1, r8
 8002564:	1854      	adds	r4, r2, r1
 8002566:	4649      	mov	r1, r9
 8002568:	eb43 0501 	adc.w	r5, r3, r1
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	00eb      	lsls	r3, r5, #3
 8002576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257a:	00e2      	lsls	r2, r4, #3
 800257c:	4614      	mov	r4, r2
 800257e:	461d      	mov	r5, r3
 8002580:	4643      	mov	r3, r8
 8002582:	18e3      	adds	r3, r4, r3
 8002584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002588:	464b      	mov	r3, r9
 800258a:	eb45 0303 	adc.w	r3, r5, r3
 800258e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800259e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025ae:	4629      	mov	r1, r5
 80025b0:	008b      	lsls	r3, r1, #2
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025b8:	4621      	mov	r1, r4
 80025ba:	008a      	lsls	r2, r1, #2
 80025bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025c0:	f7fd fe26 	bl	8000210 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4b60      	ldr	r3, [pc, #384]	@ (800274c <UART_SetConfig+0x4e4>)
 80025ca:	fba3 2302 	umull	r2, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	011c      	lsls	r4, r3, #4
 80025d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025e4:	4642      	mov	r2, r8
 80025e6:	464b      	mov	r3, r9
 80025e8:	1891      	adds	r1, r2, r2
 80025ea:	61b9      	str	r1, [r7, #24]
 80025ec:	415b      	adcs	r3, r3
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f4:	4641      	mov	r1, r8
 80025f6:	1851      	adds	r1, r2, r1
 80025f8:	6139      	str	r1, [r7, #16]
 80025fa:	4649      	mov	r1, r9
 80025fc:	414b      	adcs	r3, r1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800260c:	4659      	mov	r1, fp
 800260e:	00cb      	lsls	r3, r1, #3
 8002610:	4651      	mov	r1, sl
 8002612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002616:	4651      	mov	r1, sl
 8002618:	00ca      	lsls	r2, r1, #3
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	4603      	mov	r3, r0
 8002620:	4642      	mov	r2, r8
 8002622:	189b      	adds	r3, r3, r2
 8002624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002628:	464b      	mov	r3, r9
 800262a:	460a      	mov	r2, r1
 800262c:	eb42 0303 	adc.w	r3, r2, r3
 8002630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800263e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800264c:	4649      	mov	r1, r9
 800264e:	008b      	lsls	r3, r1, #2
 8002650:	4641      	mov	r1, r8
 8002652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002656:	4641      	mov	r1, r8
 8002658:	008a      	lsls	r2, r1, #2
 800265a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800265e:	f7fd fdd7 	bl	8000210 <__aeabi_uldivmod>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4611      	mov	r1, r2
 8002668:	4b38      	ldr	r3, [pc, #224]	@ (800274c <UART_SetConfig+0x4e4>)
 800266a:	fba3 2301 	umull	r2, r3, r3, r1
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	2264      	movs	r2, #100	@ 0x64
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	1acb      	subs	r3, r1, r3
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	3332      	adds	r3, #50	@ 0x32
 800267c:	4a33      	ldr	r2, [pc, #204]	@ (800274c <UART_SetConfig+0x4e4>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002688:	441c      	add	r4, r3
 800268a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800268e:	2200      	movs	r2, #0
 8002690:	673b      	str	r3, [r7, #112]	@ 0x70
 8002692:	677a      	str	r2, [r7, #116]	@ 0x74
 8002694:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002698:	4642      	mov	r2, r8
 800269a:	464b      	mov	r3, r9
 800269c:	1891      	adds	r1, r2, r2
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	415b      	adcs	r3, r3
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026a8:	4641      	mov	r1, r8
 80026aa:	1851      	adds	r1, r2, r1
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	4649      	mov	r1, r9
 80026b0:	414b      	adcs	r3, r1
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026c0:	4659      	mov	r1, fp
 80026c2:	00cb      	lsls	r3, r1, #3
 80026c4:	4651      	mov	r1, sl
 80026c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ca:	4651      	mov	r1, sl
 80026cc:	00ca      	lsls	r2, r1, #3
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	4642      	mov	r2, r8
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026da:	464b      	mov	r3, r9
 80026dc:	460a      	mov	r2, r1
 80026de:	eb42 0303 	adc.w	r3, r2, r3
 80026e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80026ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80026fc:	4649      	mov	r1, r9
 80026fe:	008b      	lsls	r3, r1, #2
 8002700:	4641      	mov	r1, r8
 8002702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002706:	4641      	mov	r1, r8
 8002708:	008a      	lsls	r2, r1, #2
 800270a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800270e:	f7fd fd7f 	bl	8000210 <__aeabi_uldivmod>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <UART_SetConfig+0x4e4>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	@ 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3332      	adds	r3, #50	@ 0x32
 800272a:	4a08      	ldr	r2, [pc, #32]	@ (800274c <UART_SetConfig+0x4e4>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	f003 020f 	and.w	r2, r3, #15
 8002736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4422      	add	r2, r4
 800273e:	609a      	str	r2, [r3, #8]
}
 8002740:	bf00      	nop
 8002742:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002746:	46bd      	mov	sp, r7
 8002748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274c:	51eb851f 	.word	0x51eb851f

08002750 <__NVIC_SetPriority>:
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <SysTick_Handler+0x1c>)
 80027aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80027ac:	f001 fd46 	bl	800423c <xTaskGetSchedulerState>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80027b6:	f002 fb3f 	bl	8004e38 <xPortSysTickHandler>
  }
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	e000e010 	.word	0xe000e010

080027c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80027c8:	2100      	movs	r1, #0
 80027ca:	f06f 0004 	mvn.w	r0, #4
 80027ce:	f7ff ffbf 	bl	8002750 <__NVIC_SetPriority>
#endif
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027de:	f3ef 8305 	mrs	r3, IPSR
 80027e2:	603b      	str	r3, [r7, #0]
  return(result);
 80027e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80027ea:	f06f 0305 	mvn.w	r3, #5
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	e00c      	b.n	800280c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80027f2:	4b0a      	ldr	r3, [pc, #40]	@ (800281c <osKernelInitialize+0x44>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d105      	bne.n	8002806 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <osKernelInitialize+0x44>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002800:	2300      	movs	r3, #0
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	e002      	b.n	800280c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800280a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000118 	.word	0x20000118

08002820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002826:	f3ef 8305 	mrs	r3, IPSR
 800282a:	603b      	str	r3, [r7, #0]
  return(result);
 800282c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002832:	f06f 0305 	mvn.w	r3, #5
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	e010      	b.n	800285c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800283a:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <osKernelStart+0x48>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d109      	bne.n	8002856 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002842:	f7ff ffbf 	bl	80027c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002846:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <osKernelStart+0x48>)
 8002848:	2202      	movs	r2, #2
 800284a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800284c:	f001 f892 	bl	8003974 <vTaskStartScheduler>
      stat = osOK;
 8002850:	2300      	movs	r3, #0
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	e002      	b.n	800285c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800285a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800285c:	687b      	ldr	r3, [r7, #4]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000118 	.word	0x20000118

0800286c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b08e      	sub	sp, #56	@ 0x38
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287c:	f3ef 8305 	mrs	r3, IPSR
 8002880:	617b      	str	r3, [r7, #20]
  return(result);
 8002882:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002884:	2b00      	cmp	r3, #0
 8002886:	d17e      	bne.n	8002986 <osThreadNew+0x11a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d07b      	beq.n	8002986 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002892:	2318      	movs	r3, #24
 8002894:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800289e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d045      	beq.n	8002932 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <osThreadNew+0x48>
        name = attr->name;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <osThreadNew+0x6e>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b38      	cmp	r3, #56	@ 0x38
 80028cc:	d805      	bhi.n	80028da <osThreadNew+0x6e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <osThreadNew+0x72>
        return (NULL);
 80028da:	2300      	movs	r3, #0
 80028dc:	e054      	b.n	8002988 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00e      	beq.n	8002914 <osThreadNew+0xa8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80028fc:	d90a      	bls.n	8002914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <osThreadNew+0xa8>
        mem = 1;
 800290e:	2301      	movs	r3, #1
 8002910:	61bb      	str	r3, [r7, #24]
 8002912:	e010      	b.n	8002936 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <osThreadNew+0xca>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <osThreadNew+0xca>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <osThreadNew+0xca>
          mem = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e001      	b.n	8002936 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d110      	bne.n	800295e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002944:	9202      	str	r2, [sp, #8]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	6a3a      	ldr	r2, [r7, #32]
 8002950:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fe1a 	bl	800358c <xTaskCreateStatic>
 8002958:	4603      	mov	r3, r0
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e013      	b.n	8002986 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d110      	bne.n	8002986 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	b29a      	uxth	r2, r3
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fe68 	bl	800364c <xTaskCreate>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <osThreadNew+0x11a>
            hTask = NULL;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002986:	693b      	ldr	r3, [r7, #16]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3728      	adds	r7, #40	@ 0x28
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002998:	f3ef 8305 	mrs	r3, IPSR
 800299c:	60bb      	str	r3, [r7, #8]
  return(result);
 800299e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <osDelay+0x1c>
    stat = osErrorISR;
 80029a4:	f06f 0305 	mvn.w	r3, #5
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e007      	b.n	80029bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 ffa6 	bl	8003908 <vTaskDelay>
    }
  }

  return (stat);
 80029bc:	68fb      	ldr	r3, [r7, #12]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a07      	ldr	r2, [pc, #28]	@ (80029f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80029d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4a06      	ldr	r2, [pc, #24]	@ (80029f8 <vApplicationGetIdleTaskMemory+0x30>)
 80029de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	@ 0x80
 80029e4:	601a      	str	r2, [r3, #0]
}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	2000011c 	.word	0x2000011c
 80029f8:	200001c4 	.word	0x200001c4

080029fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a06      	ldr	r2, [pc, #24]	@ (8002a2c <vApplicationGetTimerTaskMemory+0x30>)
 8002a12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	200003c4 	.word	0x200003c4
 8002a2c:	2000046c 	.word	0x2000046c

08002a30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 0208 	add.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f103 0208 	add.w	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f103 0208 	add.w	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b085      	sub	sp, #20
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ae8:	d103      	bne.n	8002af2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e00c      	b.n	8002b0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3308      	adds	r3, #8
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e002      	b.n	8002b00 <vListInsert+0x2e>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d2f6      	bcs.n	8002afa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	601a      	str	r2, [r3, #0]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6892      	ldr	r2, [r2, #8]
 8002b5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6852      	ldr	r2, [r2, #4]
 8002b64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d103      	bne.n	8002b78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10b      	bne.n	8002bc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bc4:	f002 f8a8 	bl	8004d18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd0:	68f9      	ldr	r1, [r7, #12]
 8002bd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	441a      	add	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	22ff      	movs	r2, #255	@ 0xff
 8002c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d114      	bne.n	8002c44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01a      	beq.n	8002c58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	3310      	adds	r3, #16
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 f942 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d012      	beq.n	8002c58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <xQueueGenericReset+0xd0>)
 8002c34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	e009      	b.n	8002c58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3310      	adds	r3, #16
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fef1 	bl	8002a30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	3324      	adds	r3, #36	@ 0x24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff feec 	bl	8002a30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c58:	f002 f890 	bl	8004d7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c5c:	2301      	movs	r3, #1
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	@ 0x38
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c92:	bf00      	nop
 8002c94:	bf00      	nop
 8002c96:	e7fd      	b.n	8002c94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca2:	f383 8811 	msr	BASEPRI, r3
 8002ca6:	f3bf 8f6f 	isb	sy
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <xQueueGenericCreateStatic+0x56>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <xQueueGenericCreateStatic+0x5a>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericCreateStatic+0x5c>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	623b      	str	r3, [r7, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <xQueueGenericCreateStatic+0x84>
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <xQueueGenericCreateStatic+0x88>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <xQueueGenericCreateStatic+0x8a>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfe:	f383 8811 	msr	BASEPRI, r3
 8002d02:	f3bf 8f6f 	isb	sy
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	61fb      	str	r3, [r7, #28]
}
 8002d0c:	bf00      	nop
 8002d0e:	bf00      	nop
 8002d10:	e7fd      	b.n	8002d0e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d12:	2350      	movs	r3, #80	@ 0x50
 8002d14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b50      	cmp	r3, #80	@ 0x50
 8002d1a:	d00b      	beq.n	8002d34 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61bb      	str	r3, [r7, #24]
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f805 	bl	8002d66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3730      	adds	r7, #48	@ 0x30
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e002      	b.n	8002d88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d94:	2101      	movs	r1, #1
 8002d96:	69b8      	ldr	r0, [r7, #24]
 8002d98:	f7ff fefe 	bl	8002b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	@ 0x38
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <xQueueGenericSend+0x34>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <xQueueGenericSend+0x42>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueGenericSend+0x46>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueGenericSend+0x48>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <xQueueGenericSend+0x64>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d103      	bne.n	8002e1e <xQueueGenericSend+0x72>
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <xQueueGenericSend+0x76>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <xQueueGenericSend+0x78>
 8002e22:	2300      	movs	r3, #0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <xQueueGenericSend+0x94>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	623b      	str	r3, [r7, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e40:	f001 f9fc 	bl	800423c <xTaskGetSchedulerState>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <xQueueGenericSend+0xa4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <xQueueGenericSend+0xa8>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <xQueueGenericSend+0xaa>
 8002e54:	2300      	movs	r3, #0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <xQueueGenericSend+0xc6>
	__asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	61fb      	str	r3, [r7, #28]
}
 8002e6c:	bf00      	nop
 8002e6e:	bf00      	nop
 8002e70:	e7fd      	b.n	8002e6e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e72:	f001 ff51 	bl	8004d18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <xQueueGenericSend+0xdc>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d129      	bne.n	8002edc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e8e:	f000 fa0f 	bl	80032b0 <prvCopyDataToQueue>
 8002e92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d010      	beq.n	8002ebe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	3324      	adds	r3, #36	@ 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 f805 	bl	8003eb0 <xTaskRemoveFromEventList>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002eac:	4b3f      	ldr	r3, [pc, #252]	@ (8002fac <xQueueGenericSend+0x200>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	e00a      	b.n	8002ed4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ec4:	4b39      	ldr	r3, [pc, #228]	@ (8002fac <xQueueGenericSend+0x200>)
 8002ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ed4:	f001 ff52 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e063      	b.n	8002fa4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ee2:	f001 ff4b 	bl	8004d7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e05c      	b.n	8002fa4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 f83f 	bl	8003f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002efa:	2301      	movs	r3, #1
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002efe:	f001 ff3d 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f02:	f000 fda7 	bl	8003a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f06:	f001 ff07 	bl	8004d18 <vPortEnterCritical>
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f16:	d103      	bne.n	8002f20 <xQueueGenericSend+0x174>
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f26:	b25b      	sxtb	r3, r3
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSend+0x18a>
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f36:	f001 ff21 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f3a:	1d3a      	adds	r2, r7, #4
 8002f3c:	f107 0314 	add.w	r3, r7, #20
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 f82e 	bl	8003fa4 <xTaskCheckForTimeOut>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d124      	bne.n	8002f98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f50:	f000 faa6 	bl	80034a0 <prvIsQueueFull>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 ff52 	bl	8003e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f6a:	f000 fa31 	bl	80033d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f6e:	f000 fd7f 	bl	8003a70 <xTaskResumeAll>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f af7c 	bne.w	8002e72 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <xQueueGenericSend+0x200>)
 8002f7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	e772      	b.n	8002e72 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f8e:	f000 fa1f 	bl	80033d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f92:	f000 fd6d 	bl	8003a70 <xTaskResumeAll>
 8002f96:	e76c      	b.n	8002e72 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f9a:	f000 fa19 	bl	80033d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f9e:	f000 fd67 	bl	8003a70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002fa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3738      	adds	r7, #56	@ 0x38
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	e000ed04 	.word	0xe000ed04

08002fb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b090      	sub	sp, #64	@ 0x40
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <xQueueGenericSendFromISR+0x3e>
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <xQueueGenericSendFromISR+0x42>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueGenericSendFromISR+0x44>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800300a:	bf00      	nop
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d103      	bne.n	800301e <xQueueGenericSendFromISR+0x6e>
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <xQueueGenericSendFromISR+0x72>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <xQueueGenericSendFromISR+0x74>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10b      	bne.n	8003040 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	623b      	str	r3, [r7, #32]
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003040:	f001 ff4a 	bl	8004ed8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003044:	f3ef 8211 	mrs	r2, BASEPRI
 8003048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	61fa      	str	r2, [r7, #28]
 800305a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800305c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800305e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	429a      	cmp	r2, r3
 800306a:	d302      	bcc.n	8003072 <xQueueGenericSendFromISR+0xc2>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d12f      	bne.n	80030d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003074:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003078:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003088:	f000 f912 	bl	80032b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800308c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003094:	d112      	bne.n	80030bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a0:	3324      	adds	r3, #36	@ 0x24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 ff04 	bl	8003eb0 <xTaskRemoveFromEventList>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00e      	beq.n	80030cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e007      	b.n	80030cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80030c0:	3301      	adds	r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80030cc:	2301      	movs	r3, #1
 80030ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80030d0:	e001      	b.n	80030d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3740      	adds	r7, #64	@ 0x40
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	@ 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xQueueReceive+0x32>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	623b      	str	r3, [r7, #32]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d103      	bne.n	800312c <xQueueReceive+0x40>
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <xQueueReceive+0x44>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <xQueueReceive+0x46>
 8003130:	2300      	movs	r3, #0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <xQueueReceive+0x62>
	__asm volatile
 8003136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	61fb      	str	r3, [r7, #28]
}
 8003148:	bf00      	nop
 800314a:	bf00      	nop
 800314c:	e7fd      	b.n	800314a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800314e:	f001 f875 	bl	800423c <xTaskGetSchedulerState>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d102      	bne.n	800315e <xQueueReceive+0x72>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <xQueueReceive+0x76>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <xQueueReceive+0x78>
 8003162:	2300      	movs	r3, #0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <xQueueReceive+0x94>
	__asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	61bb      	str	r3, [r7, #24]
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003180:	f001 fdca 	bl	8004d18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01f      	beq.n	80031d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003194:	f000 f8f6 	bl	8003384 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00f      	beq.n	80031c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031aa:	3310      	adds	r3, #16
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 fe7f 	bl	8003eb0 <xTaskRemoveFromEventList>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031b8:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <xQueueReceive+0x1c0>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031c8:	f001 fdd8 	bl	8004d7c <vPortExitCritical>
				return pdPASS;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e069      	b.n	80032a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031d6:	f001 fdd1 	bl	8004d7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031da:	2300      	movs	r3, #0
 80031dc:	e062      	b.n	80032a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d106      	bne.n	80031f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fec5 	bl	8003f78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031f2:	f001 fdc3 	bl	8004d7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031f6:	f000 fc2d 	bl	8003a54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031fa:	f001 fd8d 	bl	8004d18 <vPortEnterCritical>
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003204:	b25b      	sxtb	r3, r3
 8003206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800320a:	d103      	bne.n	8003214 <xQueueReceive+0x128>
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800321a:	b25b      	sxtb	r3, r3
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003220:	d103      	bne.n	800322a <xQueueReceive+0x13e>
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800322a:	f001 fda7 	bl	8004d7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800322e:	1d3a      	adds	r2, r7, #4
 8003230:	f107 0310 	add.w	r3, r7, #16
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f000 feb4 	bl	8003fa4 <xTaskCheckForTimeOut>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d123      	bne.n	800328a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003244:	f000 f916 	bl	8003474 <prvIsQueueEmpty>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d017      	beq.n	800327e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	3324      	adds	r3, #36	@ 0x24
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fdd8 	bl	8003e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800325c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800325e:	f000 f8b7 	bl	80033d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003262:	f000 fc05 	bl	8003a70 <xTaskResumeAll>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d189      	bne.n	8003180 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <xQueueReceive+0x1c0>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	e780      	b.n	8003180 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800327e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003280:	f000 f8a6 	bl	80033d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003284:	f000 fbf4 	bl	8003a70 <xTaskResumeAll>
 8003288:	e77a      	b.n	8003180 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800328a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800328c:	f000 f8a0 	bl	80033d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003290:	f000 fbee 	bl	8003a70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003294:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003296:	f000 f8ed 	bl	8003474 <prvIsQueueEmpty>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f43f af6f 	beq.w	8003180 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3730      	adds	r7, #48	@ 0x30
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d14d      	bne.n	8003372 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 ffcc 	bl	8004278 <xTaskPriorityDisinherit>
 80032e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	e043      	b.n	8003372 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d119      	bne.n	8003324 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6858      	ldr	r0, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	461a      	mov	r2, r3
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	f002 f8a0 	bl	8005440 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	441a      	add	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	429a      	cmp	r2, r3
 8003318:	d32b      	bcc.n	8003372 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	e026      	b.n	8003372 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	68d8      	ldr	r0, [r3, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	461a      	mov	r2, r3
 800332e:	68b9      	ldr	r1, [r7, #8]
 8003330:	f002 f886 	bl	8005440 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	425b      	negs	r3, r3
 800333e:	441a      	add	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d207      	bcs.n	8003360 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003358:	425b      	negs	r3, r3
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d105      	bne.n	8003372 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	3b01      	subs	r3, #1
 8003370:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800337a:	697b      	ldr	r3, [r7, #20]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d018      	beq.n	80033c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	441a      	add	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d303      	bcc.n	80033b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68d9      	ldr	r1, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	461a      	mov	r2, r3
 80033c2:	6838      	ldr	r0, [r7, #0]
 80033c4:	f002 f83c 	bl	8005440 <memcpy>
	}
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033d8:	f001 fc9e 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033e4:	e011      	b.n	800340a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d012      	beq.n	8003414 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3324      	adds	r3, #36	@ 0x24
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fd5c 	bl	8003eb0 <xTaskRemoveFromEventList>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033fe:	f000 fe35 	bl	800406c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	3b01      	subs	r3, #1
 8003406:	b2db      	uxtb	r3, r3
 8003408:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800340a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340e:	2b00      	cmp	r3, #0
 8003410:	dce9      	bgt.n	80033e6 <prvUnlockQueue+0x16>
 8003412:	e000      	b.n	8003416 <prvUnlockQueue+0x46>
					break;
 8003414:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	22ff      	movs	r2, #255	@ 0xff
 800341a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800341e:	f001 fcad 	bl	8004d7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003422:	f001 fc79 	bl	8004d18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800342c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800342e:	e011      	b.n	8003454 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d012      	beq.n	800345e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3310      	adds	r3, #16
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fd37 	bl	8003eb0 <xTaskRemoveFromEventList>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003448:	f000 fe10 	bl	800406c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800344c:	7bbb      	ldrb	r3, [r7, #14]
 800344e:	3b01      	subs	r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003458:	2b00      	cmp	r3, #0
 800345a:	dce9      	bgt.n	8003430 <prvUnlockQueue+0x60>
 800345c:	e000      	b.n	8003460 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800345e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	22ff      	movs	r2, #255	@ 0xff
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003468:	f001 fc88 	bl	8004d7c <vPortExitCritical>
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800347c:	f001 fc4c 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e001      	b.n	8003492 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003492:	f001 fc73 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a8:	f001 fc36 	bl	8004d18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d102      	bne.n	80034be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e001      	b.n	80034c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034c2:	f001 fc5b 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 80034c6:	68fb      	ldr	r3, [r7, #12]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e014      	b.n	800350a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034e0:	4a0f      	ldr	r2, [pc, #60]	@ (8003520 <vQueueAddToRegistry+0x50>)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034ec:	490c      	ldr	r1, [pc, #48]	@ (8003520 <vQueueAddToRegistry+0x50>)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <vQueueAddToRegistry+0x50>)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003502:	e006      	b.n	8003512 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b07      	cmp	r3, #7
 800350e:	d9e7      	bls.n	80034e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	2000086c 	.word	0x2000086c

08003524 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003534:	f001 fbf0 	bl	8004d18 <vPortEnterCritical>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800353e:	b25b      	sxtb	r3, r3
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003544:	d103      	bne.n	800354e <vQueueWaitForMessageRestricted+0x2a>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800355a:	d103      	bne.n	8003564 <vQueueWaitForMessageRestricted+0x40>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003564:	f001 fc0a 	bl	8004d7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3324      	adds	r3, #36	@ 0x24
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc6d 	bl	8003e58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff26 	bl	80033d0 <prvUnlockQueue>
	}
 8003584:	bf00      	nop
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	@ 0x38
 8003590:	af04      	add	r7, sp, #16
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10b      	bne.n	80035b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	623b      	str	r3, [r7, #32]
}
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10b      	bne.n	80035d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fb      	str	r3, [r7, #28]
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	e7fd      	b.n	80035d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035d6:	23a8      	movs	r3, #168	@ 0xa8
 80035d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2ba8      	cmp	r3, #168	@ 0xa8
 80035de:	d00b      	beq.n	80035f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	61bb      	str	r3, [r7, #24]
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01e      	beq.n	800363e <xTaskCreateStatic+0xb2>
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01b      	beq.n	800363e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	2202      	movs	r2, #2
 8003614:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003618:	2300      	movs	r3, #0
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f851 	bl	80036d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003638:	f000 f8f6 	bl	8003828 <prvAddNewTaskToReadyList>
 800363c:	e001      	b.n	8003642 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003642:	697b      	ldr	r3, [r7, #20]
	}
 8003644:	4618      	mov	r0, r3
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	@ 0x30
 8003650:	af04      	add	r7, sp, #16
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fc7b 	bl	8004f5c <pvPortMalloc>
 8003666:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00e      	beq.n	800368c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800366e:	20a8      	movs	r0, #168	@ 0xa8
 8003670:	f001 fc74 	bl	8004f5c <pvPortMalloc>
 8003674:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30
 8003682:	e005      	b.n	8003690 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003684:	6978      	ldr	r0, [r7, #20]
 8003686:	f001 fd37 	bl	80050f8 <vPortFree>
 800368a:	e001      	b.n	8003690 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d017      	beq.n	80036c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800369e:	88fa      	ldrh	r2, [r7, #6]
 80036a0:	2300      	movs	r3, #0
 80036a2:	9303      	str	r3, [sp, #12]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	9302      	str	r3, [sp, #8]
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f80f 	bl	80036d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036ba:	69f8      	ldr	r0, [r7, #28]
 80036bc:	f000 f8b4 	bl	8003828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61bb      	str	r3, [r7, #24]
 80036c4:	e002      	b.n	80036cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036cc:	69bb      	ldr	r3, [r7, #24]
	}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	461a      	mov	r2, r3
 80036f0:	21a5      	movs	r1, #165	@ 0xa5
 80036f2:	f001 fe21 	bl	8005338 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003700:	3b01      	subs	r3, #1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	617b      	str	r3, [r7, #20]
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	e7fd      	b.n	800372e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01f      	beq.n	8003778 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
 800373c:	e012      	b.n	8003764 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	7819      	ldrb	r1, [r3, #0]
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	3334      	adds	r3, #52	@ 0x34
 800374e:	460a      	mov	r2, r1
 8003750:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d006      	beq.n	800376c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3301      	adds	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b0f      	cmp	r3, #15
 8003768:	d9e9      	bls.n	800373e <prvInitialiseNewTask+0x66>
 800376a:	e000      	b.n	800376e <prvInitialiseNewTask+0x96>
			{
				break;
 800376c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003776:	e003      	b.n	8003780 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	2b37      	cmp	r3, #55	@ 0x37
 8003784:	d901      	bls.n	800378a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003786:	2337      	movs	r3, #55	@ 0x37
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800378a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003794:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003798:	2200      	movs	r2, #0
 800379a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800379c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379e:	3304      	adds	r3, #4
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff f965 	bl	8002a70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	3318      	adds	r3, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f960 	bl	8002a70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	2200      	movs	r2, #0
 80037ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	3354      	adds	r3, #84	@ 0x54
 80037da:	224c      	movs	r2, #76	@ 0x4c
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fdaa 	bl	8005338 <memset>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	4a0d      	ldr	r2, [pc, #52]	@ (800381c <prvInitialiseNewTask+0x144>)
 80037e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003820 <prvInitialiseNewTask+0x148>)
 80037ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003824 <prvInitialiseNewTask+0x14c>)
 80037f4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	68f9      	ldr	r1, [r7, #12]
 80037fa:	69b8      	ldr	r0, [r7, #24]
 80037fc:	f001 f95a 	bl	8004ab4 <pxPortInitialiseStack>
 8003800:	4602      	mov	r2, r0
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800380c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003810:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003812:	bf00      	nop
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20004b00 	.word	0x20004b00
 8003820:	20004b68 	.word	0x20004b68
 8003824:	20004bd0 	.word	0x20004bd0

08003828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003830:	f001 fa72 	bl	8004d18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003834:	4b2d      	ldr	r3, [pc, #180]	@ (80038ec <prvAddNewTaskToReadyList+0xc4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	4a2c      	ldr	r2, [pc, #176]	@ (80038ec <prvAddNewTaskToReadyList+0xc4>)
 800383c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800383e:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <prvAddNewTaskToReadyList+0xc8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003846:	4a2a      	ldr	r2, [pc, #168]	@ (80038f0 <prvAddNewTaskToReadyList+0xc8>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800384c:	4b27      	ldr	r3, [pc, #156]	@ (80038ec <prvAddNewTaskToReadyList+0xc4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d110      	bne.n	8003876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003854:	f000 fc2e 	bl	80040b4 <prvInitialiseTaskLists>
 8003858:	e00d      	b.n	8003876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800385a:	4b26      	ldr	r3, [pc, #152]	@ (80038f4 <prvAddNewTaskToReadyList+0xcc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003862:	4b23      	ldr	r3, [pc, #140]	@ (80038f0 <prvAddNewTaskToReadyList+0xc8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	429a      	cmp	r2, r3
 800386e:	d802      	bhi.n	8003876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003870:	4a1f      	ldr	r2, [pc, #124]	@ (80038f0 <prvAddNewTaskToReadyList+0xc8>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003876:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <prvAddNewTaskToReadyList+0xd0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <prvAddNewTaskToReadyList+0xd0>)
 800387e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003880:	4b1d      	ldr	r3, [pc, #116]	@ (80038f8 <prvAddNewTaskToReadyList+0xd0>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800388c:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <prvAddNewTaskToReadyList+0xd4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d903      	bls.n	800389c <prvAddNewTaskToReadyList+0x74>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	4a18      	ldr	r2, [pc, #96]	@ (80038fc <prvAddNewTaskToReadyList+0xd4>)
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4a15      	ldr	r2, [pc, #84]	@ (8003900 <prvAddNewTaskToReadyList+0xd8>)
 80038aa:	441a      	add	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7ff f8e9 	bl	8002a8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038b8:	f001 fa60 	bl	8004d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038bc:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <prvAddNewTaskToReadyList+0xcc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <prvAddNewTaskToReadyList+0xc8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d207      	bcs.n	80038e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <prvAddNewTaskToReadyList+0xdc>)
 80038d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000d80 	.word	0x20000d80
 80038f0:	200008ac 	.word	0x200008ac
 80038f4:	20000d8c 	.word	0x20000d8c
 80038f8:	20000d9c 	.word	0x20000d9c
 80038fc:	20000d88 	.word	0x20000d88
 8003900:	200008b0 	.word	0x200008b0
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800391a:	4b14      	ldr	r3, [pc, #80]	@ (800396c <vTaskDelay+0x64>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <vTaskDelay+0x32>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60bb      	str	r3, [r7, #8]
}
 8003934:	bf00      	nop
 8003936:	bf00      	nop
 8003938:	e7fd      	b.n	8003936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800393a:	f000 f88b 	bl	8003a54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800393e:	2100      	movs	r1, #0
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fd09 	bl	8004358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003946:	f000 f893 	bl	8003a70 <xTaskResumeAll>
 800394a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d107      	bne.n	8003962 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003952:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <vTaskDelay+0x68>)
 8003954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000da8 	.word	0x20000da8
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003982:	463a      	mov	r2, r7
 8003984:	1d39      	adds	r1, r7, #4
 8003986:	f107 0308 	add.w	r3, r7, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff f81c 	bl	80029c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	9202      	str	r2, [sp, #8]
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	2300      	movs	r3, #0
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	2300      	movs	r3, #0
 80039a0:	460a      	mov	r2, r1
 80039a2:	4924      	ldr	r1, [pc, #144]	@ (8003a34 <vTaskStartScheduler+0xc0>)
 80039a4:	4824      	ldr	r0, [pc, #144]	@ (8003a38 <vTaskStartScheduler+0xc4>)
 80039a6:	f7ff fdf1 	bl	800358c <xTaskCreateStatic>
 80039aa:	4603      	mov	r3, r0
 80039ac:	4a23      	ldr	r2, [pc, #140]	@ (8003a3c <vTaskStartScheduler+0xc8>)
 80039ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039b0:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <vTaskStartScheduler+0xc8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039b8:	2301      	movs	r3, #1
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	e001      	b.n	80039c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039c8:	f000 fd1a 	bl	8004400 <xTimerCreateTimerTask>
 80039cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11b      	bne.n	8003a0c <vTaskStartScheduler+0x98>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
}
 80039e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80039e8:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <vTaskStartScheduler+0xcc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3354      	adds	r3, #84	@ 0x54
 80039ee:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <vTaskStartScheduler+0xd0>)
 80039f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80039f2:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <vTaskStartScheduler+0xd4>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80039fa:	4b14      	ldr	r3, [pc, #80]	@ (8003a4c <vTaskStartScheduler+0xd8>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a00:	4b13      	ldr	r3, [pc, #76]	@ (8003a50 <vTaskStartScheduler+0xdc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a06:	f001 f8e3 	bl	8004bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a0a:	e00f      	b.n	8003a2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a12:	d10b      	bne.n	8003a2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	60fb      	str	r3, [r7, #12]
}
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <vTaskStartScheduler+0xb4>
}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	08005530 	.word	0x08005530
 8003a38:	08004085 	.word	0x08004085
 8003a3c:	20000da4 	.word	0x20000da4
 8003a40:	200008ac 	.word	0x200008ac
 8003a44:	20000010 	.word	0x20000010
 8003a48:	20000da0 	.word	0x20000da0
 8003a4c:	20000d8c 	.word	0x20000d8c
 8003a50:	20000d84 	.word	0x20000d84

08003a54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a03      	ldr	r2, [pc, #12]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000da8 	.word	0x20000da8

08003a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a7e:	4b42      	ldr	r3, [pc, #264]	@ (8003b88 <xTaskResumeAll+0x118>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <xTaskResumeAll+0x2e>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	603b      	str	r3, [r7, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	e7fd      	b.n	8003a9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a9e:	f001 f93b 	bl	8004d18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aa2:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <xTaskResumeAll+0x118>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a37      	ldr	r2, [pc, #220]	@ (8003b88 <xTaskResumeAll+0x118>)
 8003aaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aac:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <xTaskResumeAll+0x118>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d162      	bne.n	8003b7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab4:	4b35      	ldr	r3, [pc, #212]	@ (8003b8c <xTaskResumeAll+0x11c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05e      	beq.n	8003b7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003abc:	e02f      	b.n	8003b1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f83a 	bl	8002b44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f835 	bl	8002b44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	4b2d      	ldr	r3, [pc, #180]	@ (8003b94 <xTaskResumeAll+0x124>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d903      	bls.n	8003aee <xTaskResumeAll+0x7e>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aea:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <xTaskResumeAll+0x124>)
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <xTaskResumeAll+0x128>)
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe ffc0 	bl	8002a8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <xTaskResumeAll+0x12c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b18:	4b21      	ldr	r3, [pc, #132]	@ (8003ba0 <xTaskResumeAll+0x130>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003b90 <xTaskResumeAll+0x120>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1cb      	bne.n	8003abe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b2c:	f000 fb66 	bl	80041fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b30:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <xTaskResumeAll+0x134>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b3c:	f000 f846 	bl	8003bcc <xTaskIncrementTick>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003b46:	4b16      	ldr	r3, [pc, #88]	@ (8003ba0 <xTaskResumeAll+0x130>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1f1      	bne.n	8003b3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003b58:	4b12      	ldr	r3, [pc, #72]	@ (8003ba4 <xTaskResumeAll+0x134>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <xTaskResumeAll+0x130>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <xTaskResumeAll+0x138>)
 8003b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b7a:	f001 f8ff 	bl	8004d7c <vPortExitCritical>

	return xAlreadyYielded;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000da8 	.word	0x20000da8
 8003b8c:	20000d80 	.word	0x20000d80
 8003b90:	20000d40 	.word	0x20000d40
 8003b94:	20000d88 	.word	0x20000d88
 8003b98:	200008b0 	.word	0x200008b0
 8003b9c:	200008ac 	.word	0x200008ac
 8003ba0:	20000d94 	.word	0x20000d94
 8003ba4:	20000d90 	.word	0x20000d90
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bb2:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <xTaskGetTickCount+0x1c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000d84 	.word	0x20000d84

08003bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d14 <xTaskIncrementTick+0x148>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8090 	bne.w	8003d00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be0:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <xTaskIncrementTick+0x14c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be8:	4a4b      	ldr	r2, [pc, #300]	@ (8003d18 <xTaskIncrementTick+0x14c>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d121      	bne.n	8003c38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf4:	4b49      	ldr	r3, [pc, #292]	@ (8003d1c <xTaskIncrementTick+0x150>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00b      	beq.n	8003c16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	603b      	str	r3, [r7, #0]
}
 8003c10:	bf00      	nop
 8003c12:	bf00      	nop
 8003c14:	e7fd      	b.n	8003c12 <xTaskIncrementTick+0x46>
 8003c16:	4b41      	ldr	r3, [pc, #260]	@ (8003d1c <xTaskIncrementTick+0x150>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <xTaskIncrementTick+0x154>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	@ (8003d1c <xTaskIncrementTick+0x150>)
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4a3e      	ldr	r2, [pc, #248]	@ (8003d20 <xTaskIncrementTick+0x154>)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d24 <xTaskIncrementTick+0x158>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a3c      	ldr	r2, [pc, #240]	@ (8003d24 <xTaskIncrementTick+0x158>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	f000 fae2 	bl	80041fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c38:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <xTaskIncrementTick+0x15c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d349      	bcc.n	8003cd6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c42:	4b36      	ldr	r3, [pc, #216]	@ (8003d1c <xTaskIncrementTick+0x150>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4c:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <xTaskIncrementTick+0x15c>)
 8003c4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c52:	601a      	str	r2, [r3, #0]
					break;
 8003c54:	e03f      	b.n	8003cd6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c56:	4b31      	ldr	r3, [pc, #196]	@ (8003d1c <xTaskIncrementTick+0x150>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d203      	bcs.n	8003c76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003d28 <xTaskIncrementTick+0x15c>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c74:	e02f      	b.n	8003cd6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe ff62 	bl	8002b44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe ff59 	bl	8002b44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c96:	4b25      	ldr	r3, [pc, #148]	@ (8003d2c <xTaskIncrementTick+0x160>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d903      	bls.n	8003ca6 <xTaskIncrementTick+0xda>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	4a22      	ldr	r2, [pc, #136]	@ (8003d2c <xTaskIncrementTick+0x160>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d30 <xTaskIncrementTick+0x164>)
 8003cb4:	441a      	add	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fe fee4 	bl	8002a8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <xTaskIncrementTick+0x168>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d3b8      	bcc.n	8003c42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd4:	e7b5      	b.n	8003c42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd6:	4b17      	ldr	r3, [pc, #92]	@ (8003d34 <xTaskIncrementTick+0x168>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cdc:	4914      	ldr	r1, [pc, #80]	@ (8003d30 <xTaskIncrementTick+0x164>)
 8003cde:	4613      	mov	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d901      	bls.n	8003cf2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003cf2:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <xTaskIncrementTick+0x16c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e004      	b.n	8003d0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d00:	4b0e      	ldr	r3, [pc, #56]	@ (8003d3c <xTaskIncrementTick+0x170>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a0d      	ldr	r2, [pc, #52]	@ (8003d3c <xTaskIncrementTick+0x170>)
 8003d08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d0a:	697b      	ldr	r3, [r7, #20]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000da8 	.word	0x20000da8
 8003d18:	20000d84 	.word	0x20000d84
 8003d1c:	20000d38 	.word	0x20000d38
 8003d20:	20000d3c 	.word	0x20000d3c
 8003d24:	20000d98 	.word	0x20000d98
 8003d28:	20000da0 	.word	0x20000da0
 8003d2c:	20000d88 	.word	0x20000d88
 8003d30:	200008b0 	.word	0x200008b0
 8003d34:	200008ac 	.word	0x200008ac
 8003d38:	20000d94 	.word	0x20000d94
 8003d3c:	20000d90 	.word	0x20000d90

08003d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d46:	4b2b      	ldr	r3, [pc, #172]	@ (8003df4 <vTaskSwitchContext+0xb4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003df8 <vTaskSwitchContext+0xb8>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d54:	e047      	b.n	8003de6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003d56:	4b28      	ldr	r3, [pc, #160]	@ (8003df8 <vTaskSwitchContext+0xb8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <vTaskSwitchContext+0xbc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e011      	b.n	8003d88 <vTaskSwitchContext+0x48>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <vTaskSwitchContext+0x42>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <vTaskSwitchContext+0x3e>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	491d      	ldr	r1, [pc, #116]	@ (8003e00 <vTaskSwitchContext+0xc0>)
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0e3      	beq.n	8003d64 <vTaskSwitchContext+0x24>
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4a16      	ldr	r2, [pc, #88]	@ (8003e00 <vTaskSwitchContext+0xc0>)
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d104      	bne.n	8003dcc <vTaskSwitchContext+0x8c>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <vTaskSwitchContext+0xc4>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4a09      	ldr	r2, [pc, #36]	@ (8003dfc <vTaskSwitchContext+0xbc>)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ddc:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <vTaskSwitchContext+0xc4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3354      	adds	r3, #84	@ 0x54
 8003de2:	4a09      	ldr	r2, [pc, #36]	@ (8003e08 <vTaskSwitchContext+0xc8>)
 8003de4:	6013      	str	r3, [r2, #0]
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000da8 	.word	0x20000da8
 8003df8:	20000d94 	.word	0x20000d94
 8003dfc:	20000d88 	.word	0x20000d88
 8003e00:	200008b0 	.word	0x200008b0
 8003e04:	200008ac 	.word	0x200008ac
 8003e08:	20000010 	.word	0x20000010

08003e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	60fb      	str	r3, [r7, #12]
}
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e34:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <vTaskPlaceOnEventList+0x48>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3318      	adds	r3, #24
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fe fe48 	bl	8002ad2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e42:	2101      	movs	r1, #1
 8003e44:	6838      	ldr	r0, [r7, #0]
 8003e46:	f000 fa87 	bl	8004358 <prvAddCurrentTaskToDelayedList>
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200008ac 	.word	0x200008ac

08003e58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	617b      	str	r3, [r7, #20]
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	e7fd      	b.n	8003e7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <vTaskPlaceOnEventListRestricted+0x54>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	3318      	adds	r3, #24
 8003e88:	4619      	mov	r1, r3
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7fe fdfd 	bl	8002a8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	68b8      	ldr	r0, [r7, #8]
 8003ea0:	f000 fa5a 	bl	8004358 <prvAddCurrentTaskToDelayedList>
	}
 8003ea4:	bf00      	nop
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200008ac 	.word	0x200008ac

08003eb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	60fb      	str	r3, [r7, #12]
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	e7fd      	b.n	8003eda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fe2e 	bl	8002b44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f60 <xTaskRemoveFromEventList+0xb0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11d      	bne.n	8003f2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fe25 	bl	8002b44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efe:	4b19      	ldr	r3, [pc, #100]	@ (8003f64 <xTaskRemoveFromEventList+0xb4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d903      	bls.n	8003f0e <xTaskRemoveFromEventList+0x5e>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <xTaskRemoveFromEventList+0xb4>)
 8003f0c:	6013      	str	r3, [r2, #0]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4a13      	ldr	r2, [pc, #76]	@ (8003f68 <xTaskRemoveFromEventList+0xb8>)
 8003f1c:	441a      	add	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe fdb0 	bl	8002a8a <vListInsertEnd>
 8003f2a:	e005      	b.n	8003f38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3318      	adds	r3, #24
 8003f30:	4619      	mov	r1, r3
 8003f32:	480e      	ldr	r0, [pc, #56]	@ (8003f6c <xTaskRemoveFromEventList+0xbc>)
 8003f34:	f7fe fda9 	bl	8002a8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <xTaskRemoveFromEventList+0xc0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d905      	bls.n	8003f52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <xTaskRemoveFromEventList+0xc4>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	e001      	b.n	8003f56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f56:	697b      	ldr	r3, [r7, #20]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000da8 	.word	0x20000da8
 8003f64:	20000d88 	.word	0x20000d88
 8003f68:	200008b0 	.word	0x200008b0
 8003f6c:	20000d40 	.word	0x20000d40
 8003f70:	200008ac 	.word	0x200008ac
 8003f74:	20000d94 	.word	0x20000d94

08003f78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f80:	4b06      	ldr	r3, [pc, #24]	@ (8003f9c <vTaskInternalSetTimeOutState+0x24>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f88:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <vTaskInternalSetTimeOutState+0x28>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	605a      	str	r2, [r3, #4]
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	20000d98 	.word	0x20000d98
 8003fa0:	20000d84 	.word	0x20000d84

08003fa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	613b      	str	r3, [r7, #16]
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60fb      	str	r3, [r7, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003fea:	f000 fe95 	bl	8004d18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fee:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <xTaskCheckForTimeOut+0xc0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004006:	d102      	bne.n	800400e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004008:	2300      	movs	r3, #0
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	e023      	b.n	8004056 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b15      	ldr	r3, [pc, #84]	@ (8004068 <xTaskCheckForTimeOut+0xc4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d007      	beq.n	800402a <xTaskCheckForTimeOut+0x86>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004024:	2301      	movs	r3, #1
 8004026:	61fb      	str	r3, [r7, #28]
 8004028:	e015      	b.n	8004056 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	d20b      	bcs.n	800404c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff99 	bl	8003f78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	61fb      	str	r3, [r7, #28]
 800404a:	e004      	b.n	8004056 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004056:	f000 fe91 	bl	8004d7c <vPortExitCritical>

	return xReturn;
 800405a:	69fb      	ldr	r3, [r7, #28]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	20000d84 	.word	0x20000d84
 8004068:	20000d98 	.word	0x20000d98

0800406c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004070:	4b03      	ldr	r3, [pc, #12]	@ (8004080 <vTaskMissedYield+0x14>)
 8004072:	2201      	movs	r2, #1
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000d94 	.word	0x20000d94

08004084 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800408c:	f000 f852 	bl	8004134 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <prvIdleTask+0x28>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d9f9      	bls.n	800408c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004098:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <prvIdleTask+0x2c>)
 800409a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040a8:	e7f0      	b.n	800408c <prvIdleTask+0x8>
 80040aa:	bf00      	nop
 80040ac:	200008b0 	.word	0x200008b0
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	e00c      	b.n	80040da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <prvInitialiseTaskLists+0x60>)
 80040cc:	4413      	add	r3, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fcae 	bl	8002a30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3301      	adds	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b37      	cmp	r3, #55	@ 0x37
 80040de:	d9ef      	bls.n	80040c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040e0:	480d      	ldr	r0, [pc, #52]	@ (8004118 <prvInitialiseTaskLists+0x64>)
 80040e2:	f7fe fca5 	bl	8002a30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040e6:	480d      	ldr	r0, [pc, #52]	@ (800411c <prvInitialiseTaskLists+0x68>)
 80040e8:	f7fe fca2 	bl	8002a30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040ec:	480c      	ldr	r0, [pc, #48]	@ (8004120 <prvInitialiseTaskLists+0x6c>)
 80040ee:	f7fe fc9f 	bl	8002a30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040f2:	480c      	ldr	r0, [pc, #48]	@ (8004124 <prvInitialiseTaskLists+0x70>)
 80040f4:	f7fe fc9c 	bl	8002a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040f8:	480b      	ldr	r0, [pc, #44]	@ (8004128 <prvInitialiseTaskLists+0x74>)
 80040fa:	f7fe fc99 	bl	8002a30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040fe:	4b0b      	ldr	r3, [pc, #44]	@ (800412c <prvInitialiseTaskLists+0x78>)
 8004100:	4a05      	ldr	r2, [pc, #20]	@ (8004118 <prvInitialiseTaskLists+0x64>)
 8004102:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004104:	4b0a      	ldr	r3, [pc, #40]	@ (8004130 <prvInitialiseTaskLists+0x7c>)
 8004106:	4a05      	ldr	r2, [pc, #20]	@ (800411c <prvInitialiseTaskLists+0x68>)
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200008b0 	.word	0x200008b0
 8004118:	20000d10 	.word	0x20000d10
 800411c:	20000d24 	.word	0x20000d24
 8004120:	20000d40 	.word	0x20000d40
 8004124:	20000d54 	.word	0x20000d54
 8004128:	20000d6c 	.word	0x20000d6c
 800412c:	20000d38 	.word	0x20000d38
 8004130:	20000d3c 	.word	0x20000d3c

08004134 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800413a:	e019      	b.n	8004170 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800413c:	f000 fdec 	bl	8004d18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <prvCheckTasksWaitingTermination+0x50>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fcf9 	bl	8002b44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <prvCheckTasksWaitingTermination+0x54>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3b01      	subs	r3, #1
 8004158:	4a0b      	ldr	r2, [pc, #44]	@ (8004188 <prvCheckTasksWaitingTermination+0x54>)
 800415a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004164:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004166:	f000 fe09 	bl	8004d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f810 	bl	8004190 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <prvCheckTasksWaitingTermination+0x58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e1      	bne.n	800413c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000d54 	.word	0x20000d54
 8004188:	20000d80 	.word	0x20000d80
 800418c:	20000d68 	.word	0x20000d68

08004190 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3354      	adds	r3, #84	@ 0x54
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f8d3 	bl	8005348 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d108      	bne.n	80041be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 ffa1 	bl	80050f8 <vPortFree>
				vPortFree( pxTCB );
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 ff9e 	bl	80050f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041bc:	e019      	b.n	80041f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d103      	bne.n	80041d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 ff95 	bl	80050f8 <vPortFree>
	}
 80041ce:	e010      	b.n	80041f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d00b      	beq.n	80041f2 <prvDeleteTCB+0x62>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	60fb      	str	r3, [r7, #12]
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	e7fd      	b.n	80041ee <prvDeleteTCB+0x5e>
	}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800420c:	4b0a      	ldr	r3, [pc, #40]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004212:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004214:	e008      	b.n	8004228 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004216:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <prvResetNextTaskUnblockTime+0x38>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a04      	ldr	r2, [pc, #16]	@ (8004238 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	6013      	str	r3, [r2, #0]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000d38 	.word	0x20000d38
 8004238:	20000da0 	.word	0x20000da0

0800423c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004242:	4b0b      	ldr	r3, [pc, #44]	@ (8004270 <xTaskGetSchedulerState+0x34>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800424a:	2301      	movs	r3, #1
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	e008      	b.n	8004262 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004250:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <xTaskGetSchedulerState+0x38>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004258:	2302      	movs	r3, #2
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e001      	b.n	8004262 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004262:	687b      	ldr	r3, [r7, #4]
	}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	20000d8c 	.word	0x20000d8c
 8004274:	20000da8 	.word	0x20000da8

08004278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d058      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800428e:	4b2f      	ldr	r3, [pc, #188]	@ (800434c <xTaskPriorityDisinherit+0xd4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	429a      	cmp	r2, r3
 8004296:	d00b      	beq.n	80042b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
}
 80042aa:	bf00      	nop
 80042ac:	bf00      	nop
 80042ae:	e7fd      	b.n	80042ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10b      	bne.n	80042d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d4:	1e5a      	subs	r2, r3, #1
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d02c      	beq.n	8004340 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d128      	bne.n	8004340 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fc26 	bl	8002b44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d903      	bls.n	8004320 <xTaskPriorityDisinherit+0xa8>
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <xTaskPriorityDisinherit+0xd8>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4a09      	ldr	r2, [pc, #36]	@ (8004354 <xTaskPriorityDisinherit+0xdc>)
 800432e:	441a      	add	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fba7 	bl	8002a8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004340:	697b      	ldr	r3, [r7, #20]
	}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200008ac 	.word	0x200008ac
 8004350:	20000d88 	.word	0x20000d88
 8004354:	200008b0 	.word	0x200008b0

08004358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004362:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fbe8 	bl	8002b44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437a:	d10a      	bne.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4819      	ldr	r0, [pc, #100]	@ (80043f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800438c:	f7fe fb7d 	bl	8002a8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004390:	e026      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4413      	add	r3, r2
 8004398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d209      	bcs.n	80043be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043aa:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f7fe fb8b 	bl	8002ad2 <vListInsert>
}
 80043bc:	e010      	b.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043be:	4b0e      	ldr	r3, [pc, #56]	@ (80043f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fb81 	bl	8002ad2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d0:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d202      	bcs.n	80043e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043da:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	3710      	adds	r7, #16
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000d84 	.word	0x20000d84
 80043ec:	200008ac 	.word	0x200008ac
 80043f0:	20000d6c 	.word	0x20000d6c
 80043f4:	20000d3c 	.word	0x20000d3c
 80043f8:	20000d38 	.word	0x20000d38
 80043fc:	20000da0 	.word	0x20000da0

08004400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800440a:	f000 fb13 	bl	8004a34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800440e:	4b1d      	ldr	r3, [pc, #116]	@ (8004484 <xTimerCreateTimerTask+0x84>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d021      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800441e:	1d3a      	adds	r2, r7, #4
 8004420:	f107 0108 	add.w	r1, r7, #8
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fae7 	bl	80029fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	9202      	str	r2, [sp, #8]
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	2302      	movs	r3, #2
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	2300      	movs	r3, #0
 800443e:	460a      	mov	r2, r1
 8004440:	4911      	ldr	r1, [pc, #68]	@ (8004488 <xTimerCreateTimerTask+0x88>)
 8004442:	4812      	ldr	r0, [pc, #72]	@ (800448c <xTimerCreateTimerTask+0x8c>)
 8004444:	f7ff f8a2 	bl	800358c <xTaskCreateStatic>
 8004448:	4603      	mov	r3, r0
 800444a:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 800444c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <xTimerCreateTimerTask+0x90>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000ddc 	.word	0x20000ddc
 8004488:	08005538 	.word	0x08005538
 800448c:	080045cd 	.word	0x080045cd
 8004490:	20000de0 	.word	0x20000de0

08004494 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	@ 0x28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	623b      	str	r3, [r7, #32]
}
 80044be:	bf00      	nop
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044c4:	4b19      	ldr	r3, [pc, #100]	@ (800452c <xTimerGenericCommand+0x98>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d02a      	beq.n	8004522 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	dc18      	bgt.n	8004510 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044de:	f7ff fead 	bl	800423c <xTaskGetSchedulerState>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d109      	bne.n	80044fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044e8:	4b10      	ldr	r3, [pc, #64]	@ (800452c <xTimerGenericCommand+0x98>)
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	f107 0110 	add.w	r1, r7, #16
 80044f0:	2300      	movs	r3, #0
 80044f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044f4:	f7fe fc5a 	bl	8002dac <xQueueGenericSend>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80044fa:	e012      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <xTimerGenericCommand+0x98>)
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	f107 0110 	add.w	r1, r7, #16
 8004504:	2300      	movs	r3, #0
 8004506:	2200      	movs	r2, #0
 8004508:	f7fe fc50 	bl	8002dac <xQueueGenericSend>
 800450c:	6278      	str	r0, [r7, #36]	@ 0x24
 800450e:	e008      	b.n	8004522 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <xTimerGenericCommand+0x98>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f107 0110 	add.w	r1, r7, #16
 8004518:	2300      	movs	r3, #0
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	f7fe fd48 	bl	8002fb0 <xQueueGenericSendFromISR>
 8004520:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004524:	4618      	mov	r0, r3
 8004526:	3728      	adds	r7, #40	@ 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000ddc 	.word	0x20000ddc

08004530 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453a:	4b23      	ldr	r3, [pc, #140]	@ (80045c8 <prvProcessExpiredTimer+0x98>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3304      	adds	r3, #4
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fafb 	bl	8002b44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d023      	beq.n	80045a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	699a      	ldr	r2, [r3, #24]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	18d1      	adds	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	6978      	ldr	r0, [r7, #20]
 800456a:	f000 f8d5 	bl	8004718 <prvInsertTimerInActiveList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	2100      	movs	r1, #0
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff ff88 	bl	8004494 <xTimerGenericCommand>
 8004584:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d114      	bne.n	80045b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	6978      	ldr	r0, [r7, #20]
 80045bc:	4798      	blx	r3
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000dd4 	.word	0x20000dd4

080045cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045d4:	f107 0308 	add.w	r3, r7, #8
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f859 	bl	8004690 <prvGetNextExpireTime>
 80045de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4619      	mov	r1, r3
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f805 	bl	80045f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045ea:	f000 f8d7 	bl	800479c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045ee:	bf00      	nop
 80045f0:	e7f0      	b.n	80045d4 <prvTimerTask+0x8>
	...

080045f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80045fe:	f7ff fa29 	bl	8003a54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	4618      	mov	r0, r3
 8004608:	f000 f866 	bl	80046d8 <prvSampleTimeNow>
 800460c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d130      	bne.n	8004676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	429a      	cmp	r2, r3
 8004620:	d806      	bhi.n	8004630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004622:	f7ff fa25 	bl	8003a70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004626:	68f9      	ldr	r1, [r7, #12]
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff81 	bl	8004530 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800462e:	e024      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004636:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <prvProcessTimerOrBlockTask+0x90>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <prvProcessTimerOrBlockTask+0x50>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <prvProcessTimerOrBlockTask+0x52>
 8004644:	2300      	movs	r3, #0
 8004646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004648:	4b0f      	ldr	r3, [pc, #60]	@ (8004688 <prvProcessTimerOrBlockTask+0x94>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4619      	mov	r1, r3
 8004656:	f7fe ff65 	bl	8003524 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800465a:	f7ff fa09 	bl	8003a70 <xTaskResumeAll>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004664:	4b09      	ldr	r3, [pc, #36]	@ (800468c <prvProcessTimerOrBlockTask+0x98>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
}
 8004674:	e001      	b.n	800467a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004676:	f7ff f9fb 	bl	8003a70 <xTaskResumeAll>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000dd8 	.word	0x20000dd8
 8004688:	20000ddc 	.word	0x20000ddc
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004698:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <prvGetNextExpireTime+0x16>
 80046a2:	2201      	movs	r2, #1
 80046a4:	e000      	b.n	80046a8 <prvGetNextExpireTime+0x18>
 80046a6:	2200      	movs	r2, #0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046b4:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <prvGetNextExpireTime+0x44>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	e001      	b.n	80046c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046c4:	68fb      	ldr	r3, [r7, #12]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000dd4 	.word	0x20000dd4

080046d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e0:	f7ff fa64 	bl	8003bac <xTaskGetTickCount>
 80046e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <prvSampleTimeNow+0x3c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d205      	bcs.n	80046fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f0:	f000 f93a 	bl	8004968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e002      	b.n	8004702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <prvSampleTimeNow+0x3c>)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004708:	68fb      	ldr	r3, [r7, #12]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	20000de4 	.word	0x20000de4

08004718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d812      	bhi.n	8004764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e01b      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004752:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <prvInsertTimerInActiveList+0x7c>)
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe f9b8 	bl	8002ad2 <vListInsert>
 8004762:	e012      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d206      	bcs.n	800477a <prvInsertTimerInActiveList+0x62>
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004774:	2301      	movs	r3, #1
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e007      	b.n	800478a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <prvInsertTimerInActiveList+0x80>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3304      	adds	r3, #4
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f7fe f9a4 	bl	8002ad2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000dd8 	.word	0x20000dd8
 8004798:	20000dd4 	.word	0x20000dd4

0800479c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08e      	sub	sp, #56	@ 0x38
 80047a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047a2:	e0ce      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	da19      	bge.n	80047de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	3304      	adds	r3, #4
 80047ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d4:	6850      	ldr	r0, [r2, #4]
 80047d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	4611      	mov	r1, r2
 80047dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f2c0 80ae 	blt.w	8004942 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d004      	beq.n	80047fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe f9a4 	bl	8002b44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047fc:	463b      	mov	r3, r7
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff6a 	bl	80046d8 <prvSampleTimeNow>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b09      	cmp	r3, #9
 800480a:	f200 8097 	bhi.w	800493c <prvProcessReceivedCommands+0x1a0>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <prvProcessReceivedCommands+0x78>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	0800483d 	.word	0x0800483d
 8004818:	0800483d 	.word	0x0800483d
 800481c:	0800483d 	.word	0x0800483d
 8004820:	080048b3 	.word	0x080048b3
 8004824:	080048c7 	.word	0x080048c7
 8004828:	08004913 	.word	0x08004913
 800482c:	0800483d 	.word	0x0800483d
 8004830:	0800483d 	.word	0x0800483d
 8004834:	080048b3 	.word	0x080048b3
 8004838:	080048c7 	.word	0x080048c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	b2da      	uxtb	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	18d1      	adds	r1, r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800485a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800485c:	f7ff ff5c 	bl	8004718 <prvInsertTimerInActiveList>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d06c      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800486c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d061      	beq.n	8004940 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	441a      	add	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	2100      	movs	r1, #0
 800488c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800488e:	f7ff fe01 	bl	8004494 <xTimerGenericCommand>
 8004892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d152      	bne.n	8004940 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	61bb      	str	r3, [r7, #24]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80048c4:	e03d      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10b      	bne.n	80048fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	e7fd      	b.n	80048fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	18d1      	adds	r1, r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490c:	f7ff ff04 	bl	8004718 <prvInsertTimerInActiveList>
					break;
 8004910:	e017      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004922:	f000 fbe9 	bl	80050f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004926:	e00c      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800493a:	e002      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800493c:	bf00      	nop
 800493e:	e000      	b.n	8004942 <prvProcessReceivedCommands+0x1a6>
					break;
 8004940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <prvProcessReceivedCommands+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1d39      	adds	r1, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fbce 	bl	80030ec <xQueueReceive>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af26 	bne.w	80047a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3730      	adds	r7, #48	@ 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000ddc 	.word	0x20000ddc

08004968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	e049      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f8db 	bl	8002b44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02f      	beq.n	8004a04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90e      	bls.n	80049d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fe f880 	bl	8002ad2 <vListInsert>
 80049d2:	e017      	b.n	8004a04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	2100      	movs	r1, #0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd58 	bl	8004494 <xTimerGenericCommand>
 80049e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	bf00      	nop
 8004a02:	e7fd      	b.n	8004a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1b0      	bne.n	8004970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a0e:	4b07      	ldr	r3, [pc, #28]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a1c:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <prvSwitchTimerLists+0xc8>)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	6013      	str	r3, [r2, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000dd4 	.word	0x20000dd4
 8004a30:	20000dd8 	.word	0x20000dd8

08004a34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a3a:	f000 f96d 	bl	8004d18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d120      	bne.n	8004a88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a46:	4814      	ldr	r0, [pc, #80]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a48:	f7fd fff2 	bl	8002a30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a4c:	4813      	ldr	r0, [pc, #76]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a4e:	f7fd ffef 	bl	8002a30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <prvCheckForValidListAndQueue+0x6c>)
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <prvCheckForValidListAndQueue+0x64>)
 8004a56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a58:	4b12      	ldr	r3, [pc, #72]	@ (8004aa4 <prvCheckForValidListAndQueue+0x70>)
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <prvCheckForValidListAndQueue+0x68>)
 8004a5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <prvCheckForValidListAndQueue+0x74>)
 8004a64:	4a11      	ldr	r2, [pc, #68]	@ (8004aac <prvCheckForValidListAndQueue+0x78>)
 8004a66:	2110      	movs	r1, #16
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f7fe f8ff 	bl	8002c6c <xQueueGenericCreateStatic>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a74:	4b07      	ldr	r3, [pc, #28]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <prvCheckForValidListAndQueue+0x60>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	490b      	ldr	r1, [pc, #44]	@ (8004ab0 <prvCheckForValidListAndQueue+0x7c>)
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fd24 	bl	80034d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a88:	f000 f978 	bl	8004d7c <vPortExitCritical>
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000ddc 	.word	0x20000ddc
 8004a98:	20000dac 	.word	0x20000dac
 8004a9c:	20000dc0 	.word	0x20000dc0
 8004aa0:	20000dd4 	.word	0x20000dd4
 8004aa4:	20000dd8 	.word	0x20000dd8
 8004aa8:	20000e88 	.word	0x20000e88
 8004aac:	20000de8 	.word	0x20000de8
 8004ab0:	08005540 	.word	0x08005540

08004ab4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3b04      	subs	r3, #4
 8004ac4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004acc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8004b18 <pxPortInitialiseStack+0x64>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3b14      	subs	r3, #20
 8004aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	3b04      	subs	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f06f 0202 	mvn.w	r2, #2
 8004b02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b20      	subs	r3, #32
 8004b08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	08004b1d 	.word	0x08004b1d

08004b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b26:	4b13      	ldr	r3, [pc, #76]	@ (8004b74 <prvTaskExitError+0x58>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b2e:	d00b      	beq.n	8004b48 <prvTaskExitError+0x2c>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	60fb      	str	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <prvTaskExitError+0x28>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60bb      	str	r3, [r7, #8]
}
 8004b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b5c:	bf00      	nop
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0fc      	beq.n	8004b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <pxCurrentTCBConst2>)
 8004b82:	6819      	ldr	r1, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8a:	f380 8809 	msr	PSP, r0
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8811 	msr	BASEPRI, r0
 8004b9a:	4770      	bx	lr
 8004b9c:	f3af 8000 	nop.w

08004ba0 <pxCurrentTCBConst2>:
 8004ba0:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ba8:	4808      	ldr	r0, [pc, #32]	@ (8004bcc <prvPortStartFirstTask+0x24>)
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6800      	ldr	r0, [r0, #0]
 8004bae:	f380 8808 	msr	MSP, r0
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f380 8814 	msr	CONTROL, r0
 8004bba:	b662      	cpsie	i
 8004bbc:	b661      	cpsie	f
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	df00      	svc	0
 8004bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bca:	bf00      	nop
 8004bcc:	e000ed08 	.word	0xe000ed08

08004bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bd6:	4b47      	ldr	r3, [pc, #284]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a47      	ldr	r2, [pc, #284]	@ (8004cf8 <xPortStartScheduler+0x128>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d10b      	bne.n	8004bf8 <xPortStartScheduler+0x28>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	613b      	str	r3, [r7, #16]
}
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
 8004bf6:	e7fd      	b.n	8004bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <xPortStartScheduler+0x124>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8004cfc <xPortStartScheduler+0x12c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d10b      	bne.n	8004c1a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c1a:	4b39      	ldr	r3, [pc, #228]	@ (8004d00 <xPortStartScheduler+0x130>)
 8004c1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	22ff      	movs	r2, #255	@ 0xff
 8004c2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <xPortStartScheduler+0x134>)
 8004c40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c42:	4b31      	ldr	r3, [pc, #196]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c44:	2207      	movs	r2, #7
 8004c46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c48:	e009      	b.n	8004c5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	4a2d      	ldr	r2, [pc, #180]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5e:	78fb      	ldrb	r3, [r7, #3]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c66:	2b80      	cmp	r3, #128	@ 0x80
 8004c68:	d0ef      	beq.n	8004c4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c6a:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d00b      	beq.n	8004c8e <xPortStartScheduler+0xbe>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	021b      	lsls	r3, r3, #8
 8004c94:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <xPortStartScheduler+0x138>)
 8004ca2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cac:	4b17      	ldr	r3, [pc, #92]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004cb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <xPortStartScheduler+0x13c>)
 8004cbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cc4:	f000 f8da 	bl	8004e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cc8:	4b11      	ldr	r3, [pc, #68]	@ (8004d10 <xPortStartScheduler+0x140>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cce:	f000 f8f9 	bl	8004ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <xPortStartScheduler+0x144>)
 8004cd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004cdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cde:	f7ff ff63 	bl	8004ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce2:	f7ff f82d 	bl	8003d40 <vTaskSwitchContext>
	prvTaskExitError();
 8004ce6:	f7ff ff19 	bl	8004b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000ed00 	.word	0xe000ed00
 8004cf8:	410fc271 	.word	0x410fc271
 8004cfc:	410fc270 	.word	0x410fc270
 8004d00:	e000e400 	.word	0xe000e400
 8004d04:	20000ed8 	.word	0x20000ed8
 8004d08:	20000edc 	.word	0x20000edc
 8004d0c:	e000ed20 	.word	0xe000ed20
 8004d10:	2000000c 	.word	0x2000000c
 8004d14:	e000ef34 	.word	0xe000ef34

08004d18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
}
 8004d30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d32:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d74 <vPortEnterCritical+0x5c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d110      	bne.n	8004d66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <vPortEnterCritical+0x60>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <vPortEnterCritical+0x4e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	603b      	str	r3, [r7, #0]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <vPortEnterCritical+0x4a>
	}
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000000c 	.word	0x2000000c
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d82:	4b12      	ldr	r3, [pc, #72]	@ (8004dcc <vPortExitCritical+0x50>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10b      	bne.n	8004da2 <vPortExitCritical+0x26>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	607b      	str	r3, [r7, #4]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004da2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dcc <vPortExitCritical+0x50>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	4a08      	ldr	r2, [pc, #32]	@ (8004dcc <vPortExitCritical+0x50>)
 8004daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004dac:	4b07      	ldr	r3, [pc, #28]	@ (8004dcc <vPortExitCritical+0x50>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d105      	bne.n	8004dc0 <vPortExitCritical+0x44>
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	2000000c 	.word	0x2000000c

08004dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dd0:	f3ef 8009 	mrs	r0, PSP
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	4b15      	ldr	r3, [pc, #84]	@ (8004e30 <pxCurrentTCBConst>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	f01e 0f10 	tst.w	lr, #16
 8004de0:	bf08      	it	eq
 8004de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	6010      	str	r0, [r2, #0]
 8004dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004df0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004df4:	f380 8811 	msr	BASEPRI, r0
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f7fe ff9e 	bl	8003d40 <vTaskSwitchContext>
 8004e04:	f04f 0000 	mov.w	r0, #0
 8004e08:	f380 8811 	msr	BASEPRI, r0
 8004e0c:	bc09      	pop	{r0, r3}
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e16:	f01e 0f10 	tst.w	lr, #16
 8004e1a:	bf08      	it	eq
 8004e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e20:	f380 8809 	msr	PSP, r0
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst>:
 8004e30:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f7fe febb 	bl	8003bcc <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e5c:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <xPortSysTickHandler+0x40>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	2300      	movs	r3, #0
 8004e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	f383 8811 	msr	BASEPRI, r3
}
 8004e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <vPortSetupTimerInterrupt+0x38>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <vPortSetupTimerInterrupt+0x3c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a0a      	ldr	r2, [pc, #40]	@ (8004ebc <vPortSetupTimerInterrupt+0x40>)
 8004e92:	fba2 2303 	umull	r2, r3, r2, r3
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <vPortSetupTimerInterrupt+0x44>)
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e9e:	4b04      	ldr	r3, [pc, #16]	@ (8004eb0 <vPortSetupTimerInterrupt+0x34>)
 8004ea0:	2207      	movs	r2, #7
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	e000e010 	.word	0xe000e010
 8004eb4:	e000e018 	.word	0xe000e018
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	10624dd3 	.word	0x10624dd3
 8004ec0:	e000e014 	.word	0xe000e014

08004ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004ed4 <vPortEnableVFP+0x10>
 8004ec8:	6801      	ldr	r1, [r0, #0]
 8004eca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004ece:	6001      	str	r1, [r0, #0]
 8004ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ed2:	bf00      	nop
 8004ed4:	e000ed88 	.word	0xe000ed88

08004ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d915      	bls.n	8004f16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <vPortValidateInterruptPriority+0x74>)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ef4:	4b16      	ldr	r3, [pc, #88]	@ (8004f50 <vPortValidateInterruptPriority+0x78>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7afa      	ldrb	r2, [r7, #11]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d20b      	bcs.n	8004f16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f16:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <vPortValidateInterruptPriority+0x7c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f58 <vPortValidateInterruptPriority+0x80>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90b      	bls.n	8004f3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	603b      	str	r3, [r7, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vPortValidateInterruptPriority+0x62>
	}
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	e000e3f0 	.word	0xe000e3f0
 8004f50:	20000ed8 	.word	0x20000ed8
 8004f54:	e000ed0c 	.word	0xe000ed0c
 8004f58:	20000edc 	.word	0x20000edc

08004f5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	@ 0x28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f68:	f7fe fd74 	bl	8003a54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f6c:	4b5c      	ldr	r3, [pc, #368]	@ (80050e0 <pvPortMalloc+0x184>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f74:	f000 f924 	bl	80051c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f78:	4b5a      	ldr	r3, [pc, #360]	@ (80050e4 <pvPortMalloc+0x188>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 8095 	bne.w	80050b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01e      	beq.n	8004fca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d015      	beq.n	8004fca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <pvPortMalloc+0x6e>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	617b      	str	r3, [r7, #20]
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	e7fd      	b.n	8004fc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d06f      	beq.n	80050b0 <pvPortMalloc+0x154>
 8004fd0:	4b45      	ldr	r3, [pc, #276]	@ (80050e8 <pvPortMalloc+0x18c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d86a      	bhi.n	80050b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fda:	4b44      	ldr	r3, [pc, #272]	@ (80050ec <pvPortMalloc+0x190>)
 8004fdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fde:	4b43      	ldr	r3, [pc, #268]	@ (80050ec <pvPortMalloc+0x190>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fe4:	e004      	b.n	8004ff0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d903      	bls.n	8005002 <pvPortMalloc+0xa6>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f1      	bne.n	8004fe6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005002:	4b37      	ldr	r3, [pc, #220]	@ (80050e0 <pvPortMalloc+0x184>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	d051      	beq.n	80050b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2208      	movs	r2, #8
 8005012:	4413      	add	r3, r2
 8005014:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad2      	subs	r2, r2, r3
 8005026:	2308      	movs	r3, #8
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	429a      	cmp	r2, r3
 800502c:	d920      	bls.n	8005070 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800502e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4413      	add	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <pvPortMalloc+0xfc>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	1ad2      	subs	r2, r2, r3
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800506a:	69b8      	ldr	r0, [r7, #24]
 800506c:	f000 f90a 	bl	8005284 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <pvPortMalloc+0x18c>)
 800507c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800507e:	4b1a      	ldr	r3, [pc, #104]	@ (80050e8 <pvPortMalloc+0x18c>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <pvPortMalloc+0x194>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	429a      	cmp	r2, r3
 8005088:	d203      	bcs.n	8005092 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800508a:	4b17      	ldr	r3, [pc, #92]	@ (80050e8 <pvPortMalloc+0x18c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <pvPortMalloc+0x194>)
 8005090:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	4b13      	ldr	r3, [pc, #76]	@ (80050e4 <pvPortMalloc+0x188>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	431a      	orrs	r2, r3
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050a6:	4b13      	ldr	r3, [pc, #76]	@ (80050f4 <pvPortMalloc+0x198>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3301      	adds	r3, #1
 80050ac:	4a11      	ldr	r2, [pc, #68]	@ (80050f4 <pvPortMalloc+0x198>)
 80050ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050b0:	f7fe fcde 	bl	8003a70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <pvPortMalloc+0x17a>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	60fb      	str	r3, [r7, #12]
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	e7fd      	b.n	80050d2 <pvPortMalloc+0x176>
	return pvReturn;
 80050d6:	69fb      	ldr	r3, [r7, #28]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20004ae8 	.word	0x20004ae8
 80050e4:	20004afc 	.word	0x20004afc
 80050e8:	20004aec 	.word	0x20004aec
 80050ec:	20004ae0 	.word	0x20004ae0
 80050f0:	20004af0 	.word	0x20004af0
 80050f4:	20004af4 	.word	0x20004af4

080050f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d04f      	beq.n	80051aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800510a:	2308      	movs	r3, #8
 800510c:	425b      	negs	r3, r3
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4413      	add	r3, r2
 8005112:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b25      	ldr	r3, [pc, #148]	@ (80051b4 <vPortFree+0xbc>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <vPortFree+0x46>
	__asm volatile
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	60fb      	str	r3, [r7, #12]
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	e7fd      	b.n	800513a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <vPortFree+0x66>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	60bb      	str	r3, [r7, #8]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b14      	ldr	r3, [pc, #80]	@ (80051b4 <vPortFree+0xbc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01e      	beq.n	80051aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d11a      	bne.n	80051aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	4b0e      	ldr	r3, [pc, #56]	@ (80051b4 <vPortFree+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	43db      	mvns	r3, r3
 800517e:	401a      	ands	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005184:	f7fe fc66 	bl	8003a54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <vPortFree+0xc0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4413      	add	r3, r2
 8005192:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <vPortFree+0xc0>)
 8005194:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005196:	6938      	ldr	r0, [r7, #16]
 8005198:	f000 f874 	bl	8005284 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800519c:	4b07      	ldr	r3, [pc, #28]	@ (80051bc <vPortFree+0xc4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	4a06      	ldr	r2, [pc, #24]	@ (80051bc <vPortFree+0xc4>)
 80051a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051a6:	f7fe fc63 	bl	8003a70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051aa:	bf00      	nop
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20004afc 	.word	0x20004afc
 80051b8:	20004aec 	.word	0x20004aec
 80051bc:	20004af8 	.word	0x20004af8

080051c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80051ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051cc:	4b27      	ldr	r3, [pc, #156]	@ (800526c <prvHeapInit+0xac>)
 80051ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3307      	adds	r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0307 	bic.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	4a1f      	ldr	r2, [pc, #124]	@ (800526c <prvHeapInit+0xac>)
 80051f0:	4413      	add	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <prvHeapInit+0xb0>)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005270 <prvHeapInit+0xb0>)
 8005200:	2200      	movs	r2, #0
 8005202:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	4413      	add	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800520c:	2208      	movs	r2, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <prvHeapInit+0xb4>)
 8005220:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <prvHeapInit+0xb4>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800522a:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <prvHeapInit+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	1ad2      	subs	r2, r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005240:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <prvHeapInit+0xb4>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	4a0a      	ldr	r2, [pc, #40]	@ (8005278 <prvHeapInit+0xb8>)
 800524e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <prvHeapInit+0xbc>)
 8005256:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <prvHeapInit+0xc0>)
 800525a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000ee0 	.word	0x20000ee0
 8005270:	20004ae0 	.word	0x20004ae0
 8005274:	20004ae8 	.word	0x20004ae8
 8005278:	20004af0 	.word	0x20004af0
 800527c:	20004aec 	.word	0x20004aec
 8005280:	20004afc 	.word	0x20004afc

08005284 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <prvInsertBlockIntoFreeList+0xac>)
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e002      	b.n	8005298 <prvInsertBlockIntoFreeList+0x14>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d8f7      	bhi.n	8005292 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4413      	add	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d108      	bne.n	80052c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	441a      	add	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	441a      	add	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d118      	bne.n	800530c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d00d      	beq.n	8005302 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	441a      	add	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	e008      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005302:	4b0c      	ldr	r3, [pc, #48]	@ (8005334 <prvInsertBlockIntoFreeList+0xb0>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e003      	b.n	8005314 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	429a      	cmp	r2, r3
 800531a:	d002      	beq.n	8005322 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005322:	bf00      	nop
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20004ae0 	.word	0x20004ae0
 8005334:	20004ae8 	.word	0x20004ae8

08005338 <memset>:
 8005338:	4402      	add	r2, r0
 800533a:	4603      	mov	r3, r0
 800533c:	4293      	cmp	r3, r2
 800533e:	d100      	bne.n	8005342 <memset+0xa>
 8005340:	4770      	bx	lr
 8005342:	f803 1b01 	strb.w	r1, [r3], #1
 8005346:	e7f9      	b.n	800533c <memset+0x4>

08005348 <_reclaim_reent>:
 8005348:	4b29      	ldr	r3, [pc, #164]	@ (80053f0 <_reclaim_reent+0xa8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4283      	cmp	r3, r0
 800534e:	b570      	push	{r4, r5, r6, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	d04b      	beq.n	80053ec <_reclaim_reent+0xa4>
 8005354:	69c3      	ldr	r3, [r0, #28]
 8005356:	b1ab      	cbz	r3, 8005384 <_reclaim_reent+0x3c>
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	b16b      	cbz	r3, 8005378 <_reclaim_reent+0x30>
 800535c:	2500      	movs	r5, #0
 800535e:	69e3      	ldr	r3, [r4, #28]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	5959      	ldr	r1, [r3, r5]
 8005364:	2900      	cmp	r1, #0
 8005366:	d13b      	bne.n	80053e0 <_reclaim_reent+0x98>
 8005368:	3504      	adds	r5, #4
 800536a:	2d80      	cmp	r5, #128	@ 0x80
 800536c:	d1f7      	bne.n	800535e <_reclaim_reent+0x16>
 800536e:	69e3      	ldr	r3, [r4, #28]
 8005370:	4620      	mov	r0, r4
 8005372:	68d9      	ldr	r1, [r3, #12]
 8005374:	f000 f872 	bl	800545c <_free_r>
 8005378:	69e3      	ldr	r3, [r4, #28]
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	b111      	cbz	r1, 8005384 <_reclaim_reent+0x3c>
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f86c 	bl	800545c <_free_r>
 8005384:	6961      	ldr	r1, [r4, #20]
 8005386:	b111      	cbz	r1, 800538e <_reclaim_reent+0x46>
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f867 	bl	800545c <_free_r>
 800538e:	69e1      	ldr	r1, [r4, #28]
 8005390:	b111      	cbz	r1, 8005398 <_reclaim_reent+0x50>
 8005392:	4620      	mov	r0, r4
 8005394:	f000 f862 	bl	800545c <_free_r>
 8005398:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800539a:	b111      	cbz	r1, 80053a2 <_reclaim_reent+0x5a>
 800539c:	4620      	mov	r0, r4
 800539e:	f000 f85d 	bl	800545c <_free_r>
 80053a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053a4:	b111      	cbz	r1, 80053ac <_reclaim_reent+0x64>
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 f858 	bl	800545c <_free_r>
 80053ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053ae:	b111      	cbz	r1, 80053b6 <_reclaim_reent+0x6e>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f853 	bl	800545c <_free_r>
 80053b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053b8:	b111      	cbz	r1, 80053c0 <_reclaim_reent+0x78>
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 f84e 	bl	800545c <_free_r>
 80053c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053c2:	b111      	cbz	r1, 80053ca <_reclaim_reent+0x82>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f000 f849 	bl	800545c <_free_r>
 80053ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053cc:	b111      	cbz	r1, 80053d4 <_reclaim_reent+0x8c>
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f844 	bl	800545c <_free_r>
 80053d4:	6a23      	ldr	r3, [r4, #32]
 80053d6:	b14b      	cbz	r3, 80053ec <_reclaim_reent+0xa4>
 80053d8:	4620      	mov	r0, r4
 80053da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053de:	4718      	bx	r3
 80053e0:	680e      	ldr	r6, [r1, #0]
 80053e2:	4620      	mov	r0, r4
 80053e4:	f000 f83a 	bl	800545c <_free_r>
 80053e8:	4631      	mov	r1, r6
 80053ea:	e7bb      	b.n	8005364 <_reclaim_reent+0x1c>
 80053ec:	bd70      	pop	{r4, r5, r6, pc}
 80053ee:	bf00      	nop
 80053f0:	20000010 	.word	0x20000010

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4d0d      	ldr	r5, [pc, #52]	@ (800542c <__libc_init_array+0x38>)
 80053f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005430 <__libc_init_array+0x3c>)
 80053fa:	1b64      	subs	r4, r4, r5
 80053fc:	10a4      	asrs	r4, r4, #2
 80053fe:	2600      	movs	r6, #0
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	4d0b      	ldr	r5, [pc, #44]	@ (8005434 <__libc_init_array+0x40>)
 8005406:	4c0c      	ldr	r4, [pc, #48]	@ (8005438 <__libc_init_array+0x44>)
 8005408:	f000 f87e 	bl	8005508 <_init>
 800540c:	1b64      	subs	r4, r4, r5
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	2600      	movs	r6, #0
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f855 3b04 	ldr.w	r3, [r5], #4
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f855 3b04 	ldr.w	r3, [r5], #4
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	080055b0 	.word	0x080055b0
 8005430:	080055b0 	.word	0x080055b0
 8005434:	080055b0 	.word	0x080055b0
 8005438:	080055b4 	.word	0x080055b4

0800543c <__retarget_lock_acquire_recursive>:
 800543c:	4770      	bx	lr

0800543e <__retarget_lock_release_recursive>:
 800543e:	4770      	bx	lr

08005440 <memcpy>:
 8005440:	440a      	add	r2, r1
 8005442:	4291      	cmp	r1, r2
 8005444:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005448:	d100      	bne.n	800544c <memcpy+0xc>
 800544a:	4770      	bx	lr
 800544c:	b510      	push	{r4, lr}
 800544e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005456:	4291      	cmp	r1, r2
 8005458:	d1f9      	bne.n	800544e <memcpy+0xe>
 800545a:	bd10      	pop	{r4, pc}

0800545c <_free_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4605      	mov	r5, r0
 8005460:	2900      	cmp	r1, #0
 8005462:	d041      	beq.n	80054e8 <_free_r+0x8c>
 8005464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005468:	1f0c      	subs	r4, r1, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	18e4      	addlt	r4, r4, r3
 8005470:	f000 f83e 	bl	80054f0 <__malloc_lock>
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <_free_r+0x90>)
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	b933      	cbnz	r3, 8005488 <_free_r+0x2c>
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	6014      	str	r4, [r2, #0]
 800547e:	4628      	mov	r0, r5
 8005480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005484:	f000 b83a 	b.w	80054fc <__malloc_unlock>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d908      	bls.n	800549e <_free_r+0x42>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	1821      	adds	r1, r4, r0
 8005490:	428b      	cmp	r3, r1
 8005492:	bf01      	itttt	eq
 8005494:	6819      	ldreq	r1, [r3, #0]
 8005496:	685b      	ldreq	r3, [r3, #4]
 8005498:	1809      	addeq	r1, r1, r0
 800549a:	6021      	streq	r1, [r4, #0]
 800549c:	e7ed      	b.n	800547a <_free_r+0x1e>
 800549e:	461a      	mov	r2, r3
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	b10b      	cbz	r3, 80054a8 <_free_r+0x4c>
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	d9fa      	bls.n	800549e <_free_r+0x42>
 80054a8:	6811      	ldr	r1, [r2, #0]
 80054aa:	1850      	adds	r0, r2, r1
 80054ac:	42a0      	cmp	r0, r4
 80054ae:	d10b      	bne.n	80054c8 <_free_r+0x6c>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	4401      	add	r1, r0
 80054b4:	1850      	adds	r0, r2, r1
 80054b6:	4283      	cmp	r3, r0
 80054b8:	6011      	str	r1, [r2, #0]
 80054ba:	d1e0      	bne.n	800547e <_free_r+0x22>
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	6053      	str	r3, [r2, #4]
 80054c2:	4408      	add	r0, r1
 80054c4:	6010      	str	r0, [r2, #0]
 80054c6:	e7da      	b.n	800547e <_free_r+0x22>
 80054c8:	d902      	bls.n	80054d0 <_free_r+0x74>
 80054ca:	230c      	movs	r3, #12
 80054cc:	602b      	str	r3, [r5, #0]
 80054ce:	e7d6      	b.n	800547e <_free_r+0x22>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	1821      	adds	r1, r4, r0
 80054d4:	428b      	cmp	r3, r1
 80054d6:	bf04      	itt	eq
 80054d8:	6819      	ldreq	r1, [r3, #0]
 80054da:	685b      	ldreq	r3, [r3, #4]
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	bf04      	itt	eq
 80054e0:	1809      	addeq	r1, r1, r0
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	6054      	str	r4, [r2, #4]
 80054e6:	e7ca      	b.n	800547e <_free_r+0x22>
 80054e8:	bd38      	pop	{r3, r4, r5, pc}
 80054ea:	bf00      	nop
 80054ec:	20004c3c 	.word	0x20004c3c

080054f0 <__malloc_lock>:
 80054f0:	4801      	ldr	r0, [pc, #4]	@ (80054f8 <__malloc_lock+0x8>)
 80054f2:	f7ff bfa3 	b.w	800543c <__retarget_lock_acquire_recursive>
 80054f6:	bf00      	nop
 80054f8:	20004c38 	.word	0x20004c38

080054fc <__malloc_unlock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	@ (8005504 <__malloc_unlock+0x8>)
 80054fe:	f7ff bf9e 	b.w	800543e <__retarget_lock_release_recursive>
 8005502:	bf00      	nop
 8005504:	20004c38 	.word	0x20004c38

08005508 <_init>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	bf00      	nop
 800550c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550e:	bc08      	pop	{r3}
 8005510:	469e      	mov	lr, r3
 8005512:	4770      	bx	lr

08005514 <_fini>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr
