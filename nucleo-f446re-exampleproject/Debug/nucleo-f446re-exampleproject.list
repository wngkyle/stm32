
nucleo-f446re-exampleproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  0800607c  0800607c  0000707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006084  08006084  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800608c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b58  2000006c  080060f8  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bc4  080060f8  00008bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017649  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034aa  00000000  00000000  0001f6e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00022b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001045  00000000  00000000  00024088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000049bc  00000000  00000000  000250cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001718d  00000000  00000000  00029a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd0c5  00000000  00000000  00040c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dcdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ea0  00000000  00000000  0011dd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00123bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005fcc 	.word	0x08005fcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005fcc 	.word	0x08005fcc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fb8a 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f826 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f8bc 	bl	8000688 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f890 	bl	8000634 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000514:	f002 fa18 	bl	8002948 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000518:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <main+0x40>)
 800051a:	2100      	movs	r1, #0
 800051c:	4809      	ldr	r0, [pc, #36]	@ (8000544 <main+0x44>)
 800051e:	f002 fa5d 	bl	80029dc <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a08      	ldr	r2, [pc, #32]	@ (8000548 <main+0x48>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000528:	4a08      	ldr	r2, [pc, #32]	@ (800054c <main+0x4c>)
 800052a:	2100      	movs	r1, #0
 800052c:	4808      	ldr	r0, [pc, #32]	@ (8000550 <main+0x50>)
 800052e:	f002 fa55 	bl	80029dc <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <main+0x54>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f002 fa2a 	bl	8002990 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <main+0x3c>
 8000540:	0800601c 	.word	0x0800601c
 8000544:	08000765 	.word	0x08000765
 8000548:	200000d0 	.word	0x200000d0
 800054c:	08006040 	.word	0x08006040
 8000550:	08000785 	.word	0x08000785
 8000554:	200000d4 	.word	0x200000d4

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2234      	movs	r2, #52	@ 0x34
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f996 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b2a      	ldr	r3, [pc, #168]	@ (800062c <SystemClock_Config+0xd4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a29      	ldr	r2, [pc, #164]	@ (800062c <SystemClock_Config+0xd4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b27      	ldr	r3, [pc, #156]	@ (800062c <SystemClock_Config+0xd4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000598:	2300      	movs	r3, #0
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b24      	ldr	r3, [pc, #144]	@ (8000630 <SystemClock_Config+0xd8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <SystemClock_Config+0xd8>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <SystemClock_Config+0xd8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005cc:	2310      	movs	r3, #16
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f966 	bl	80018b8 <HAL_RCC_OscConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005f2:	f000 f8ef 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f6:	230f      	movs	r3, #15
 80005f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fa:	2302      	movs	r3, #2
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fdd4 	bl	80011c0 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800061e:	f000 f8d9 	bl	80007d4 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	@ 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000638:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <MX_USART2_UART_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_USART2_UART_Init+0x4c>)
 800066c:	f001 fe64 	bl	8002338 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f8ad 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000088 	.word	0x20000088
 8000684:	40004400 	.word	0x40004400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a1e      	ldr	r2, [pc, #120]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	@ (8000758 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	4812      	ldr	r0, [pc, #72]	@ (800075c <MX_GPIO_Init+0xd4>)
 8000714:	f000 fd3a 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <MX_GPIO_Init+0xd8>)
 8000730:	f000 fb98 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000734:	2320      	movs	r3, #32
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_GPIO_Init+0xd4>)
 800074c:	f000 fb8a 	bl	8000e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	@ 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40023800 	.word	0x40023800
 800075c:	40020000 	.word	0x40020000
 8000760:	40020800 	.word	0x40020800

08000764 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-1 \n");
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <StartTask1+0x1c>)
 800076e:	f005 f88b 	bl	8005888 <puts>
	  osDelay(1000);
 8000772:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000776:	f002 f9f0 	bl	8002b5a <osDelay>
	  printf("Task-1 \n");
 800077a:	bf00      	nop
 800077c:	e7f6      	b.n	800076c <StartTask1+0x8>
 800077e:	bf00      	nop
 8000780:	08005ff4 	.word	0x08005ff4

08000784 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-2 \n");
 800078c:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <StartTask2+0x24>)
 800078e:	f005 f87b 	bl	8005888 <puts>
	  osDelay(1000);
 8000792:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000796:	f002 f9e0 	bl	8002b5a <osDelay>
	  osThreadTerminate(Task1Handle);
 800079a:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <StartTask2+0x28>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f9ae 	bl	8002b00 <osThreadTerminate>
	  printf("Task-2 \n");
 80007a4:	bf00      	nop
 80007a6:	e7f1      	b.n	800078c <StartTask2+0x8>
 80007a8:	08005ffc 	.word	0x08005ffc
 80007ac:	200000d0 	.word	0x200000d0

080007b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a04      	ldr	r2, [pc, #16]	@ (80007d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d101      	bne.n	80007c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c2:	f000 fa4d 	bl	8000c60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40001000 	.word	0x40001000

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <Error_Handler+0x8>

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	4a11      	ldr	r2, [pc, #68]	@ (8000834 <HAL_MspInit+0x54>)
 80007f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <HAL_MspInit+0x54>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <HAL_MspInit+0x54>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000810:	6413      	str	r3, [r2, #64]	@ 0x40
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <HAL_MspInit+0x54>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	210f      	movs	r1, #15
 8000822:	f06f 0001 	mvn.w	r0, #1
 8000826:	f000 faf3 	bl	8000e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	@ 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a19      	ldr	r2, [pc, #100]	@ (80008bc <HAL_UART_MspInit+0x84>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d12b      	bne.n	80008b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 8000864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a10      	ldr	r2, [pc, #64]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <HAL_UART_MspInit+0x88>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000892:	230c      	movs	r3, #12
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a2:	2307      	movs	r3, #7
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <HAL_UART_MspInit+0x8c>)
 80008ae:	f000 fad9 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	@ 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b33      	ldr	r3, [pc, #204]	@ (80009ac <HAL_InitTick+0xe4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	4a32      	ldr	r2, [pc, #200]	@ (80009ac <HAL_InitTick+0xe4>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e8:	4b30      	ldr	r3, [pc, #192]	@ (80009ac <HAL_InitTick+0xe4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008f4:	f107 0210 	add.w	r2, r7, #16
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fd78 	bl	80013f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800090e:	f000 fd49 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8000912:	6378      	str	r0, [r7, #52]	@ 0x34
 8000914:	e004      	b.n	8000920 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000916:	f000 fd45 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 800091a:	4603      	mov	r3, r0
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000922:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_InitTick+0xe8>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9b      	lsrs	r3, r3, #18
 800092a:	3b01      	subs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_InitTick+0xec>)
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <HAL_InitTick+0xf0>)
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <HAL_InitTick+0xec>)
 8000936:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800093c:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <HAL_InitTick+0xec>)
 800093e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000940:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_InitTick+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_InitTick+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_InitTick+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <HAL_InitTick+0xec>)
 8000956:	f001 fa4d 	bl	8001df4 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000960:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <HAL_InitTick+0xec>)
 800096a:	f001 fa9d 	bl	8001ea8 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000974:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000978:	2b00      	cmp	r3, #0
 800097a:	d111      	bne.n	80009a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800097c:	2036      	movs	r0, #54	@ 0x36
 800097e:	f000 fa63 	bl	8000e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d808      	bhi.n	800099a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2036      	movs	r0, #54	@ 0x36
 800098e:	f000 fa3f 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0xf4>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e002      	b.n	80009a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3738      	adds	r7, #56	@ 0x38
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	200000d8 	.word	0x200000d8
 80009b8:	40001000 	.word	0x40001000
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <TIM6_DAC_IRQHandler+0x10>)
 80009fe:	f001 fac3 	bl	8001f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000d8 	.word	0x200000d8

08000a0c <ITM_SendChar>:
// ITM Register Address
#define ITM_STIMULUS_PORT0  *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN		*((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
	// ENable TRCENA
	DEMCR |= (1<<24);
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <ITM_SendChar+0x48>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <ITM_SendChar+0x48>)
 8000a1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a20:	6013      	str	r3, [r2, #0]

	// Enable Stimulus Port 0
	ITM_TRACE_EN |= (1<<0);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <ITM_SendChar+0x4c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <ITM_SendChar+0x4c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6013      	str	r3, [r2, #0]

	// Read FIFO Status in bit[0]
	while (!(ITM_STIMULUS_PORT0 & 1));
 8000a2e:	bf00      	nop
 8000a30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f8      	beq.n	8000a30 <ITM_SendChar+0x24>

	// Write to ITM Stimulus Port 0
	ITM_STIMULUS_PORT0 = ch;
 8000a3e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000edfc 	.word	0xe000edfc
 8000a58:	e0000e00 	.word	0xe0000e00

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffab 	bl	8000a0c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f004 fe9e 	bl	80058a8 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20020000 	.word	0x20020000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	20004bc8 	.word	0x20004bc8

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 fe5d 	bl	80058b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fc81 	bl	8000500 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c0c:	0800608c 	.word	0x0800608c
  ldr r2, =_sbss
 8000c10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c14:	20004bc4 	.word	0x20004bc4

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f8d8 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f7ff fe3c 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fdc6 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <HAL_IncTick+0x24>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000124 	.word	0x20000124

08000c88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <HAL_GetTick+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000124 	.word	0x20000124

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	@ (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	@ (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	@ (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	@ 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	@ 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e165      	b.n	800114c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8154 	bne.w	8001146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80ae 	beq.w	8001146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	4a5c      	ldr	r2, [pc, #368]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	@ (8001164 <HAL_GPIO_Init+0x300>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a58      	ldr	r2, [pc, #352]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4f      	ldr	r2, [pc, #316]	@ (800116c <HAL_GPIO_Init+0x308>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d025      	beq.n	800107e <HAL_GPIO_Init+0x21a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4e      	ldr	r2, [pc, #312]	@ (8001170 <HAL_GPIO_Init+0x30c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d01f      	beq.n	800107a <HAL_GPIO_Init+0x216>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4d      	ldr	r2, [pc, #308]	@ (8001174 <HAL_GPIO_Init+0x310>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d019      	beq.n	8001076 <HAL_GPIO_Init+0x212>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4c      	ldr	r2, [pc, #304]	@ (8001178 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0x20e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4b      	ldr	r2, [pc, #300]	@ (800117c <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d00d      	beq.n	800106e <HAL_GPIO_Init+0x20a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4a      	ldr	r2, [pc, #296]	@ (8001180 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x206>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a49      	ldr	r2, [pc, #292]	@ (8001184 <HAL_GPIO_Init+0x320>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_GPIO_Init+0x202>
 8001062:	2306      	movs	r3, #6
 8001064:	e00c      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001066:	2307      	movs	r3, #7
 8001068:	e00a      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106a:	2305      	movs	r3, #5
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800106e:	2304      	movs	r3, #4
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x21c>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	@ (8001168 <HAL_GPIO_Init+0x304>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a26      	ldr	r2, [pc, #152]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_GPIO_Init+0x324>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <HAL_GPIO_Init+0x324>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_GPIO_Init+0x324>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f ae96 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	@ 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40021400 	.word	0x40021400
 8001184:	40021800 	.word	0x40021800
 8001188:	40013c00 	.word	0x40013c00

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011a8:	e003      	b.n	80011b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	041a      	lsls	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	619a      	str	r2, [r3, #24]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e0cc      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d4:	4b68      	ldr	r3, [pc, #416]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d90c      	bls.n	80011fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011e2:	4b65      	ldr	r3, [pc, #404]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	4a58      	ldr	r2, [pc, #352]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800121e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a52      	ldr	r2, [pc, #328]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001236:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	4313      	orrs	r3, r2
 8001248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d044      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127a:	2b03      	cmp	r3, #3
 800127c:	d107      	bne.n	800128e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127e:	4b3f      	ldr	r3, [pc, #252]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d109      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e06f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	4b3b      	ldr	r3, [pc, #236]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e067      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f023 0203 	bic.w	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4934      	ldr	r1, [pc, #208]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b0:	f7ff fcea 	bl	8000c88 <HAL_GetTick>
 80012b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b6:	e00a      	b.n	80012ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b8:	f7ff fce6 	bl	8000c88 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e04f      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 020c 	and.w	r2, r3, #12
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	429a      	cmp	r2, r3
 80012de:	d1eb      	bne.n	80012b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e0:	4b25      	ldr	r3, [pc, #148]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d20c      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ee:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	4313      	orrs	r3, r2
 8001324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	4313      	orrs	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f887 	bl	8001458 <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	@ (8001380 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1c8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff faae 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00
 800137c:	40023800 	.word	0x40023800
 8001380:	08006064 	.word	0x08006064
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013a8:	f7ff fff0 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	0a9b      	lsrs	r3, r3, #10
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	4903      	ldr	r1, [pc, #12]	@ (80013c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08006074 	.word	0x08006074

080013cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013d0:	f7ff ffdc 	bl	800138c <HAL_RCC_GetHCLKFreq>
 80013d4:	4602      	mov	r2, r0
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	0b5b      	lsrs	r3, r3, #13
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	4903      	ldr	r1, [pc, #12]	@ (80013f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013e2:	5ccb      	ldrb	r3, [r1, r3]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40023800 	.word	0x40023800
 80013f0:	08006074 	.word	0x08006074

080013f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	220f      	movs	r2, #15
 8001402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0203 	and.w	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	08db      	lsrs	r3, r3, #3
 800142e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001436:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <HAL_RCC_GetClockConfig+0x60>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 020f 	and.w	r2, r3, #15
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b0ae      	sub	sp, #184	@ 0xb8
 800145e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147e:	4bcb      	ldr	r3, [pc, #812]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b0c      	cmp	r3, #12
 8001488:	f200 8206 	bhi.w	8001898 <HAL_RCC_GetSysClockFreq+0x440>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <HAL_RCC_GetSysClockFreq+0x3c>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014c9 	.word	0x080014c9
 8001498:	08001899 	.word	0x08001899
 800149c:	08001899 	.word	0x08001899
 80014a0:	08001899 	.word	0x08001899
 80014a4:	080014d1 	.word	0x080014d1
 80014a8:	08001899 	.word	0x08001899
 80014ac:	08001899 	.word	0x08001899
 80014b0:	08001899 	.word	0x08001899
 80014b4:	080014d9 	.word	0x080014d9
 80014b8:	08001899 	.word	0x08001899
 80014bc:	08001899 	.word	0x08001899
 80014c0:	08001899 	.word	0x08001899
 80014c4:	080016c9 	.word	0x080016c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4bb9      	ldr	r3, [pc, #740]	@ (80017b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014ce:	e1e7      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d0:	4bb8      	ldr	r3, [pc, #736]	@ (80017b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014d6:	e1e3      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014d8:	4bb4      	ldr	r3, [pc, #720]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e4:	4bb1      	ldr	r3, [pc, #708]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d071      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	4bae      	ldr	r3, [pc, #696]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	2200      	movs	r2, #0
 80014f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001508:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001512:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001516:	4622      	mov	r2, r4
 8001518:	462b      	mov	r3, r5
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0100 	mov.w	r1, #0
 8001522:	0159      	lsls	r1, r3, #5
 8001524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001528:	0150      	lsls	r0, r2, #5
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4621      	mov	r1, r4
 8001530:	1a51      	subs	r1, r2, r1
 8001532:	6439      	str	r1, [r7, #64]	@ 0x40
 8001534:	4629      	mov	r1, r5
 8001536:	eb63 0301 	sbc.w	r3, r3, r1
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001548:	4649      	mov	r1, r9
 800154a:	018b      	lsls	r3, r1, #6
 800154c:	4641      	mov	r1, r8
 800154e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001552:	4641      	mov	r1, r8
 8001554:	018a      	lsls	r2, r1, #6
 8001556:	4641      	mov	r1, r8
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800155c:	4649      	mov	r1, r9
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001570:	4649      	mov	r1, r9
 8001572:	00cb      	lsls	r3, r1, #3
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800157a:	4641      	mov	r1, r8
 800157c:	00ca      	lsls	r2, r1, #3
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	4603      	mov	r3, r0
 8001584:	4622      	mov	r2, r4
 8001586:	189b      	adds	r3, r3, r2
 8001588:	633b      	str	r3, [r7, #48]	@ 0x30
 800158a:	462b      	mov	r3, r5
 800158c:	460a      	mov	r2, r1
 800158e:	eb42 0303 	adc.w	r3, r2, r3
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015a0:	4629      	mov	r1, r5
 80015a2:	024b      	lsls	r3, r1, #9
 80015a4:	4621      	mov	r1, r4
 80015a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015aa:	4621      	mov	r1, r4
 80015ac:	024a      	lsls	r2, r1, #9
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015c4:	f7fe fe24 	bl	8000210 <__aeabi_uldivmod>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4613      	mov	r3, r2
 80015ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015d2:	e067      	b.n	80016a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	4b75      	ldr	r3, [pc, #468]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015ee:	2300      	movs	r3, #0
 80015f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015f6:	4622      	mov	r2, r4
 80015f8:	462b      	mov	r3, r5
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	0159      	lsls	r1, r3, #5
 8001604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001608:	0150      	lsls	r0, r2, #5
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4621      	mov	r1, r4
 8001610:	1a51      	subs	r1, r2, r1
 8001612:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001614:	4629      	mov	r1, r5
 8001616:	eb63 0301 	sbc.w	r3, r3, r1
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001628:	4649      	mov	r1, r9
 800162a:	018b      	lsls	r3, r1, #6
 800162c:	4641      	mov	r1, r8
 800162e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001632:	4641      	mov	r1, r8
 8001634:	018a      	lsls	r2, r1, #6
 8001636:	4641      	mov	r1, r8
 8001638:	ebb2 0a01 	subs.w	sl, r2, r1
 800163c:	4649      	mov	r1, r9
 800163e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800164e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001652:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001656:	4692      	mov	sl, r2
 8001658:	469b      	mov	fp, r3
 800165a:	4623      	mov	r3, r4
 800165c:	eb1a 0303 	adds.w	r3, sl, r3
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	462b      	mov	r3, r5
 8001664:	eb4b 0303 	adc.w	r3, fp, r3
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001676:	4629      	mov	r1, r5
 8001678:	028b      	lsls	r3, r1, #10
 800167a:	4621      	mov	r1, r4
 800167c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001680:	4621      	mov	r1, r4
 8001682:	028a      	lsls	r2, r1, #10
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800168c:	2200      	movs	r2, #0
 800168e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001690:	677a      	str	r2, [r7, #116]	@ 0x74
 8001692:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001696:	f7fe fdbb 	bl	8000210 <__aeabi_uldivmod>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4613      	mov	r3, r2
 80016a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016a4:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	0c1b      	lsrs	r3, r3, #16
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	3301      	adds	r3, #1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016c6:	e0eb      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c8:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016d4:	4b35      	ldr	r3, [pc, #212]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d06b      	beq.n	80017b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <HAL_RCC_GetSysClockFreq+0x354>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	2200      	movs	r2, #0
 80016e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016f4:	2300      	movs	r3, #0
 80016f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80016f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016fc:	4622      	mov	r2, r4
 80016fe:	462b      	mov	r3, r5
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	0159      	lsls	r1, r3, #5
 800170a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170e:	0150      	lsls	r0, r2, #5
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4621      	mov	r1, r4
 8001716:	1a51      	subs	r1, r2, r1
 8001718:	61b9      	str	r1, [r7, #24]
 800171a:	4629      	mov	r1, r5
 800171c:	eb63 0301 	sbc.w	r3, r3, r1
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800172e:	4659      	mov	r1, fp
 8001730:	018b      	lsls	r3, r1, #6
 8001732:	4651      	mov	r1, sl
 8001734:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001738:	4651      	mov	r1, sl
 800173a:	018a      	lsls	r2, r1, #6
 800173c:	4651      	mov	r1, sl
 800173e:	ebb2 0801 	subs.w	r8, r2, r1
 8001742:	4659      	mov	r1, fp
 8001744:	eb63 0901 	sbc.w	r9, r3, r1
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001754:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001758:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800175c:	4690      	mov	r8, r2
 800175e:	4699      	mov	r9, r3
 8001760:	4623      	mov	r3, r4
 8001762:	eb18 0303 	adds.w	r3, r8, r3
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	462b      	mov	r3, r5
 800176a:	eb49 0303 	adc.w	r3, r9, r3
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	024b      	lsls	r3, r1, #9
 8001780:	4621      	mov	r1, r4
 8001782:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001786:	4621      	mov	r1, r4
 8001788:	024a      	lsls	r2, r1, #9
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001792:	2200      	movs	r2, #0
 8001794:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001796:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800179c:	f7fe fd38 	bl	8000210 <__aeabi_uldivmod>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4613      	mov	r3, r2
 80017a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017aa:	e065      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x420>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	00f42400 	.word	0x00f42400
 80017b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b8:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	099b      	lsrs	r3, r3, #6
 80017be:	2200      	movs	r2, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	4611      	mov	r1, r2
 80017c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017ca:	2300      	movs	r3, #0
 80017cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80017d2:	4642      	mov	r2, r8
 80017d4:	464b      	mov	r3, r9
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4641      	mov	r1, r8
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	4649      	mov	r1, r9
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	1a54      	subs	r4, r2, r1
 8001816:	4659      	mov	r1, fp
 8001818:	eb63 0501 	sbc.w	r5, r3, r1
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	00eb      	lsls	r3, r5, #3
 8001826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800182a:	00e2      	lsls	r2, r4, #3
 800182c:	4614      	mov	r4, r2
 800182e:	461d      	mov	r5, r3
 8001830:	4643      	mov	r3, r8
 8001832:	18e3      	adds	r3, r4, r3
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	464b      	mov	r3, r9
 8001838:	eb45 0303 	adc.w	r3, r5, r3
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184a:	4629      	mov	r1, r5
 800184c:	028b      	lsls	r3, r1, #10
 800184e:	4621      	mov	r1, r4
 8001850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001854:	4621      	mov	r1, r4
 8001856:	028a      	lsls	r2, r1, #10
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001860:	2200      	movs	r2, #0
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001864:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001866:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800186a:	f7fe fcd1 	bl	8000210 <__aeabi_uldivmod>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4613      	mov	r3, r2
 8001874:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0f1b      	lsrs	r3, r3, #28
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800188a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001896:	e003      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800189a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800189e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	37b8      	adds	r7, #184	@ 0xb8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	00f42400 	.word	0x00f42400

080018b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e28d      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8083 	beq.w	80019de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018d8:	4b94      	ldr	r3, [pc, #592]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d019      	beq.n	8001918 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018e4:	4b91      	ldr	r3, [pc, #580]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d106      	bne.n	80018fe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018fc:	d00c      	beq.n	8001918 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d112      	bne.n	8001930 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190a:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001912:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b84      	ldr	r3, [pc, #528]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0x124>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d157      	bne.n	80019dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e25a      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x90>
 800193a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xcc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0xb4>
 8001952:	4b76      	ldr	r3, [pc, #472]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a75      	ldr	r2, [pc, #468]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b73      	ldr	r3, [pc, #460]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a72      	ldr	r2, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xcc>
 800196c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6e      	ldr	r2, [pc, #440]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b6c      	ldr	r3, [pc, #432]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f97c 	bl	8000c88 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff f978 	bl	8000c88 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	@ 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e21f      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b61      	ldr	r3, [pc, #388]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xdc>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff f968 	bl	8000c88 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff f964 	bl	8000c88 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	@ 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e20b      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ce:	4b57      	ldr	r3, [pc, #348]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x104>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06f      	beq.n	8001aca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ea:	4b50      	ldr	r3, [pc, #320]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d017      	beq.n	8001a26 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019f6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d105      	bne.n	8001a0e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a02:	4b4a      	ldr	r3, [pc, #296]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b47      	ldr	r3, [pc, #284]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b44      	ldr	r3, [pc, #272]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1d3      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4937      	ldr	r1, [pc, #220]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f911 	bl	8000c88 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f90d 	bl	8000c88 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e1b4      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b28      	ldr	r3, [pc, #160]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4925      	ldr	r1, [pc, #148]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b24      	ldr	r3, [pc, #144]	@ (8001b30 <HAL_RCC_OscConfig+0x278>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f8f0 	bl	8000c88 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff f8ec 	bl	8000c88 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e193      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d036      	beq.n	8001b44 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d016      	beq.n	8001b0c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f8d0 	bl	8000c88 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f8cc 	bl	8000c88 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e173      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x234>
 8001b0a:	e01b      	b.n	8001b44 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f8b9 	bl	8000c88 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e00e      	b.n	8001b38 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f8b5 	bl	8000c88 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d907      	bls.n	8001b38 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e15c      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	42470000 	.word	0x42470000
 8001b34:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4b8a      	ldr	r3, [pc, #552]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1ea      	bne.n	8001b1a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8097 	beq.w	8001c80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b83      	ldr	r3, [pc, #524]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	4b7f      	ldr	r3, [pc, #508]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b72:	4b7c      	ldr	r3, [pc, #496]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4b79      	ldr	r3, [pc, #484]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8e:	4b76      	ldr	r3, [pc, #472]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f875 	bl	8000c88 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff f871 	bl	8000c88 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e118      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	@ (8001d68 <HAL_RCC_OscConfig+0x4b0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d106      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x31e>
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd4:	e01c      	b.n	8001c10 <HAL_RCC_OscConfig+0x358>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x340>
 8001bde:	4b61      	ldr	r3, [pc, #388]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be2:	4a60      	ldr	r2, [pc, #384]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0x358>
 8001bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfc:	4a59      	ldr	r2, [pc, #356]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c04:	4b57      	ldr	r3, [pc, #348]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a56      	ldr	r2, [pc, #344]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f023 0304 	bic.w	r3, r3, #4
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d015      	beq.n	8001c44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f836 	bl	8000c88 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7ff f832 	bl	8000c88 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0d7      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c36:	4b4b      	ldr	r3, [pc, #300]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0ee      	beq.n	8001c20 <HAL_RCC_OscConfig+0x368>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f820 	bl	8000c88 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f81c 	bl	8000c88 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0c1      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c62:	4b40      	ldr	r3, [pc, #256]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ee      	bne.n	8001c4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c6e:	7dfb      	ldrb	r3, [r7, #23]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	4a3a      	ldr	r2, [pc, #232]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ad 	beq.w	8001de4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8a:	4b36      	ldr	r3, [pc, #216]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d060      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d145      	bne.n	8001d2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b33      	ldr	r3, [pc, #204]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7fe fff0 	bl	8000c88 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ffec 	bl	8000c88 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e093      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b29      	ldr	r3, [pc, #164]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	019b      	lsls	r3, r3, #6
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce0:	085b      	lsrs	r3, r3, #1
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	041b      	lsls	r3, r3, #16
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	061b      	lsls	r3, r3, #24
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	071b      	lsls	r3, r3, #28
 8001cf6:	491b      	ldr	r1, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ffc1 	bl	8000c88 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ffbd 	bl	8000c88 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e064      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x452>
 8001d28:	e05c      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <HAL_RCC_OscConfig+0x4b4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe ffaa 	bl	8000c88 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7fe ffa6 	bl	8000c88 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04d      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x480>
 8001d56:	e045      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e040      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	@ (8001df0 <HAL_RCC_OscConfig+0x538>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d030      	beq.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d129      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d122      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001da0:	4013      	ands	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d119      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	3b01      	subs	r3, #1
 8001dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10f      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e041      	b.n	8001e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f839 	bl	8001e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 f9c0 	bl	80021b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e04e      	b.n	8001f5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a23      	ldr	r2, [pc, #140]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d022      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eea:	d01d      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d018      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xcc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1c      	ldr	r2, [pc, #112]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d00e      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xd4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x80>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a18      	ldr	r2, [pc, #96]	@ (8001f84 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d010      	beq.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4a:	e007      	b.n	8001f5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40000c00 	.word	0x40000c00
 8001f7c:	40010400 	.word	0x40010400
 8001f80:	40014000 	.word	0x40014000
 8001f84:	40001800 	.word	0x40001800

08001f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d020      	beq.n	8001fec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01b      	beq.n	8001fec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0202 	mvn.w	r2, #2
 8001fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f8d2 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001fd8:	e005      	b.n	8001fe6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8c4 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8d5 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d020      	beq.n	8002038 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0204 	mvn.w	r2, #4
 8002008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2202      	movs	r2, #2
 800200e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8ac 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002024:	e005      	b.n	8002032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f89e 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f8af 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d020      	beq.n	8002084 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0208 	mvn.w	r2, #8
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f886 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f878 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f889 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	d020      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0210 	mvn.w	r2, #16
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2208      	movs	r2, #8
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f860 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f852 	bl	8002168 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f863 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f06f 0201 	mvn.w	r2, #1
 80020ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe fb5e 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f906 	bl	8002324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f834 	bl	80021a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0220 	mvn.w	r2, #32
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8d8 	bl	8002310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a46      	ldr	r2, [pc, #280]	@ (80022e4 <TIM_Base_SetConfig+0x12c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d6:	d00f      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a43      	ldr	r2, [pc, #268]	@ (80022e8 <TIM_Base_SetConfig+0x130>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d00b      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a42      	ldr	r2, [pc, #264]	@ (80022ec <TIM_Base_SetConfig+0x134>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d007      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a41      	ldr	r2, [pc, #260]	@ (80022f0 <TIM_Base_SetConfig+0x138>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a40      	ldr	r2, [pc, #256]	@ (80022f4 <TIM_Base_SetConfig+0x13c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d108      	bne.n	800220a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a35      	ldr	r2, [pc, #212]	@ (80022e4 <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d02b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002218:	d027      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a32      	ldr	r2, [pc, #200]	@ (80022e8 <TIM_Base_SetConfig+0x130>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d023      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a31      	ldr	r2, [pc, #196]	@ (80022ec <TIM_Base_SetConfig+0x134>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a30      	ldr	r2, [pc, #192]	@ (80022f0 <TIM_Base_SetConfig+0x138>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2f      	ldr	r2, [pc, #188]	@ (80022f4 <TIM_Base_SetConfig+0x13c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d017      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2e      	ldr	r2, [pc, #184]	@ (80022f8 <TIM_Base_SetConfig+0x140>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d013      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2d      	ldr	r2, [pc, #180]	@ (80022fc <TIM_Base_SetConfig+0x144>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00f      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a2c      	ldr	r2, [pc, #176]	@ (8002300 <TIM_Base_SetConfig+0x148>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d00b      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <TIM_Base_SetConfig+0x14c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d007      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a2a      	ldr	r2, [pc, #168]	@ (8002308 <TIM_Base_SetConfig+0x150>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d003      	beq.n	800226a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a29      	ldr	r2, [pc, #164]	@ (800230c <TIM_Base_SetConfig+0x154>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d108      	bne.n	800227c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002270:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	4313      	orrs	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <TIM_Base_SetConfig+0x12c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d003      	beq.n	80022b0 <TIM_Base_SetConfig+0xf8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <TIM_Base_SetConfig+0x13c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d103      	bne.n	80022b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d105      	bne.n	80022d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f023 0201 	bic.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]
  }
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40010400 	.word	0x40010400
 80022f8:	40014000 	.word	0x40014000
 80022fc:	40014400 	.word	0x40014400
 8002300:	40014800 	.word	0x40014800
 8002304:	40001800 	.word	0x40001800
 8002308:	40001c00 	.word	0x40001c00
 800230c:	40002000 	.word	0x40002000

08002310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e042      	b.n	80023d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fa6a 	bl	8000838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2224      	movs	r2, #36	@ 0x24
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800237a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f82b 	bl	80023d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023dc:	b0c0      	sub	sp, #256	@ 0x100
 80023de:	af00      	add	r7, sp, #0
 80023e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80023f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	ea40 0301 	orr.w	r3, r0, r1
 8002400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	431a      	orrs	r2, r3
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002430:	f021 010c 	bic.w	r1, r1, #12
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800243e:	430b      	orrs	r3, r1
 8002440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800244e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002452:	6999      	ldr	r1, [r3, #24]
 8002454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	ea40 0301 	orr.w	r3, r0, r1
 800245e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b8f      	ldr	r3, [pc, #572]	@ (80026a4 <UART_SetConfig+0x2cc>)
 8002468:	429a      	cmp	r2, r3
 800246a:	d005      	beq.n	8002478 <UART_SetConfig+0xa0>
 800246c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b8d      	ldr	r3, [pc, #564]	@ (80026a8 <UART_SetConfig+0x2d0>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d104      	bne.n	8002482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002478:	f7fe ffa8 	bl	80013cc <HAL_RCC_GetPCLK2Freq>
 800247c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002480:	e003      	b.n	800248a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002482:	f7fe ff8f 	bl	80013a4 <HAL_RCC_GetPCLK1Freq>
 8002486:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800248a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002494:	f040 810c 	bne.w	80026b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80024a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80024a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	1891      	adds	r1, r2, r2
 80024b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80024b2:	415b      	adcs	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80024b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024ba:	4621      	mov	r1, r4
 80024bc:	eb12 0801 	adds.w	r8, r2, r1
 80024c0:	4629      	mov	r1, r5
 80024c2:	eb43 0901 	adc.w	r9, r3, r1
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024da:	4690      	mov	r8, r2
 80024dc:	4699      	mov	r9, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	eb18 0303 	adds.w	r3, r8, r3
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024e8:	462b      	mov	r3, r5
 80024ea:	eb49 0303 	adc.w	r3, r9, r3
 80024ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002506:	460b      	mov	r3, r1
 8002508:	18db      	adds	r3, r3, r3
 800250a:	653b      	str	r3, [r7, #80]	@ 0x50
 800250c:	4613      	mov	r3, r2
 800250e:	eb42 0303 	adc.w	r3, r2, r3
 8002512:	657b      	str	r3, [r7, #84]	@ 0x54
 8002514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800251c:	f7fd fe78 	bl	8000210 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4b61      	ldr	r3, [pc, #388]	@ (80026ac <UART_SetConfig+0x2d4>)
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	011c      	lsls	r4, r3, #4
 800252e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002532:	2200      	movs	r2, #0
 8002534:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002538:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800253c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	1891      	adds	r1, r2, r2
 8002546:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002548:	415b      	adcs	r3, r3
 800254a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800254c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002550:	4641      	mov	r1, r8
 8002552:	eb12 0a01 	adds.w	sl, r2, r1
 8002556:	4649      	mov	r1, r9
 8002558:	eb43 0b01 	adc.w	fp, r3, r1
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800256c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002570:	4692      	mov	sl, r2
 8002572:	469b      	mov	fp, r3
 8002574:	4643      	mov	r3, r8
 8002576:	eb1a 0303 	adds.w	r3, sl, r3
 800257a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800257e:	464b      	mov	r3, r9
 8002580:	eb4b 0303 	adc.w	r3, fp, r3
 8002584:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002594:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800259c:	460b      	mov	r3, r1
 800259e:	18db      	adds	r3, r3, r3
 80025a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025a2:	4613      	mov	r3, r2
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80025b2:	f7fd fe2d 	bl	8000210 <__aeabi_uldivmod>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	4b3b      	ldr	r3, [pc, #236]	@ (80026ac <UART_SetConfig+0x2d4>)
 80025be:	fba3 2301 	umull	r2, r3, r3, r1
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2264      	movs	r2, #100	@ 0x64
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	1acb      	subs	r3, r1, r3
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80025d2:	4b36      	ldr	r3, [pc, #216]	@ (80026ac <UART_SetConfig+0x2d4>)
 80025d4:	fba3 2302 	umull	r2, r3, r3, r2
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80025e0:	441c      	add	r4, r3
 80025e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80025f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025f4:	4642      	mov	r2, r8
 80025f6:	464b      	mov	r3, r9
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025fc:	415b      	adcs	r3, r3
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002604:	4641      	mov	r1, r8
 8002606:	1851      	adds	r1, r2, r1
 8002608:	6339      	str	r1, [r7, #48]	@ 0x30
 800260a:	4649      	mov	r1, r9
 800260c:	414b      	adcs	r3, r1
 800260e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800261c:	4659      	mov	r1, fp
 800261e:	00cb      	lsls	r3, r1, #3
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002626:	4651      	mov	r1, sl
 8002628:	00ca      	lsls	r2, r1, #3
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	4603      	mov	r3, r0
 8002630:	4642      	mov	r2, r8
 8002632:	189b      	adds	r3, r3, r2
 8002634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002638:	464b      	mov	r3, r9
 800263a:	460a      	mov	r2, r1
 800263c:	eb42 0303 	adc.w	r3, r2, r3
 8002640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002650:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002658:	460b      	mov	r3, r1
 800265a:	18db      	adds	r3, r3, r3
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265e:	4613      	mov	r3, r2
 8002660:	eb42 0303 	adc.w	r3, r2, r3
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800266a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800266e:	f7fd fdcf 	bl	8000210 <__aeabi_uldivmod>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <UART_SetConfig+0x2d4>)
 8002678:	fba3 1302 	umull	r1, r3, r3, r2
 800267c:	095b      	lsrs	r3, r3, #5
 800267e:	2164      	movs	r1, #100	@ 0x64
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3332      	adds	r3, #50	@ 0x32
 800268a:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <UART_SetConfig+0x2d4>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	f003 0207 	and.w	r2, r3, #7
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4422      	add	r2, r4
 800269e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026a0:	e106      	b.n	80028b0 <UART_SetConfig+0x4d8>
 80026a2:	bf00      	nop
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80026be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80026c2:	4642      	mov	r2, r8
 80026c4:	464b      	mov	r3, r9
 80026c6:	1891      	adds	r1, r2, r2
 80026c8:	6239      	str	r1, [r7, #32]
 80026ca:	415b      	adcs	r3, r3
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026d2:	4641      	mov	r1, r8
 80026d4:	1854      	adds	r4, r2, r1
 80026d6:	4649      	mov	r1, r9
 80026d8:	eb43 0501 	adc.w	r5, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026f8:	464b      	mov	r3, r9
 80026fa:	eb45 0303 	adc.w	r3, r5, r3
 80026fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800270e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800271e:	4629      	mov	r1, r5
 8002720:	008b      	lsls	r3, r1, #2
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002728:	4621      	mov	r1, r4
 800272a:	008a      	lsls	r2, r1, #2
 800272c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002730:	f7fd fd6e 	bl	8000210 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4b60      	ldr	r3, [pc, #384]	@ (80028bc <UART_SetConfig+0x4e4>)
 800273a:	fba3 2302 	umull	r2, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	011c      	lsls	r4, r3, #4
 8002742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800274c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	1891      	adds	r1, r2, r2
 800275a:	61b9      	str	r1, [r7, #24]
 800275c:	415b      	adcs	r3, r3
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	4641      	mov	r1, r8
 8002766:	1851      	adds	r1, r2, r1
 8002768:	6139      	str	r1, [r7, #16]
 800276a:	4649      	mov	r1, r9
 800276c:	414b      	adcs	r3, r1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800277c:	4659      	mov	r1, fp
 800277e:	00cb      	lsls	r3, r1, #3
 8002780:	4651      	mov	r1, sl
 8002782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002786:	4651      	mov	r1, sl
 8002788:	00ca      	lsls	r2, r1, #3
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	4603      	mov	r3, r0
 8002790:	4642      	mov	r2, r8
 8002792:	189b      	adds	r3, r3, r2
 8002794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002798:	464b      	mov	r3, r9
 800279a:	460a      	mov	r2, r1
 800279c:	eb42 0303 	adc.w	r3, r2, r3
 80027a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80027bc:	4649      	mov	r1, r9
 80027be:	008b      	lsls	r3, r1, #2
 80027c0:	4641      	mov	r1, r8
 80027c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027c6:	4641      	mov	r1, r8
 80027c8:	008a      	lsls	r2, r1, #2
 80027ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80027ce:	f7fd fd1f 	bl	8000210 <__aeabi_uldivmod>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	4b38      	ldr	r3, [pc, #224]	@ (80028bc <UART_SetConfig+0x4e4>)
 80027da:	fba3 2301 	umull	r2, r3, r3, r1
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	2264      	movs	r2, #100	@ 0x64
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	1acb      	subs	r3, r1, r3
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	3332      	adds	r3, #50	@ 0x32
 80027ec:	4a33      	ldr	r2, [pc, #204]	@ (80028bc <UART_SetConfig+0x4e4>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f8:	441c      	add	r4, r3
 80027fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027fe:	2200      	movs	r2, #0
 8002800:	673b      	str	r3, [r7, #112]	@ 0x70
 8002802:	677a      	str	r2, [r7, #116]	@ 0x74
 8002804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002808:	4642      	mov	r2, r8
 800280a:	464b      	mov	r3, r9
 800280c:	1891      	adds	r1, r2, r2
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	415b      	adcs	r3, r3
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002818:	4641      	mov	r1, r8
 800281a:	1851      	adds	r1, r2, r1
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	4649      	mov	r1, r9
 8002820:	414b      	adcs	r3, r1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002830:	4659      	mov	r1, fp
 8002832:	00cb      	lsls	r3, r1, #3
 8002834:	4651      	mov	r1, sl
 8002836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283a:	4651      	mov	r1, sl
 800283c:	00ca      	lsls	r2, r1, #3
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	4603      	mov	r3, r0
 8002844:	4642      	mov	r2, r8
 8002846:	189b      	adds	r3, r3, r2
 8002848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800284a:	464b      	mov	r3, r9
 800284c:	460a      	mov	r2, r1
 800284e:	eb42 0303 	adc.w	r3, r2, r3
 8002852:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	663b      	str	r3, [r7, #96]	@ 0x60
 800285e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800286c:	4649      	mov	r1, r9
 800286e:	008b      	lsls	r3, r1, #2
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002876:	4641      	mov	r1, r8
 8002878:	008a      	lsls	r2, r1, #2
 800287a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800287e:	f7fd fcc7 	bl	8000210 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <UART_SetConfig+0x4e4>)
 8002888:	fba3 1302 	umull	r1, r3, r3, r2
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	2164      	movs	r1, #100	@ 0x64
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	3332      	adds	r3, #50	@ 0x32
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <UART_SetConfig+0x4e4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	f003 020f 	and.w	r2, r3, #15
 80028a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4422      	add	r2, r4
 80028ae:	609a      	str	r2, [r3, #8]
}
 80028b0:	bf00      	nop
 80028b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80028b6:	46bd      	mov	sp, r7
 80028b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028bc:	51eb851f 	.word	0x51eb851f

080028c0 <__NVIC_SetPriority>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	db0a      	blt.n	80028ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	490c      	ldr	r1, [pc, #48]	@ (800290c <__NVIC_SetPriority+0x4c>)
 80028da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028de:	0112      	lsls	r2, r2, #4
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	440b      	add	r3, r1
 80028e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80028e8:	e00a      	b.n	8002900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4908      	ldr	r1, [pc, #32]	@ (8002910 <__NVIC_SetPriority+0x50>)
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	3b04      	subs	r3, #4
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	440b      	add	r3, r1
 80028fe:	761a      	strb	r2, [r3, #24]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000e100 	.word	0xe000e100
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <SysTick_Handler+0x1c>)
 800291a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800291c:	f001 fe20 	bl	8004560 <xTaskGetSchedulerState>
 8002920:	4603      	mov	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002926:	f002 fc17 	bl	8005158 <xPortSysTickHandler>
  }
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002938:	2100      	movs	r1, #0
 800293a:	f06f 0004 	mvn.w	r0, #4
 800293e:	f7ff ffbf 	bl	80028c0 <__NVIC_SetPriority>
#endif
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294e:	f3ef 8305 	mrs	r3, IPSR
 8002952:	603b      	str	r3, [r7, #0]
  return(result);
 8002954:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800295a:	f06f 0305 	mvn.w	r3, #5
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	e00c      	b.n	800297c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002962:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <osKernelInitialize+0x44>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <osKernelInitialize+0x44>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002970:	2300      	movs	r3, #0
 8002972:	607b      	str	r3, [r7, #4]
 8002974:	e002      	b.n	800297c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800297a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800297c:	687b      	ldr	r3, [r7, #4]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000128 	.word	0x20000128

08002990 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	603b      	str	r3, [r7, #0]
  return(result);
 800299c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80029a2:	f06f 0305 	mvn.w	r3, #5
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	e010      	b.n	80029cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029aa:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <osKernelStart+0x48>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d109      	bne.n	80029c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029b2:	f7ff ffbf 	bl	8002934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029b6:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <osKernelStart+0x48>)
 80029b8:	2202      	movs	r2, #2
 80029ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029bc:	f001 f982 	bl	8003cc4 <vTaskStartScheduler>
      stat = osOK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	e002      	b.n	80029cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029cc:	687b      	ldr	r3, [r7, #4]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000128 	.word	0x20000128

080029dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08e      	sub	sp, #56	@ 0x38
 80029e0:	af04      	add	r7, sp, #16
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ec:	f3ef 8305 	mrs	r3, IPSR
 80029f0:	617b      	str	r3, [r7, #20]
  return(result);
 80029f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d17e      	bne.n	8002af6 <osThreadNew+0x11a>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d07b      	beq.n	8002af6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80029fe:	2380      	movs	r3, #128	@ 0x80
 8002a00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a02:	2318      	movs	r3, #24
 8002a04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d045      	beq.n	8002aa2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <osThreadNew+0x48>
        name = attr->name;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <osThreadNew+0x6e>
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b38      	cmp	r3, #56	@ 0x38
 8002a3c:	d805      	bhi.n	8002a4a <osThreadNew+0x6e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <osThreadNew+0x72>
        return (NULL);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e054      	b.n	8002af8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	089b      	lsrs	r3, r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00e      	beq.n	8002a84 <osThreadNew+0xa8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b5b      	cmp	r3, #91	@ 0x5b
 8002a6c:	d90a      	bls.n	8002a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <osThreadNew+0xa8>
        mem = 1;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e010      	b.n	8002aa6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10c      	bne.n	8002aa6 <osThreadNew+0xca>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <osThreadNew+0xca>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <osThreadNew+0xca>
          mem = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e001      	b.n	8002aa6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d110      	bne.n	8002ace <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ab4:	9202      	str	r2, [sp, #8]
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fe46 	bl	8003754 <xTaskCreateStatic>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	e013      	b.n	8002af6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d110      	bne.n	8002af6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fe94 	bl	8003814 <xTaskCreate>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d001      	beq.n	8002af6 <osThreadNew+0x11a>
            hTask = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002af6:	693b      	ldr	r3, [r7, #16]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0c:	f3ef 8305 	mrs	r3, IPSR
 8002b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8002b18:	f06f 0305 	mvn.w	r3, #5
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e017      	b.n	8002b50 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d103      	bne.n	8002b2e <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8002b26:	f06f 0303 	mvn.w	r3, #3
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	e010      	b.n	8002b50 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8002b2e:	6938      	ldr	r0, [r7, #16]
 8002b30:	f001 f860 	bl	8003bf4 <eTaskGetState>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d005      	beq.n	8002b4a <osThreadTerminate+0x4a>
      stat = osOK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8002b42:	6938      	ldr	r0, [r7, #16]
 8002b44:	f000 ffac 	bl	8003aa0 <vTaskDelete>
 8002b48:	e002      	b.n	8002b50 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8002b4a:	f06f 0302 	mvn.w	r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8002b50:	697b      	ldr	r3, [r7, #20]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b62:	f3ef 8305 	mrs	r3, IPSR
 8002b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <osDelay+0x1c>
    stat = osErrorISR;
 8002b6e:	f06f 0305 	mvn.w	r3, #5
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e007      	b.n	8002b86 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f001 f801 	bl	8003b88 <vTaskDelay>
    }
  }

  return (stat);
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ba0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4a06      	ldr	r2, [pc, #24]	@ (8002bc0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ba6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000012c 	.word	0x2000012c
 8002bc0:	20000188 	.word	0x20000188

08002bc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a07      	ldr	r2, [pc, #28]	@ (8002bf0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <vApplicationGetTimerTaskMemory+0x30>)
 8002bda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000388 	.word	0x20000388
 8002bf4:	200003e4 	.word	0x200003e4

08002bf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 0208 	add.w	r2, r3, #8
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f103 0208 	add.w	r2, r3, #8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f103 0208 	add.w	r2, r3, #8
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c52:	b480      	push	{r7}
 8002c54:	b085      	sub	sp, #20
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	601a      	str	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cb0:	d103      	bne.n	8002cba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e00c      	b.n	8002cd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e002      	b.n	8002cc8 <vListInsert+0x2e>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d2f6      	bcs.n	8002cc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6892      	ldr	r2, [r2, #8]
 8002d22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6852      	ldr	r2, [r2, #4]
 8002d2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d103      	bne.n	8002d40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1e5a      	subs	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10b      	bne.n	8002d8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d86:	bf00      	nop
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d8c:	f002 f954 	bl	8005038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	441a      	add	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2200      	movs	r2, #0
 8002daa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	441a      	add	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	22ff      	movs	r2, #255	@ 0xff
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	22ff      	movs	r2, #255	@ 0xff
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d114      	bne.n	8002e0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01a      	beq.n	8002e20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3310      	adds	r3, #16
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 f9f6 	bl	80041e0 <xTaskRemoveFromEventList>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d012      	beq.n	8002e20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <xQueueGenericReset+0xd0>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	e009      	b.n	8002e20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3310      	adds	r3, #16
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fef1 	bl	8002bf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3324      	adds	r3, #36	@ 0x24
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff feec 	bl	8002bf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e20:	f002 f93c 	bl	800509c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08e      	sub	sp, #56	@ 0x38
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e5a:	bf00      	nop
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	e7fd      	b.n	8002e7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <xQueueGenericCreateStatic+0x56>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <xQueueGenericCreateStatic+0x5a>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueGenericCreateStatic+0x5c>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	623b      	str	r3, [r7, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <xQueueGenericCreateStatic+0x84>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <xQueueGenericCreateStatic+0x88>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <xQueueGenericCreateStatic+0x8a>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10b      	bne.n	8002eda <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec6:	f383 8811 	msr	BASEPRI, r3
 8002eca:	f3bf 8f6f 	isb	sy
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	61fb      	str	r3, [r7, #28]
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop
 8002ed8:	e7fd      	b.n	8002ed6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002eda:	2350      	movs	r3, #80	@ 0x50
 8002edc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b50      	cmp	r3, #80	@ 0x50
 8002ee2:	d00b      	beq.n	8002efc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	61bb      	str	r3, [r7, #24]
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002efc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f805 	bl	8002f2e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	@ 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e002      	b.n	8002f50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	69b8      	ldr	r0, [r7, #24]
 8002f60:	f7ff fefe 	bl	8002d60 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	@ 0x38
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f82:	2300      	movs	r3, #0
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <xQueueGenericSend+0x34>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fa2:	bf00      	nop
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <xQueueGenericSend+0x42>
 8002fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <xQueueGenericSend+0x46>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueGenericSend+0x48>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <xQueueGenericSend+0x64>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d103      	bne.n	8002fe6 <xQueueGenericSend+0x72>
 8002fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <xQueueGenericSend+0x76>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <xQueueGenericSend+0x78>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <xQueueGenericSend+0x94>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	623b      	str	r3, [r7, #32]
}
 8003002:	bf00      	nop
 8003004:	bf00      	nop
 8003006:	e7fd      	b.n	8003004 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003008:	f001 faaa 	bl	8004560 <xTaskGetSchedulerState>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <xQueueGenericSend+0xa4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <xQueueGenericSend+0xa8>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <xQueueGenericSend+0xaa>
 800301c:	2300      	movs	r3, #0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10b      	bne.n	800303a <xQueueGenericSend+0xc6>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	61fb      	str	r3, [r7, #28]
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	e7fd      	b.n	8003036 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303a:	f001 fffd 	bl	8005038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003040:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <xQueueGenericSend+0xdc>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d129      	bne.n	80030a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003056:	f000 fa0f 	bl	8003478 <prvCopyDataToQueue>
 800305a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	2b00      	cmp	r3, #0
 8003062:	d010      	beq.n	8003086 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	3324      	adds	r3, #36	@ 0x24
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f8b9 	bl	80041e0 <xTaskRemoveFromEventList>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003074:	4b3f      	ldr	r3, [pc, #252]	@ (8003174 <xQueueGenericSend+0x200>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	e00a      	b.n	800309c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <xQueueGenericSend+0x200>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800309c:	f001 fffe 	bl	800509c <vPortExitCritical>
				return pdPASS;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e063      	b.n	800316c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030aa:	f001 fff7 	bl	800509c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e05c      	b.n	800316c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 f8f3 	bl	80042a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030c6:	f001 ffe9 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ca:	f000 fe63 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ce:	f001 ffb3 	bl	8005038 <vPortEnterCritical>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030de:	d103      	bne.n	80030e8 <xQueueGenericSend+0x174>
 80030e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030f4:	d103      	bne.n	80030fe <xQueueGenericSend+0x18a>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030fe:	f001 ffcd 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003102:	1d3a      	adds	r2, r7, #4
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f8e2 	bl	80042d4 <xTaskCheckForTimeOut>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d124      	bne.n	8003160 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003116:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003118:	f000 faa6 	bl	8003668 <prvIsQueueFull>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d018      	beq.n	8003154 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	3310      	adds	r3, #16
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f806 	bl	800413c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003132:	f000 fa31 	bl	8003598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003136:	f000 fe3b 	bl	8003db0 <xTaskResumeAll>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	f47f af7c 	bne.w	800303a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003142:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <xQueueGenericSend+0x200>)
 8003144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	e772      	b.n	800303a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003156:	f000 fa1f 	bl	8003598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800315a:	f000 fe29 	bl	8003db0 <xTaskResumeAll>
 800315e:	e76c      	b.n	800303a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003160:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003162:	f000 fa19 	bl	8003598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003166:	f000 fe23 	bl	8003db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800316a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800316c:	4618      	mov	r0, r3
 800316e:	3738      	adds	r7, #56	@ 0x38
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b090      	sub	sp, #64	@ 0x40
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d103      	bne.n	80031b6 <xQueueGenericSendFromISR+0x3e>
 80031ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <xQueueGenericSendFromISR+0x42>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <xQueueGenericSendFromISR+0x44>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSendFromISR+0x6e>
 80031de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSendFromISR+0x72>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSendFromISR+0x74>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	623b      	str	r3, [r7, #32]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003208:	f001 fff6 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800320c:	f3ef 8211 	mrs	r2, BASEPRI
 8003210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	61fa      	str	r2, [r7, #28]
 8003222:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003224:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	429a      	cmp	r2, r3
 8003232:	d302      	bcc.n	800323a <xQueueGenericSendFromISR+0xc2>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d12f      	bne.n	800329a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800323c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003240:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003250:	f000 f912 	bl	8003478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003254:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800325c:	d112      	bne.n	8003284 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	2b00      	cmp	r3, #0
 8003264:	d016      	beq.n	8003294 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003268:	3324      	adds	r3, #36	@ 0x24
 800326a:	4618      	mov	r0, r3
 800326c:	f000 ffb8 	bl	80041e0 <xTaskRemoveFromEventList>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00e      	beq.n	8003294 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e007      	b.n	8003294 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003284:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003288:	3301      	adds	r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	b25a      	sxtb	r2, r3
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003298:	e001      	b.n	800329e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800329a:	2300      	movs	r3, #0
 800329c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3740      	adds	r7, #64	@ 0x40
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08c      	sub	sp, #48	@ 0x30
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <xQueueReceive+0x32>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	623b      	str	r3, [r7, #32]
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	e7fd      	b.n	80032e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <xQueueReceive+0x40>
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <xQueueReceive+0x44>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <xQueueReceive+0x46>
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <xQueueReceive+0x62>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	61fb      	str	r3, [r7, #28]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003316:	f001 f923 	bl	8004560 <xTaskGetSchedulerState>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d102      	bne.n	8003326 <xQueueReceive+0x72>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <xQueueReceive+0x76>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <xQueueReceive+0x78>
 800332a:	2300      	movs	r3, #0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10b      	bne.n	8003348 <xQueueReceive+0x94>
	__asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	61bb      	str	r3, [r7, #24]
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003348:	f001 fe76 	bl	8005038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800334c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01f      	beq.n	8003398 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800335c:	f000 f8f6 	bl	800354c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00f      	beq.n	8003390 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	3310      	adds	r3, #16
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ff33 	bl	80041e0 <xTaskRemoveFromEventList>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003380:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <xQueueReceive+0x1c0>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003390:	f001 fe84 	bl	800509c <vPortExitCritical>
				return pdPASS;
 8003394:	2301      	movs	r3, #1
 8003396:	e069      	b.n	800346c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800339e:	f001 fe7d 	bl	800509c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e062      	b.n	800346c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ac:	f107 0310 	add.w	r3, r7, #16
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff79 	bl	80042a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ba:	f001 fe6f 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033be:	f000 fce9 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033c2:	f001 fe39 	bl	8005038 <vPortEnterCritical>
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033d2:	d103      	bne.n	80033dc <xQueueReceive+0x128>
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e8:	d103      	bne.n	80033f2 <xQueueReceive+0x13e>
 80033ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033f2:	f001 fe53 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033f6:	1d3a      	adds	r2, r7, #4
 80033f8:	f107 0310 	add.w	r3, r7, #16
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 ff68 	bl	80042d4 <xTaskCheckForTimeOut>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d123      	bne.n	8003452 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800340a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800340c:	f000 f916 	bl	800363c <prvIsQueueEmpty>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003418:	3324      	adds	r3, #36	@ 0x24
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fe8c 	bl	800413c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003424:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003426:	f000 f8b7 	bl	8003598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800342a:	f000 fcc1 	bl	8003db0 <xTaskResumeAll>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d189      	bne.n	8003348 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <xQueueReceive+0x1c0>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	e780      	b.n	8003348 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003448:	f000 f8a6 	bl	8003598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800344c:	f000 fcb0 	bl	8003db0 <xTaskResumeAll>
 8003450:	e77a      	b.n	8003348 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003454:	f000 f8a0 	bl	8003598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003458:	f000 fcaa 	bl	8003db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800345c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800345e:	f000 f8ed 	bl	800363c <prvIsQueueEmpty>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	f43f af6f 	beq.w	8003348 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800346a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800346c:	4618      	mov	r0, r3
 800346e:	3730      	adds	r7, #48	@ 0x30
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	e000ed04 	.word	0xe000ed04

08003478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10d      	bne.n	80034b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d14d      	bne.n	800353a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 f87a 	bl	800459c <xTaskPriorityDisinherit>
 80034a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	e043      	b.n	800353a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d119      	bne.n	80034ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6858      	ldr	r0, [r3, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	461a      	mov	r2, r3
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	f002 fa1d 	bl	8005902 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d0:	441a      	add	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d32b      	bcc.n	800353a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e026      	b.n	800353a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68d8      	ldr	r0, [r3, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	461a      	mov	r2, r3
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	f002 fa03 	bl	8005902 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	425b      	negs	r3, r3
 8003506:	441a      	add	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d207      	bcs.n	8003528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	425b      	negs	r3, r3
 8003522:	441a      	add	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d105      	bne.n	800353a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	3b01      	subs	r3, #1
 8003538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003542:	697b      	ldr	r3, [r7, #20]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003566:	441a      	add	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d303      	bcc.n	8003580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68d9      	ldr	r1, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	461a      	mov	r2, r3
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f002 f9b9 	bl	8005902 <memcpy>
	}
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035a0:	f001 fd4a 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ac:	e011      	b.n	80035d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d012      	beq.n	80035dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3324      	adds	r3, #36	@ 0x24
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fe10 	bl	80041e0 <xTaskRemoveFromEventList>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035c6:	f000 fee9 	bl	800439c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dce9      	bgt.n	80035ae <prvUnlockQueue+0x16>
 80035da:	e000      	b.n	80035de <prvUnlockQueue+0x46>
					break;
 80035dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	22ff      	movs	r2, #255	@ 0xff
 80035e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035e6:	f001 fd59 	bl	800509c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035ea:	f001 fd25 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f6:	e011      	b.n	800361c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3310      	adds	r3, #16
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fdeb 	bl	80041e0 <xTaskRemoveFromEventList>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003610:	f000 fec4 	bl	800439c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003614:	7bbb      	ldrb	r3, [r7, #14]
 8003616:	3b01      	subs	r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800361c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003620:	2b00      	cmp	r3, #0
 8003622:	dce9      	bgt.n	80035f8 <prvUnlockQueue+0x60>
 8003624:	e000      	b.n	8003628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	22ff      	movs	r2, #255	@ 0xff
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003630:	f001 fd34 	bl	800509c <vPortExitCritical>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003644:	f001 fcf8 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e001      	b.n	800365a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800365a:	f001 fd1f 	bl	800509c <vPortExitCritical>

	return xReturn;
 800365e:	68fb      	ldr	r3, [r7, #12]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003670:	f001 fce2 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	429a      	cmp	r2, r3
 800367e:	d102      	bne.n	8003686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003680:	2301      	movs	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e001      	b.n	800368a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800368a:	f001 fd07 	bl	800509c <vPortExitCritical>

	return xReturn;
 800368e:	68fb      	ldr	r3, [r7, #12]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e014      	b.n	80036d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036a8:	4a0f      	ldr	r2, [pc, #60]	@ (80036e8 <vQueueAddToRegistry+0x50>)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036b4:	490c      	ldr	r1, [pc, #48]	@ (80036e8 <vQueueAddToRegistry+0x50>)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <vQueueAddToRegistry+0x50>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036ca:	e006      	b.n	80036da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b07      	cmp	r3, #7
 80036d6:	d9e7      	bls.n	80036a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200007e4 	.word	0x200007e4

080036ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036fc:	f001 fc9c 	bl	8005038 <vPortEnterCritical>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003706:	b25b      	sxtb	r3, r3
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800370c:	d103      	bne.n	8003716 <vQueueWaitForMessageRestricted+0x2a>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800371c:	b25b      	sxtb	r3, r3
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003722:	d103      	bne.n	800372c <vQueueWaitForMessageRestricted+0x40>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800372c:	f001 fcb6 	bl	800509c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d106      	bne.n	8003746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	3324      	adds	r3, #36	@ 0x24
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	4618      	mov	r0, r3
 8003742:	f000 fd21 	bl	8004188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7ff ff26 	bl	8003598 <prvUnlockQueue>
	}
 800374c:	bf00      	nop
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af04      	add	r7, sp, #16
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	623b      	str	r3, [r7, #32]
}
 800377a:	bf00      	nop
 800377c:	bf00      	nop
 800377e:	e7fd      	b.n	800377c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	61fb      	str	r3, [r7, #28]
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	e7fd      	b.n	800379a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800379e:	235c      	movs	r3, #92	@ 0x5c
 80037a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b5c      	cmp	r3, #92	@ 0x5c
 80037a6:	d00b      	beq.n	80037c0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	61bb      	str	r3, [r7, #24]
}
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	e7fd      	b.n	80037bc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037c0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01e      	beq.n	8003806 <xTaskCreateStatic+0xb2>
 80037c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01b      	beq.n	8003806 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037e0:	2300      	movs	r3, #0
 80037e2:	9303      	str	r3, [sp, #12]
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	9302      	str	r3, [sp, #8]
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f850 	bl	800389e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003800:	f000 f8de 	bl	80039c0 <prvAddNewTaskToReadyList>
 8003804:	e001      	b.n	800380a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800380a:	697b      	ldr	r3, [r7, #20]
	}
 800380c:	4618      	mov	r0, r3
 800380e:	3728      	adds	r7, #40	@ 0x28
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	@ 0x30
 8003818:	af04      	add	r7, sp, #16
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fd27 	bl	800527c <pvPortMalloc>
 800382e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00e      	beq.n	8003854 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003836:	205c      	movs	r0, #92	@ 0x5c
 8003838:	f001 fd20 	bl	800527c <pvPortMalloc>
 800383c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30
 800384a:	e005      	b.n	8003858 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800384c:	6978      	ldr	r0, [r7, #20]
 800384e:	f001 fde3 	bl	8005418 <vPortFree>
 8003852:	e001      	b.n	8003858 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d017      	beq.n	800388e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	2300      	movs	r3, #0
 800386a:	9303      	str	r3, [sp, #12]
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	9302      	str	r3, [sp, #8]
 8003870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f80e 	bl	800389e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003882:	69f8      	ldr	r0, [r7, #28]
 8003884:	f000 f89c 	bl	80039c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003888:	2301      	movs	r3, #1
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e002      	b.n	8003894 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003892:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003894:	69bb      	ldr	r3, [r7, #24]
	}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	461a      	mov	r2, r3
 80038b6:	21a5      	movs	r1, #165	@ 0xa5
 80038b8:	f001 ffee 	bl	8005898 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038c6:	3b01      	subs	r3, #1
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	617b      	str	r3, [r7, #20]
}
 80038f2:	bf00      	nop
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01f      	beq.n	800393e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	e012      	b.n	800392a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	7819      	ldrb	r1, [r3, #0]
 800390c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	3334      	adds	r3, #52	@ 0x34
 8003914:	460a      	mov	r2, r1
 8003916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	3301      	adds	r3, #1
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d9e9      	bls.n	8003904 <prvInitialiseNewTask+0x66>
 8003930:	e000      	b.n	8003934 <prvInitialiseNewTask+0x96>
			{
				break;
 8003932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800393c:	e003      	b.n	8003946 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003948:	2b37      	cmp	r3, #55	@ 0x37
 800394a:	d901      	bls.n	8003950 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800394c:	2337      	movs	r3, #55	@ 0x37
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003954:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800395a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003964:	3304      	adds	r3, #4
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff f966 	bl	8002c38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	3318      	adds	r3, #24
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f961 	bl	8002c38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800397a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	2200      	movs	r2, #0
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	68f9      	ldr	r1, [r7, #12]
 800399e:	69b8      	ldr	r0, [r7, #24]
 80039a0:	f001 fa1a 	bl	8004dd8 <pxPortInitialiseStack>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039b6:	bf00      	nop
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039c8:	f001 fb36 	bl	8005038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <prvAddNewTaskToReadyList+0xc4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <prvAddNewTaskToReadyList+0xc4>)
 80039d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a88 <prvAddNewTaskToReadyList+0xc8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039de:	4a2a      	ldr	r2, [pc, #168]	@ (8003a88 <prvAddNewTaskToReadyList+0xc8>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039e4:	4b27      	ldr	r3, [pc, #156]	@ (8003a84 <prvAddNewTaskToReadyList+0xc4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d110      	bne.n	8003a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039ec:	f000 fcfa 	bl	80043e4 <prvInitialiseTaskLists>
 80039f0:	e00d      	b.n	8003a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039f2:	4b26      	ldr	r3, [pc, #152]	@ (8003a8c <prvAddNewTaskToReadyList+0xcc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039fa:	4b23      	ldr	r3, [pc, #140]	@ (8003a88 <prvAddNewTaskToReadyList+0xc8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d802      	bhi.n	8003a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a08:	4a1f      	ldr	r2, [pc, #124]	@ (8003a88 <prvAddNewTaskToReadyList+0xc8>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <prvAddNewTaskToReadyList+0xd0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	4a1e      	ldr	r2, [pc, #120]	@ (8003a90 <prvAddNewTaskToReadyList+0xd0>)
 8003a16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a18:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <prvAddNewTaskToReadyList+0xd0>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <prvAddNewTaskToReadyList+0xd4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d903      	bls.n	8003a34 <prvAddNewTaskToReadyList+0x74>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <prvAddNewTaskToReadyList+0xd4>)
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <prvAddNewTaskToReadyList+0xd8>)
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7ff f901 	bl	8002c52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a50:	f001 fb24 	bl	800509c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a54:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <prvAddNewTaskToReadyList+0xcc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <prvAddNewTaskToReadyList+0xc8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d207      	bcs.n	8003a7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <prvAddNewTaskToReadyList+0xdc>)
 8003a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000cf8 	.word	0x20000cf8
 8003a88:	20000824 	.word	0x20000824
 8003a8c:	20000d04 	.word	0x20000d04
 8003a90:	20000d14 	.word	0x20000d14
 8003a94:	20000d00 	.word	0x20000d00
 8003a98:	20000828 	.word	0x20000828
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003aa8:	f001 fac6 	bl	8005038 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <vTaskDelete+0x18>
 8003ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b68 <vTaskDelete+0xc8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	e000      	b.n	8003aba <vTaskDelete+0x1a>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff f923 	bl	8002d0c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d004      	beq.n	8003ad8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff f91a 	bl	8002d0c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003ad8:	4b24      	ldr	r3, [pc, #144]	@ (8003b6c <vTaskDelete+0xcc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a23      	ldr	r2, [pc, #140]	@ (8003b6c <vTaskDelete+0xcc>)
 8003ae0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003ae2:	4b21      	ldr	r3, [pc, #132]	@ (8003b68 <vTaskDelete+0xc8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10b      	bne.n	8003b04 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	481f      	ldr	r0, [pc, #124]	@ (8003b70 <vTaskDelete+0xd0>)
 8003af4:	f7ff f8ad 	bl	8002c52 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b74 <vTaskDelete+0xd4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <vTaskDelete+0xd4>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e009      	b.n	8003b18 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003b04:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <vTaskDelete+0xd8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <vTaskDelete+0xd8>)
 8003b0c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fcd6 	bl	80044c0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003b14:	f000 fd04 	bl	8004520 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003b18:	f001 fac0 	bl	800509c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003b1c:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <vTaskDelete+0xdc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01c      	beq.n	8003b5e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003b24:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <vTaskDelete+0xc8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d117      	bne.n	8003b5e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003b2e:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <vTaskDelete+0xe0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <vTaskDelete+0xae>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	60bb      	str	r3, [r7, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <vTaskDelete+0xe4>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000824 	.word	0x20000824
 8003b6c:	20000d14 	.word	0x20000d14
 8003b70:	20000ccc 	.word	0x20000ccc
 8003b74:	20000ce0 	.word	0x20000ce0
 8003b78:	20000cf8 	.word	0x20000cf8
 8003b7c:	20000d04 	.word	0x20000d04
 8003b80:	20000d20 	.word	0x20000d20
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d018      	beq.n	8003bcc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b9a:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <vTaskDelay+0x64>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <vTaskDelay+0x32>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	60bb      	str	r3, [r7, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	e7fd      	b.n	8003bb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bba:	f000 f8eb 	bl	8003d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fd5b 	bl	800467c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bc6:	f000 f8f3 	bl	8003db0 <xTaskResumeAll>
 8003bca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003bd2:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <vTaskDelay+0x68>)
 8003bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000d20 	.word	0x20000d20
 8003bf0:	e000ed04 	.word	0xe000ed04

08003bf4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <eTaskGetState+0x2a>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	f383 8811 	msr	BASEPRI, r3
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	60bb      	str	r3, [r7, #8]
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	e7fd      	b.n	8003c1a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8003c1e:	4b24      	ldr	r3, [pc, #144]	@ (8003cb0 <eTaskGetState+0xbc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d102      	bne.n	8003c2e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e03a      	b.n	8003ca4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8003c2e:	f001 fa03 	bl	8005038 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <eTaskGetState+0xc0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <eTaskGetState+0xc4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8003c44:	f001 fa2a 	bl	800509c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d003      	beq.n	8003c58 <eTaskGetState+0x64>
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d102      	bne.n	8003c5e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e022      	b.n	8003ca4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <eTaskGetState+0xc8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d112      	bne.n	8003c8c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e011      	b.n	8003ca4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8003c80:	2303      	movs	r3, #3
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e00e      	b.n	8003ca4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003c86:	2302      	movs	r3, #2
 8003c88:	77fb      	strb	r3, [r7, #31]
 8003c8a:	e00b      	b.n	8003ca4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc0 <eTaskGetState+0xcc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d002      	beq.n	8003c9a <eTaskGetState+0xa6>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003c9a:	2304      	movs	r3, #4
 8003c9c:	77fb      	strb	r3, [r7, #31]
 8003c9e:	e001      	b.n	8003ca4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003ca4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000824 	.word	0x20000824
 8003cb4:	20000cb0 	.word	0x20000cb0
 8003cb8:	20000cb4 	.word	0x20000cb4
 8003cbc:	20000ce4 	.word	0x20000ce4
 8003cc0:	20000ccc 	.word	0x20000ccc

08003cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cd2:	463a      	mov	r2, r7
 8003cd4:	1d39      	adds	r1, r7, #4
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe ff58 	bl	8002b90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <vTaskStartScheduler+0xb8>)
 8003cf4:	4822      	ldr	r0, [pc, #136]	@ (8003d80 <vTaskStartScheduler+0xbc>)
 8003cf6:	f7ff fd2d 	bl	8003754 <xTaskCreateStatic>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <vTaskStartScheduler+0xc0>)
 8003cfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d00:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <vTaskStartScheduler+0xc0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e001      	b.n	8003d12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d18:	f000 fd04 	bl	8004724 <xTimerCreateTimerTask>
 8003d1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d116      	bne.n	8003d52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	613b      	str	r3, [r7, #16]
}
 8003d36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <vTaskStartScheduler+0xc4>)
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <vTaskStartScheduler+0xc8>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <vTaskStartScheduler+0xcc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d4c:	f001 f8d0 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d50:	e00f      	b.n	8003d72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d58:	d10b      	bne.n	8003d72 <vTaskStartScheduler+0xae>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <vTaskStartScheduler+0xaa>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08006004 	.word	0x08006004
 8003d80:	080043b5 	.word	0x080043b5
 8003d84:	20000d1c 	.word	0x20000d1c
 8003d88:	20000d18 	.word	0x20000d18
 8003d8c:	20000d04 	.word	0x20000d04
 8003d90:	20000cfc 	.word	0x20000cfc

08003d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <vTaskSuspendAll+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a03      	ldr	r2, [pc, #12]	@ (8003dac <vTaskSuspendAll+0x18>)
 8003da0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	20000d20 	.word	0x20000d20

08003db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dbe:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <xTaskResumeAll+0x2e>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	603b      	str	r3, [r7, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dde:	f001 f92b 	bl	8005038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003de2:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a37      	ldr	r2, [pc, #220]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dec:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d162      	bne.n	8003eba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003df4:	4b35      	ldr	r3, [pc, #212]	@ (8003ecc <xTaskResumeAll+0x11c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05e      	beq.n	8003eba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfc:	e02f      	b.n	8003e5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfe:	4b34      	ldr	r3, [pc, #208]	@ (8003ed0 <xTaskResumeAll+0x120>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fe ff7e 	bl	8002d0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fe ff79 	bl	8002d0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <xTaskResumeAll+0x124>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d903      	bls.n	8003e2e <xTaskResumeAll+0x7e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <xTaskResumeAll+0x124>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <xTaskResumeAll+0x128>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe ff04 	bl	8002c52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <xTaskResumeAll+0x12c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e58:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <xTaskResumeAll+0x120>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1cb      	bne.n	8003dfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e6c:	f000 fb58 	bl	8004520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e70:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee4 <xTaskResumeAll+0x134>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e7c:	f000 f846 	bl	8003f0c <xTaskIncrementTick>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e86:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f1      	bne.n	8003e7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <xTaskResumeAll+0x134>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <xTaskResumeAll+0x138>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f001 f8ef 	bl	800509c <vPortExitCritical>

	return xAlreadyYielded;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000d20 	.word	0x20000d20
 8003ecc:	20000cf8 	.word	0x20000cf8
 8003ed0:	20000cb8 	.word	0x20000cb8
 8003ed4:	20000d00 	.word	0x20000d00
 8003ed8:	20000828 	.word	0x20000828
 8003edc:	20000824 	.word	0x20000824
 8003ee0:	20000d0c 	.word	0x20000d0c
 8003ee4:	20000d08 	.word	0x20000d08
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <xTaskGetTickCount+0x1c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000cfc 	.word	0x20000cfc

08003f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f16:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <xTaskIncrementTick+0x148>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8090 	bne.w	8004040 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f20:	4b4d      	ldr	r3, [pc, #308]	@ (8004058 <xTaskIncrementTick+0x14c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f28:	4a4b      	ldr	r2, [pc, #300]	@ (8004058 <xTaskIncrementTick+0x14c>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d121      	bne.n	8003f78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f34:	4b49      	ldr	r3, [pc, #292]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	603b      	str	r3, [r7, #0]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <xTaskIncrementTick+0x46>
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <xTaskIncrementTick+0x154>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3e      	ldr	r2, [pc, #248]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4a3e      	ldr	r2, [pc, #248]	@ (8004060 <xTaskIncrementTick+0x154>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004064 <xTaskIncrementTick+0x158>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a3c      	ldr	r2, [pc, #240]	@ (8004064 <xTaskIncrementTick+0x158>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	f000 fad4 	bl	8004520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d349      	bcc.n	8004016 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	4b36      	ldr	r3, [pc, #216]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f92:	601a      	str	r2, [r3, #0]
					break;
 8003f94:	e03f      	b.n	8004016 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f96:	4b31      	ldr	r3, [pc, #196]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d203      	bcs.n	8003fb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fae:	4a2e      	ldr	r2, [pc, #184]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fb4:	e02f      	b.n	8004016 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fea6 	bl	8002d0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fe9d 	bl	8002d0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	4b25      	ldr	r3, [pc, #148]	@ (800406c <xTaskIncrementTick+0x160>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <xTaskIncrementTick+0xda>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <xTaskIncrementTick+0x160>)
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <xTaskIncrementTick+0x164>)
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fe fe28 	bl	8002c52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004006:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <xTaskIncrementTick+0x168>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	429a      	cmp	r2, r3
 800400e:	d3b8      	bcc.n	8003f82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004014:	e7b5      	b.n	8003f82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004016:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <xTaskIncrementTick+0x168>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4914      	ldr	r1, [pc, #80]	@ (8004070 <xTaskIncrementTick+0x164>)
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d901      	bls.n	8004032 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800402e:	2301      	movs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004032:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <xTaskIncrementTick+0x16c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e004      	b.n	800404a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <xTaskIncrementTick+0x170>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a0d      	ldr	r2, [pc, #52]	@ (800407c <xTaskIncrementTick+0x170>)
 8004048:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800404a:	697b      	ldr	r3, [r7, #20]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000d20 	.word	0x20000d20
 8004058:	20000cfc 	.word	0x20000cfc
 800405c:	20000cb0 	.word	0x20000cb0
 8004060:	20000cb4 	.word	0x20000cb4
 8004064:	20000d10 	.word	0x20000d10
 8004068:	20000d18 	.word	0x20000d18
 800406c:	20000d00 	.word	0x20000d00
 8004070:	20000828 	.word	0x20000828
 8004074:	20000824 	.word	0x20000824
 8004078:	20000d0c 	.word	0x20000d0c
 800407c:	20000d08 	.word	0x20000d08

08004080 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004086:	4b28      	ldr	r3, [pc, #160]	@ (8004128 <vTaskSwitchContext+0xa8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800408e:	4b27      	ldr	r3, [pc, #156]	@ (800412c <vTaskSwitchContext+0xac>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004094:	e042      	b.n	800411c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004096:	4b25      	ldr	r3, [pc, #148]	@ (800412c <vTaskSwitchContext+0xac>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <vTaskSwitchContext+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e011      	b.n	80040c8 <vTaskSwitchContext+0x48>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	607b      	str	r3, [r7, #4]
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	e7fd      	b.n	80040be <vTaskSwitchContext+0x3e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	491a      	ldr	r1, [pc, #104]	@ (8004134 <vTaskSwitchContext+0xb4>)
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0e3      	beq.n	80040a4 <vTaskSwitchContext+0x24>
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <vTaskSwitchContext+0xb4>)
 80040e8:	4413      	add	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3308      	adds	r3, #8
 80040fe:	429a      	cmp	r2, r3
 8004100:	d104      	bne.n	800410c <vTaskSwitchContext+0x8c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <vTaskSwitchContext+0xb8>)
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4a06      	ldr	r2, [pc, #24]	@ (8004130 <vTaskSwitchContext+0xb0>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000d20 	.word	0x20000d20
 800412c:	20000d0c 	.word	0x20000d0c
 8004130:	20000d00 	.word	0x20000d00
 8004134:	20000828 	.word	0x20000828
 8004138:	20000824 	.word	0x20000824

0800413c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004164:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <vTaskPlaceOnEventList+0x48>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3318      	adds	r3, #24
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fe fd94 	bl	8002c9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004172:	2101      	movs	r1, #1
 8004174:	6838      	ldr	r0, [r7, #0]
 8004176:	f000 fa81 	bl	800467c <prvAddCurrentTaskToDelayedList>
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000824 	.word	0x20000824

08004188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	617b      	str	r3, [r7, #20]
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	e7fd      	b.n	80041ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041b2:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <vTaskPlaceOnEventListRestricted+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4619      	mov	r1, r3
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7fe fd49 	bl	8002c52 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68b8      	ldr	r0, [r7, #8]
 80041d0:	f000 fa54 	bl	800467c <prvAddCurrentTaskToDelayedList>
	}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000824 	.word	0x20000824

080041e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60fb      	str	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fd7a 	bl	8002d0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004218:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <xTaskRemoveFromEventList+0xb0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11d      	bne.n	800425c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fd71 	bl	8002d0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422e:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <xTaskRemoveFromEventList+0xb4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d903      	bls.n	800423e <xTaskRemoveFromEventList+0x5e>
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <xTaskRemoveFromEventList+0xb4>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <xTaskRemoveFromEventList+0xb8>)
 800424c:	441a      	add	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe fcfc 	bl	8002c52 <vListInsertEnd>
 800425a:	e005      	b.n	8004268 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3318      	adds	r3, #24
 8004260:	4619      	mov	r1, r3
 8004262:	480e      	ldr	r0, [pc, #56]	@ (800429c <xTaskRemoveFromEventList+0xbc>)
 8004264:	f7fe fcf5 	bl	8002c52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <xTaskRemoveFromEventList+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	429a      	cmp	r2, r3
 8004274:	d905      	bls.n	8004282 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800427a:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <xTaskRemoveFromEventList+0xc4>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e001      	b.n	8004286 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004286:	697b      	ldr	r3, [r7, #20]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000d20 	.word	0x20000d20
 8004294:	20000d00 	.word	0x20000d00
 8004298:	20000828 	.word	0x20000828
 800429c:	20000cb8 	.word	0x20000cb8
 80042a0:	20000824 	.word	0x20000824
 80042a4:	20000d0c 	.word	0x20000d0c

080042a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <vTaskInternalSetTimeOutState+0x24>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <vTaskInternalSetTimeOutState+0x28>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	20000d10 	.word	0x20000d10
 80042d0:	20000cfc 	.word	0x20000cfc

080042d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	60fb      	str	r3, [r7, #12]
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	e7fd      	b.n	8004316 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800431a:	f000 fe8d 	bl	8005038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800431e:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <xTaskCheckForTimeOut+0xc0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004336:	d102      	bne.n	800433e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004338:	2300      	movs	r3, #0
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e023      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <xTaskCheckForTimeOut+0xc4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d007      	beq.n	800435a <xTaskCheckForTimeOut+0x86>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e015      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	d20b      	bcs.n	800437c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff99 	bl	80042a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e004      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004386:	f000 fe89 	bl	800509c <vPortExitCritical>

	return xReturn;
 800438a:	69fb      	ldr	r3, [r7, #28]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000cfc 	.word	0x20000cfc
 8004398:	20000d10 	.word	0x20000d10

0800439c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <vTaskMissedYield+0x14>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000d0c 	.word	0x20000d0c

080043b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043bc:	f000 f852 	bl	8004464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <prvIdleTask+0x28>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d9f9      	bls.n	80043bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <prvIdleTask+0x2c>)
 80043ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043d8:	e7f0      	b.n	80043bc <prvIdleTask+0x8>
 80043da:	bf00      	nop
 80043dc:	20000828 	.word	0x20000828
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	e00c      	b.n	800440a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <prvInitialiseTaskLists+0x60>)
 80043fc:	4413      	add	r3, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fbfa 	bl	8002bf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3301      	adds	r3, #1
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b37      	cmp	r3, #55	@ 0x37
 800440e:	d9ef      	bls.n	80043f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004410:	480d      	ldr	r0, [pc, #52]	@ (8004448 <prvInitialiseTaskLists+0x64>)
 8004412:	f7fe fbf1 	bl	8002bf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004416:	480d      	ldr	r0, [pc, #52]	@ (800444c <prvInitialiseTaskLists+0x68>)
 8004418:	f7fe fbee 	bl	8002bf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800441c:	480c      	ldr	r0, [pc, #48]	@ (8004450 <prvInitialiseTaskLists+0x6c>)
 800441e:	f7fe fbeb 	bl	8002bf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004422:	480c      	ldr	r0, [pc, #48]	@ (8004454 <prvInitialiseTaskLists+0x70>)
 8004424:	f7fe fbe8 	bl	8002bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004428:	480b      	ldr	r0, [pc, #44]	@ (8004458 <prvInitialiseTaskLists+0x74>)
 800442a:	f7fe fbe5 	bl	8002bf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800442e:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <prvInitialiseTaskLists+0x78>)
 8004430:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <prvInitialiseTaskLists+0x64>)
 8004432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004434:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <prvInitialiseTaskLists+0x7c>)
 8004436:	4a05      	ldr	r2, [pc, #20]	@ (800444c <prvInitialiseTaskLists+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000828 	.word	0x20000828
 8004448:	20000c88 	.word	0x20000c88
 800444c:	20000c9c 	.word	0x20000c9c
 8004450:	20000cb8 	.word	0x20000cb8
 8004454:	20000ccc 	.word	0x20000ccc
 8004458:	20000ce4 	.word	0x20000ce4
 800445c:	20000cb0 	.word	0x20000cb0
 8004460:	20000cb4 	.word	0x20000cb4

08004464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446a:	e019      	b.n	80044a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800446c:	f000 fde4 	bl	8005038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <prvCheckTasksWaitingTermination+0x50>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fc45 	bl	8002d0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <prvCheckTasksWaitingTermination+0x54>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	4a0b      	ldr	r2, [pc, #44]	@ (80044b8 <prvCheckTasksWaitingTermination+0x54>)
 800448a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 8004494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004496:	f000 fe01 	bl	800509c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f810 	bl	80044c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e1      	bne.n	800446c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000ccc 	.word	0x20000ccc
 80044b8:	20000cf8 	.word	0x20000cf8
 80044bc:	20000ce0 	.word	0x20000ce0

080044c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ff9e 	bl	8005418 <vPortFree>
				vPortFree( pxTCB );
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 ff9b 	bl	8005418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044e2:	e019      	b.n	8004518 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d103      	bne.n	80044f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 ff92 	bl	8005418 <vPortFree>
	}
 80044f4:	e010      	b.n	8004518 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d00b      	beq.n	8004518 <prvDeleteTCB+0x58>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <prvDeleteTCB+0x54>
	}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <prvResetNextTaskUnblockTime+0x38>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvResetNextTaskUnblockTime+0x3c>)
 8004532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004538:	e008      	b.n	800454c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453a:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <prvResetNextTaskUnblockTime+0x38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a04      	ldr	r2, [pc, #16]	@ (800455c <prvResetNextTaskUnblockTime+0x3c>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000cb0 	.word	0x20000cb0
 800455c:	20000d18 	.word	0x20000d18

08004560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <xTaskGetSchedulerState+0x34>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800456e:	2301      	movs	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	e008      	b.n	8004586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <xTaskGetSchedulerState+0x38>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800457c:	2302      	movs	r3, #2
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e001      	b.n	8004586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004586:	687b      	ldr	r3, [r7, #4]
	}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000d04 	.word	0x20000d04
 8004598:	20000d20 	.word	0x20000d20

0800459c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d058      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <xTaskPriorityDisinherit+0xd4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d00b      	beq.n	80045d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004606:	429a      	cmp	r2, r3
 8004608:	d02c      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d128      	bne.n	8004664 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fb78 	bl	8002d0c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d903      	bls.n	8004644 <xTaskPriorityDisinherit+0xa8>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	4a0c      	ldr	r2, [pc, #48]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <xTaskPriorityDisinherit+0xdc>)
 8004652:	441a      	add	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe faf9 	bl	8002c52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000824 	.word	0x20000824
 8004674:	20000d00 	.word	0x20000d00
 8004678:	20000828 	.word	0x20000828

0800467c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004686:	4b21      	ldr	r3, [pc, #132]	@ (800470c <prvAddCurrentTaskToDelayedList+0x90>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468c:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fb3a 	bl	8002d0c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800469e:	d10a      	bne.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4819      	ldr	r0, [pc, #100]	@ (8004714 <prvAddCurrentTaskToDelayedList+0x98>)
 80046b0:	f7fe facf 	bl	8002c52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046b4:	e026      	b.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046be:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d209      	bcs.n	80046e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7fe fadd 	bl	8002c9a <vListInsert>
}
 80046e0:	e010      	b.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e2:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <prvAddCurrentTaskToDelayedList+0xa0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fe fad3 	bl	8002c9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d202      	bcs.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046fe:	4a08      	ldr	r2, [pc, #32]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000cfc 	.word	0x20000cfc
 8004710:	20000824 	.word	0x20000824
 8004714:	20000ce4 	.word	0x20000ce4
 8004718:	20000cb4 	.word	0x20000cb4
 800471c:	20000cb0 	.word	0x20000cb0
 8004720:	20000d18 	.word	0x20000d18

08004724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	@ 0x28
 8004728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800472e:	f000 fb13 	bl	8004d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004732:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <xTimerCreateTimerTask+0x84>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004742:	1d3a      	adds	r2, r7, #4
 8004744:	f107 0108 	add.w	r1, r7, #8
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fa39 	bl	8002bc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	9202      	str	r2, [sp, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	2302      	movs	r3, #2
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	460a      	mov	r2, r1
 8004764:	4911      	ldr	r1, [pc, #68]	@ (80047ac <xTimerCreateTimerTask+0x88>)
 8004766:	4812      	ldr	r0, [pc, #72]	@ (80047b0 <xTimerCreateTimerTask+0x8c>)
 8004768:	f7fe fff4 	bl	8003754 <xTaskCreateStatic>
 800476c:	4603      	mov	r3, r0
 800476e:	4a11      	ldr	r2, [pc, #68]	@ (80047b4 <xTimerCreateTimerTask+0x90>)
 8004770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <xTimerCreateTimerTask+0x90>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000d54 	.word	0x20000d54
 80047ac:	0800600c 	.word	0x0800600c
 80047b0:	080048f1 	.word	0x080048f1
 80047b4:	20000d58 	.word	0x20000d58

080047b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047e8:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <xTimerGenericCommand+0x98>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02a      	beq.n	8004846 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b05      	cmp	r3, #5
 8004800:	dc18      	bgt.n	8004834 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004802:	f7ff fead 	bl	8004560 <xTaskGetSchedulerState>
 8004806:	4603      	mov	r3, r0
 8004808:	2b02      	cmp	r3, #2
 800480a:	d109      	bne.n	8004820 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <xTimerGenericCommand+0x98>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	f107 0110 	add.w	r1, r7, #16
 8004814:	2300      	movs	r3, #0
 8004816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004818:	f7fe fbac 	bl	8002f74 <xQueueGenericSend>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24
 800481e:	e012      	b.n	8004846 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <xTimerGenericCommand+0x98>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f107 0110 	add.w	r1, r7, #16
 8004828:	2300      	movs	r3, #0
 800482a:	2200      	movs	r2, #0
 800482c:	f7fe fba2 	bl	8002f74 <xQueueGenericSend>
 8004830:	6278      	str	r0, [r7, #36]	@ 0x24
 8004832:	e008      	b.n	8004846 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004834:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <xTimerGenericCommand+0x98>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f107 0110 	add.w	r1, r7, #16
 800483c:	2300      	movs	r3, #0
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	f7fe fc9a 	bl	8003178 <xQueueGenericSendFromISR>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	@ 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000d54 	.word	0x20000d54

08004854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <prvProcessExpiredTimer+0x98>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe fa4d 	bl	8002d0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d023      	beq.n	80048c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	18d1      	adds	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f000 f8d5 	bl	8004a3c <prvInsertTimerInActiveList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	2100      	movs	r1, #0
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff ff88 	bl	80047b8 <xTimerGenericCommand>
 80048a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d114      	bne.n	80048da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	4798      	blx	r3
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000d4c 	.word	0x20000d4c

080048f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f859 	bl	80049b4 <prvGetNextExpireTime>
 8004902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4619      	mov	r1, r3
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f805 	bl	8004918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800490e:	f000 f8d7 	bl	8004ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004912:	bf00      	nop
 8004914:	e7f0      	b.n	80048f8 <prvTimerTask+0x8>
	...

08004918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004922:	f7ff fa37 	bl	8003d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f866 	bl	80049fc <prvSampleTimeNow>
 8004930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d130      	bne.n	800499a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d806      	bhi.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004946:	f7ff fa33 	bl	8003db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff81 	bl	8004854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004952:	e024      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800495a:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <prvProcessTimerOrBlockTask+0x90>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <prvProcessTimerOrBlockTask+0x50>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <prvProcessTimerOrBlockTask+0x52>
 8004968:	2300      	movs	r3, #0
 800496a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <prvProcessTimerOrBlockTask+0x94>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	f7fe feb7 	bl	80036ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800497e:	f7ff fa17 	bl	8003db0 <xTaskResumeAll>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004988:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <prvProcessTimerOrBlockTask+0x98>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
}
 8004998:	e001      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800499a:	f7ff fa09 	bl	8003db0 <xTaskResumeAll>
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000d50 	.word	0x20000d50
 80049ac:	20000d54 	.word	0x20000d54
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <prvGetNextExpireTime+0x44>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <prvGetNextExpireTime+0x16>
 80049c6:	2201      	movs	r2, #1
 80049c8:	e000      	b.n	80049cc <prvGetNextExpireTime+0x18>
 80049ca:	2200      	movs	r2, #0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d8:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <prvGetNextExpireTime+0x44>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e001      	b.n	80049e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000d4c 	.word	0x20000d4c

080049fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a04:	f7ff fa72 	bl	8003eec <xTaskGetTickCount>
 8004a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <prvSampleTimeNow+0x3c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d205      	bcs.n	8004a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a14:	f000 f93a 	bl	8004c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a26:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <prvSampleTimeNow+0x3c>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000d5c 	.word	0x20000d5c

08004a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d812      	bhi.n	8004a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e01b      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <prvInsertTimerInActiveList+0x7c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7fe f90a 	bl	8002c9a <vListInsert>
 8004a86:	e012      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d206      	bcs.n	8004a9e <prvInsertTimerInActiveList+0x62>
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e007      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <prvInsertTimerInActiveList+0x80>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe f8f6 	bl	8002c9a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aae:	697b      	ldr	r3, [r7, #20]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000d50 	.word	0x20000d50
 8004abc:	20000d4c 	.word	0x20000d4c

08004ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	@ 0x38
 8004ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac6:	e0ce      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da19      	bge.n	8004b02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61fb      	str	r3, [r7, #28]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	6850      	ldr	r0, [r2, #4]
 8004afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f2c0 80ae 	blt.w	8004c66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f8f6 	bl	8002d0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b20:	463b      	mov	r3, r7
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff6a 	bl	80049fc <prvSampleTimeNow>
 8004b28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	f200 8097 	bhi.w	8004c60 <prvProcessReceivedCommands+0x1a0>
 8004b32:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <prvProcessReceivedCommands+0x78>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004bd7 	.word	0x08004bd7
 8004b48:	08004beb 	.word	0x08004beb
 8004b4c:	08004c37 	.word	0x08004c37
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004bd7 	.word	0x08004bd7
 8004b5c:	08004beb 	.word	0x08004beb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f7ff ff5c 	bl	8004a3c <prvInsertTimerInActiveList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06c      	beq.n	8004c64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d061      	beq.n	8004c64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	441a      	add	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb2:	f7ff fe01 	bl	80047b8 <xTimerGenericCommand>
 8004bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d152      	bne.n	8004c64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61bb      	str	r3, [r7, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004be8:	e03d      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	617b      	str	r3, [r7, #20]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c30:	f7ff ff04 	bl	8004a3c <prvInsertTimerInActiveList>
					break;
 8004c34:	e017      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c46:	f000 fbe7 	bl	8005418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c4a:	e00c      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c5e:	e002      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c66:	4b08      	ldr	r3, [pc, #32]	@ (8004c88 <prvProcessReceivedCommands+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1d39      	adds	r1, r7, #4
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fb20 	bl	80032b4 <xQueueReceive>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f47f af26 	bne.w	8004ac8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3730      	adds	r7, #48	@ 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000d54 	.word	0x20000d54

08004c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c92:	e049      	b.n	8004d28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c94:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe f82d 	bl	8002d0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02f      	beq.n	8004d28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90e      	bls.n	8004cf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fd ffd2 	bl	8002c9a <vListInsert>
 8004cf6:	e017      	b.n	8004d28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	2100      	movs	r1, #0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fd58 	bl	80047b8 <xTimerGenericCommand>
 8004d08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	603b      	str	r3, [r7, #0]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1b0      	bne.n	8004c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <prvSwitchTimerLists+0xc8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <prvSwitchTimerLists+0xc8>)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6013      	str	r3, [r2, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000d4c 	.word	0x20000d4c
 8004d54:	20000d50 	.word	0x20000d50

08004d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d5e:	f000 f96b 	bl	8005038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d120      	bne.n	8004dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d6a:	4814      	ldr	r0, [pc, #80]	@ (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d6c:	f7fd ff44 	bl	8002bf8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d70:	4813      	ldr	r0, [pc, #76]	@ (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d72:	f7fd ff41 	bl	8002bf8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <prvCheckForValidListAndQueue+0x6c>)
 8004d78:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <prvCheckForValidListAndQueue+0x70>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	@ (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d82:	2300      	movs	r3, #0
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b11      	ldr	r3, [pc, #68]	@ (8004dcc <prvCheckForValidListAndQueue+0x74>)
 8004d88:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <prvCheckForValidListAndQueue+0x78>)
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fe f851 	bl	8002e34 <xQueueGenericCreateStatic>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d98:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	490b      	ldr	r1, [pc, #44]	@ (8004dd4 <prvCheckForValidListAndQueue+0x7c>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fc76 	bl	8003698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f000 f976 	bl	800509c <vPortExitCritical>
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000d54 	.word	0x20000d54
 8004dbc:	20000d24 	.word	0x20000d24
 8004dc0:	20000d38 	.word	0x20000d38
 8004dc4:	20000d4c 	.word	0x20000d4c
 8004dc8:	20000d50 	.word	0x20000d50
 8004dcc:	20000e00 	.word	0x20000e00
 8004dd0:	20000d60 	.word	0x20000d60
 8004dd4:	08006014 	.word	0x08006014

08004dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b04      	subs	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e08:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <pxPortInitialiseStack+0x64>)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b14      	subs	r3, #20
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f06f 0202 	mvn.w	r2, #2
 8004e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b20      	subs	r3, #32
 8004e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	08004e41 	.word	0x08004e41

08004e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <prvTaskExitError+0x58>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e52:	d00b      	beq.n	8004e6c <prvTaskExitError+0x2c>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <prvTaskExitError+0x28>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60bb      	str	r3, [r7, #8]
}
 8004e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e80:	bf00      	nop
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0fc      	beq.n	8004e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b47      	ldr	r3, [pc, #284]	@ (8005014 <xPortStartScheduler+0x124>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <xPortStartScheduler+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10b      	bne.n	8004f18 <xPortStartScheduler+0x28>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f18:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <xPortStartScheduler+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <xPortStartScheduler+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10b      	bne.n	8004f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3a:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xPortStartScheduler+0x130>)
 8004f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <xPortStartScheduler+0x134>)
 8004f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f64:	2207      	movs	r2, #7
 8004f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f68:	e009      	b.n	8004f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d0ef      	beq.n	8004f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <xPortStartScheduler+0xbe>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fae:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fcc:	4b17      	ldr	r3, [pc, #92]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe4:	f000 f8da 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <xPortStartScheduler+0x140>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fee:	f000 f8f9 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ffe:	f7ff ff63 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005002:	f7ff f83d 	bl	8004080 <vTaskSwitchContext>
	prvTaskExitError();
 8005006:	f7ff ff1b 	bl	8004e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed00 	.word	0xe000ed00
 8005018:	410fc271 	.word	0x410fc271
 800501c:	410fc270 	.word	0x410fc270
 8005020:	e000e400 	.word	0xe000e400
 8005024:	20000e50 	.word	0x20000e50
 8005028:	20000e54 	.word	0x20000e54
 800502c:	e000ed20 	.word	0xe000ed20
 8005030:	2000000c 	.word	0x2000000c
 8005034:	e000ef34 	.word	0xe000ef34

08005038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <vPortEnterCritical+0x5c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <vPortEnterCritical+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vPortEnterCritical+0x4e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortEnterCritical+0x4a>
	}
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <vPortExitCritical+0x26>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <vPortExitCritical+0x50>)
 80050ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <vPortExitCritical+0x50>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <vPortExitCritical+0x44>
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7fe ffae 	bl	8004080 <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7fe fecb 	bl	8003f0c <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <xPortSysTickHandler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d915      	bls.n	8005236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <vPortValidateInterruptPriority+0x74>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <vPortValidateInterruptPriority+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20b      	bcs.n	8005236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005236:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <vPortValidateInterruptPriority+0x7c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <vPortValidateInterruptPriority+0x80>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90b      	bls.n	800525e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	603b      	str	r3, [r7, #0]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vPortValidateInterruptPriority+0x62>
	}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e3f0 	.word	0xe000e3f0
 8005270:	20000e50 	.word	0x20000e50
 8005274:	e000ed0c 	.word	0xe000ed0c
 8005278:	20000e54 	.word	0x20000e54

0800527c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005288:	f7fe fd84 	bl	8003d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <pvPortMalloc+0x184>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005294:	f000 f924 	bl	80054e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005298:	4b5a      	ldr	r3, [pc, #360]	@ (8005404 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8095 	bne.w	80053d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01e      	beq.n	80052ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052ac:	2208      	movs	r2, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <pvPortMalloc+0x6e>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	617b      	str	r3, [r7, #20]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06f      	beq.n	80053d0 <pvPortMalloc+0x154>
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <pvPortMalloc+0x18c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d86a      	bhi.n	80053d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052fa:	4b44      	ldr	r3, [pc, #272]	@ (800540c <pvPortMalloc+0x190>)
 80052fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052fe:	4b43      	ldr	r3, [pc, #268]	@ (800540c <pvPortMalloc+0x190>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005304:	e004      	b.n	8005310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <pvPortMalloc+0xa6>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f1      	bne.n	8005306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005322:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <pvPortMalloc+0x184>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	d051      	beq.n	80053d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2208      	movs	r2, #8
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	2308      	movs	r3, #8
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d920      	bls.n	8005390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <pvPortMalloc+0xfc>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 f90a 	bl	80055a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <pvPortMalloc+0x18c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <pvPortMalloc+0x18c>)
 800539c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539e:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <pvPortMalloc+0x18c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <pvPortMalloc+0x194>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <pvPortMalloc+0x18c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <pvPortMalloc+0x194>)
 80053b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <pvPortMalloc+0x188>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <pvPortMalloc+0x198>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <pvPortMalloc+0x198>)
 80053ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053d0:	f7fe fcee 	bl	8003db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <pvPortMalloc+0x17a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60fb      	str	r3, [r7, #12]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <pvPortMalloc+0x176>
	return pvReturn;
 80053f6:	69fb      	ldr	r3, [r7, #28]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20004a60 	.word	0x20004a60
 8005404:	20004a74 	.word	0x20004a74
 8005408:	20004a64 	.word	0x20004a64
 800540c:	20004a58 	.word	0x20004a58
 8005410:	20004a68 	.word	0x20004a68
 8005414:	20004a6c 	.word	0x20004a6c

08005418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d04f      	beq.n	80054ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800542a:	2308      	movs	r3, #8
 800542c:	425b      	negs	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <vPortFree+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <vPortFree+0x46>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <vPortFree+0x66>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <vPortFree+0xbc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01e      	beq.n	80054ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <vPortFree+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a4:	f7fe fc76 	bl	8003d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vPortFree+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <vPortFree+0xc0>)
 80054b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054b6:	6938      	ldr	r0, [r7, #16]
 80054b8:	f000 f874 	bl	80055a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <vPortFree+0xc4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a06      	ldr	r2, [pc, #24]	@ (80054dc <vPortFree+0xc4>)
 80054c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054c6:	f7fe fc73 	bl	8003db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20004a74 	.word	0x20004a74
 80054d8:	20004a64 	.word	0x20004a64
 80054dc:	20004a70 	.word	0x20004a70

080054e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054ec:	4b27      	ldr	r3, [pc, #156]	@ (800558c <prvHeapInit+0xac>)
 80054ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <prvHeapInit+0xac>)
 8005510:	4413      	add	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <prvHeapInit+0xb0>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800551e:	4b1c      	ldr	r3, [pc, #112]	@ (8005590 <prvHeapInit+0xb0>)
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800552c:	2208      	movs	r2, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <prvHeapInit+0xb4>)
 8005540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <prvHeapInit+0xb4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800554a:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <prvHeapInit+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <prvHeapInit+0xb4>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <prvHeapInit+0xb8>)
 800556e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a09      	ldr	r2, [pc, #36]	@ (800559c <prvHeapInit+0xbc>)
 8005576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <prvHeapInit+0xc0>)
 800557a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000e58 	.word	0x20000e58
 8005590:	20004a58 	.word	0x20004a58
 8005594:	20004a60 	.word	0x20004a60
 8005598:	20004a68 	.word	0x20004a68
 800559c:	20004a64 	.word	0x20004a64
 80055a0:	20004a74 	.word	0x20004a74

080055a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055ac:	4b28      	ldr	r3, [pc, #160]	@ (8005650 <prvInsertBlockIntoFreeList+0xac>)
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e002      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x14>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d8f7      	bhi.n	80055b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d108      	bne.n	80055e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d118      	bne.n	800562c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d00d      	beq.n	8005622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e008      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e003      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d002      	beq.n	8005642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20004a58 	.word	0x20004a58
 8005654:	20004a60 	.word	0x20004a60

08005658 <std>:
 8005658:	2300      	movs	r3, #0
 800565a:	b510      	push	{r4, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	e9c0 3300 	strd	r3, r3, [r0]
 8005662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	8181      	strh	r1, [r0, #12]
 800566a:	6643      	str	r3, [r0, #100]	@ 0x64
 800566c:	81c2      	strh	r2, [r0, #14]
 800566e:	6183      	str	r3, [r0, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	2208      	movs	r2, #8
 8005674:	305c      	adds	r0, #92	@ 0x5c
 8005676:	f000 f90f 	bl	8005898 <memset>
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x58>)
 800567c:	6263      	str	r3, [r4, #36]	@ 0x24
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x5c>)
 8005680:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x60>)
 8005684:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x64>)
 8005688:	6323      	str	r3, [r4, #48]	@ 0x30
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x68>)
 800568c:	6224      	str	r4, [r4, #32]
 800568e:	429c      	cmp	r4, r3
 8005690:	d006      	beq.n	80056a0 <std+0x48>
 8005692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005696:	4294      	cmp	r4, r2
 8005698:	d002      	beq.n	80056a0 <std+0x48>
 800569a:	33d0      	adds	r3, #208	@ 0xd0
 800569c:	429c      	cmp	r4, r3
 800569e:	d105      	bne.n	80056ac <std+0x54>
 80056a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f000 b928 	b.w	80058fc <__retarget_lock_init_recursive>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	08005bd5 	.word	0x08005bd5
 80056b4:	08005bf7 	.word	0x08005bf7
 80056b8:	08005c2f 	.word	0x08005c2f
 80056bc:	08005c53 	.word	0x08005c53
 80056c0:	20004a78 	.word	0x20004a78

080056c4 <stdio_exit_handler>:
 80056c4:	4a02      	ldr	r2, [pc, #8]	@ (80056d0 <stdio_exit_handler+0xc>)
 80056c6:	4903      	ldr	r1, [pc, #12]	@ (80056d4 <stdio_exit_handler+0x10>)
 80056c8:	4803      	ldr	r0, [pc, #12]	@ (80056d8 <stdio_exit_handler+0x14>)
 80056ca:	f000 b869 	b.w	80057a0 <_fwalk_sglue>
 80056ce:	bf00      	nop
 80056d0:	20000010 	.word	0x20000010
 80056d4:	08005b6d 	.word	0x08005b6d
 80056d8:	20000020 	.word	0x20000020

080056dc <cleanup_stdio>:
 80056dc:	6841      	ldr	r1, [r0, #4]
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <cleanup_stdio+0x34>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	b510      	push	{r4, lr}
 80056e4:	4604      	mov	r4, r0
 80056e6:	d001      	beq.n	80056ec <cleanup_stdio+0x10>
 80056e8:	f000 fa40 	bl	8005b6c <_fflush_r>
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <cleanup_stdio+0x38>)
 80056f0:	4299      	cmp	r1, r3
 80056f2:	d002      	beq.n	80056fa <cleanup_stdio+0x1e>
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 fa39 	bl	8005b6c <_fflush_r>
 80056fa:	68e1      	ldr	r1, [r4, #12]
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <cleanup_stdio+0x3c>)
 80056fe:	4299      	cmp	r1, r3
 8005700:	d004      	beq.n	800570c <cleanup_stdio+0x30>
 8005702:	4620      	mov	r0, r4
 8005704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005708:	f000 ba30 	b.w	8005b6c <_fflush_r>
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop
 8005710:	20004a78 	.word	0x20004a78
 8005714:	20004ae0 	.word	0x20004ae0
 8005718:	20004b48 	.word	0x20004b48

0800571c <global_stdio_init.part.0>:
 800571c:	b510      	push	{r4, lr}
 800571e:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <global_stdio_init.part.0+0x30>)
 8005720:	4c0b      	ldr	r4, [pc, #44]	@ (8005750 <global_stdio_init.part.0+0x34>)
 8005722:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <global_stdio_init.part.0+0x38>)
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	4620      	mov	r0, r4
 8005728:	2200      	movs	r2, #0
 800572a:	2104      	movs	r1, #4
 800572c:	f7ff ff94 	bl	8005658 <std>
 8005730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005734:	2201      	movs	r2, #1
 8005736:	2109      	movs	r1, #9
 8005738:	f7ff ff8e 	bl	8005658 <std>
 800573c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005740:	2202      	movs	r2, #2
 8005742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005746:	2112      	movs	r1, #18
 8005748:	f7ff bf86 	b.w	8005658 <std>
 800574c:	20004bb0 	.word	0x20004bb0
 8005750:	20004a78 	.word	0x20004a78
 8005754:	080056c5 	.word	0x080056c5

08005758 <__sfp_lock_acquire>:
 8005758:	4801      	ldr	r0, [pc, #4]	@ (8005760 <__sfp_lock_acquire+0x8>)
 800575a:	f000 b8d0 	b.w	80058fe <__retarget_lock_acquire_recursive>
 800575e:	bf00      	nop
 8005760:	20004bb5 	.word	0x20004bb5

08005764 <__sfp_lock_release>:
 8005764:	4801      	ldr	r0, [pc, #4]	@ (800576c <__sfp_lock_release+0x8>)
 8005766:	f000 b8cb 	b.w	8005900 <__retarget_lock_release_recursive>
 800576a:	bf00      	nop
 800576c:	20004bb5 	.word	0x20004bb5

08005770 <__sinit>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	f7ff fff0 	bl	8005758 <__sfp_lock_acquire>
 8005778:	6a23      	ldr	r3, [r4, #32]
 800577a:	b11b      	cbz	r3, 8005784 <__sinit+0x14>
 800577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005780:	f7ff bff0 	b.w	8005764 <__sfp_lock_release>
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__sinit+0x28>)
 8005786:	6223      	str	r3, [r4, #32]
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <__sinit+0x2c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f5      	bne.n	800577c <__sinit+0xc>
 8005790:	f7ff ffc4 	bl	800571c <global_stdio_init.part.0>
 8005794:	e7f2      	b.n	800577c <__sinit+0xc>
 8005796:	bf00      	nop
 8005798:	080056dd 	.word	0x080056dd
 800579c:	20004bb0 	.word	0x20004bb0

080057a0 <_fwalk_sglue>:
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	4607      	mov	r7, r0
 80057a6:	4688      	mov	r8, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	2600      	movs	r6, #0
 80057ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b0:	f1b9 0901 	subs.w	r9, r9, #1
 80057b4:	d505      	bpl.n	80057c2 <_fwalk_sglue+0x22>
 80057b6:	6824      	ldr	r4, [r4, #0]
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	d1f7      	bne.n	80057ac <_fwalk_sglue+0xc>
 80057bc:	4630      	mov	r0, r6
 80057be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d907      	bls.n	80057d8 <_fwalk_sglue+0x38>
 80057c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057cc:	3301      	adds	r3, #1
 80057ce:	d003      	beq.n	80057d8 <_fwalk_sglue+0x38>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4638      	mov	r0, r7
 80057d4:	47c0      	blx	r8
 80057d6:	4306      	orrs	r6, r0
 80057d8:	3568      	adds	r5, #104	@ 0x68
 80057da:	e7e9      	b.n	80057b0 <_fwalk_sglue+0x10>

080057dc <_puts_r>:
 80057dc:	6a03      	ldr	r3, [r0, #32]
 80057de:	b570      	push	{r4, r5, r6, lr}
 80057e0:	6884      	ldr	r4, [r0, #8]
 80057e2:	4605      	mov	r5, r0
 80057e4:	460e      	mov	r6, r1
 80057e6:	b90b      	cbnz	r3, 80057ec <_puts_r+0x10>
 80057e8:	f7ff ffc2 	bl	8005770 <__sinit>
 80057ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ee:	07db      	lsls	r3, r3, #31
 80057f0:	d405      	bmi.n	80057fe <_puts_r+0x22>
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	0598      	lsls	r0, r3, #22
 80057f6:	d402      	bmi.n	80057fe <_puts_r+0x22>
 80057f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057fa:	f000 f880 	bl	80058fe <__retarget_lock_acquire_recursive>
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	0719      	lsls	r1, r3, #28
 8005802:	d502      	bpl.n	800580a <_puts_r+0x2e>
 8005804:	6923      	ldr	r3, [r4, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d135      	bne.n	8005876 <_puts_r+0x9a>
 800580a:	4621      	mov	r1, r4
 800580c:	4628      	mov	r0, r5
 800580e:	f000 fa63 	bl	8005cd8 <__swsetup_r>
 8005812:	b380      	cbz	r0, 8005876 <_puts_r+0x9a>
 8005814:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800581a:	07da      	lsls	r2, r3, #31
 800581c:	d405      	bmi.n	800582a <_puts_r+0x4e>
 800581e:	89a3      	ldrh	r3, [r4, #12]
 8005820:	059b      	lsls	r3, r3, #22
 8005822:	d402      	bmi.n	800582a <_puts_r+0x4e>
 8005824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005826:	f000 f86b 	bl	8005900 <__retarget_lock_release_recursive>
 800582a:	4628      	mov	r0, r5
 800582c:	bd70      	pop	{r4, r5, r6, pc}
 800582e:	2b00      	cmp	r3, #0
 8005830:	da04      	bge.n	800583c <_puts_r+0x60>
 8005832:	69a2      	ldr	r2, [r4, #24]
 8005834:	429a      	cmp	r2, r3
 8005836:	dc17      	bgt.n	8005868 <_puts_r+0x8c>
 8005838:	290a      	cmp	r1, #10
 800583a:	d015      	beq.n	8005868 <_puts_r+0x8c>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	6022      	str	r2, [r4, #0]
 8005842:	7019      	strb	r1, [r3, #0]
 8005844:	68a3      	ldr	r3, [r4, #8]
 8005846:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800584a:	3b01      	subs	r3, #1
 800584c:	60a3      	str	r3, [r4, #8]
 800584e:	2900      	cmp	r1, #0
 8005850:	d1ed      	bne.n	800582e <_puts_r+0x52>
 8005852:	2b00      	cmp	r3, #0
 8005854:	da11      	bge.n	800587a <_puts_r+0x9e>
 8005856:	4622      	mov	r2, r4
 8005858:	210a      	movs	r1, #10
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f9fd 	bl	8005c5a <__swbuf_r>
 8005860:	3001      	adds	r0, #1
 8005862:	d0d7      	beq.n	8005814 <_puts_r+0x38>
 8005864:	250a      	movs	r5, #10
 8005866:	e7d7      	b.n	8005818 <_puts_r+0x3c>
 8005868:	4622      	mov	r2, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f9f5 	bl	8005c5a <__swbuf_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d1e7      	bne.n	8005844 <_puts_r+0x68>
 8005874:	e7ce      	b.n	8005814 <_puts_r+0x38>
 8005876:	3e01      	subs	r6, #1
 8005878:	e7e4      	b.n	8005844 <_puts_r+0x68>
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	220a      	movs	r2, #10
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e7ee      	b.n	8005864 <_puts_r+0x88>
	...

08005888 <puts>:
 8005888:	4b02      	ldr	r3, [pc, #8]	@ (8005894 <puts+0xc>)
 800588a:	4601      	mov	r1, r0
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	f7ff bfa5 	b.w	80057dc <_puts_r>
 8005892:	bf00      	nop
 8005894:	2000001c 	.word	0x2000001c

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <__errno>:
 80058a8:	4b01      	ldr	r3, [pc, #4]	@ (80058b0 <__errno+0x8>)
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	2000001c 	.word	0x2000001c

080058b4 <__libc_init_array>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4d0d      	ldr	r5, [pc, #52]	@ (80058ec <__libc_init_array+0x38>)
 80058b8:	4c0d      	ldr	r4, [pc, #52]	@ (80058f0 <__libc_init_array+0x3c>)
 80058ba:	1b64      	subs	r4, r4, r5
 80058bc:	10a4      	asrs	r4, r4, #2
 80058be:	2600      	movs	r6, #0
 80058c0:	42a6      	cmp	r6, r4
 80058c2:	d109      	bne.n	80058d8 <__libc_init_array+0x24>
 80058c4:	4d0b      	ldr	r5, [pc, #44]	@ (80058f4 <__libc_init_array+0x40>)
 80058c6:	4c0c      	ldr	r4, [pc, #48]	@ (80058f8 <__libc_init_array+0x44>)
 80058c8:	f000 fb80 	bl	8005fcc <_init>
 80058cc:	1b64      	subs	r4, r4, r5
 80058ce:	10a4      	asrs	r4, r4, #2
 80058d0:	2600      	movs	r6, #0
 80058d2:	42a6      	cmp	r6, r4
 80058d4:	d105      	bne.n	80058e2 <__libc_init_array+0x2e>
 80058d6:	bd70      	pop	{r4, r5, r6, pc}
 80058d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058dc:	4798      	blx	r3
 80058de:	3601      	adds	r6, #1
 80058e0:	e7ee      	b.n	80058c0 <__libc_init_array+0xc>
 80058e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058e6:	4798      	blx	r3
 80058e8:	3601      	adds	r6, #1
 80058ea:	e7f2      	b.n	80058d2 <__libc_init_array+0x1e>
 80058ec:	08006084 	.word	0x08006084
 80058f0:	08006084 	.word	0x08006084
 80058f4:	08006084 	.word	0x08006084
 80058f8:	08006088 	.word	0x08006088

080058fc <__retarget_lock_init_recursive>:
 80058fc:	4770      	bx	lr

080058fe <__retarget_lock_acquire_recursive>:
 80058fe:	4770      	bx	lr

08005900 <__retarget_lock_release_recursive>:
 8005900:	4770      	bx	lr

08005902 <memcpy>:
 8005902:	440a      	add	r2, r1
 8005904:	4291      	cmp	r1, r2
 8005906:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800590a:	d100      	bne.n	800590e <memcpy+0xc>
 800590c:	4770      	bx	lr
 800590e:	b510      	push	{r4, lr}
 8005910:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005914:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005918:	4291      	cmp	r1, r2
 800591a:	d1f9      	bne.n	8005910 <memcpy+0xe>
 800591c:	bd10      	pop	{r4, pc}
	...

08005920 <sbrk_aligned>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4e0f      	ldr	r6, [pc, #60]	@ (8005960 <sbrk_aligned+0x40>)
 8005924:	460c      	mov	r4, r1
 8005926:	6831      	ldr	r1, [r6, #0]
 8005928:	4605      	mov	r5, r0
 800592a:	b911      	cbnz	r1, 8005932 <sbrk_aligned+0x12>
 800592c:	f000 fae2 	bl	8005ef4 <_sbrk_r>
 8005930:	6030      	str	r0, [r6, #0]
 8005932:	4621      	mov	r1, r4
 8005934:	4628      	mov	r0, r5
 8005936:	f000 fadd 	bl	8005ef4 <_sbrk_r>
 800593a:	1c43      	adds	r3, r0, #1
 800593c:	d103      	bne.n	8005946 <sbrk_aligned+0x26>
 800593e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005942:	4620      	mov	r0, r4
 8005944:	bd70      	pop	{r4, r5, r6, pc}
 8005946:	1cc4      	adds	r4, r0, #3
 8005948:	f024 0403 	bic.w	r4, r4, #3
 800594c:	42a0      	cmp	r0, r4
 800594e:	d0f8      	beq.n	8005942 <sbrk_aligned+0x22>
 8005950:	1a21      	subs	r1, r4, r0
 8005952:	4628      	mov	r0, r5
 8005954:	f000 face 	bl	8005ef4 <_sbrk_r>
 8005958:	3001      	adds	r0, #1
 800595a:	d1f2      	bne.n	8005942 <sbrk_aligned+0x22>
 800595c:	e7ef      	b.n	800593e <sbrk_aligned+0x1e>
 800595e:	bf00      	nop
 8005960:	20004bb8 	.word	0x20004bb8

08005964 <_malloc_r>:
 8005964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005968:	1ccd      	adds	r5, r1, #3
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	2d00      	cmp	r5, #0
 8005978:	4606      	mov	r6, r0
 800597a:	db01      	blt.n	8005980 <_malloc_r+0x1c>
 800597c:	42a9      	cmp	r1, r5
 800597e:	d904      	bls.n	800598a <_malloc_r+0x26>
 8005980:	230c      	movs	r3, #12
 8005982:	6033      	str	r3, [r6, #0]
 8005984:	2000      	movs	r0, #0
 8005986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800598a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a60 <_malloc_r+0xfc>
 800598e:	f000 f915 	bl	8005bbc <__malloc_lock>
 8005992:	f8d8 3000 	ldr.w	r3, [r8]
 8005996:	461c      	mov	r4, r3
 8005998:	bb44      	cbnz	r4, 80059ec <_malloc_r+0x88>
 800599a:	4629      	mov	r1, r5
 800599c:	4630      	mov	r0, r6
 800599e:	f7ff ffbf 	bl	8005920 <sbrk_aligned>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	4604      	mov	r4, r0
 80059a6:	d158      	bne.n	8005a5a <_malloc_r+0xf6>
 80059a8:	f8d8 4000 	ldr.w	r4, [r8]
 80059ac:	4627      	mov	r7, r4
 80059ae:	2f00      	cmp	r7, #0
 80059b0:	d143      	bne.n	8005a3a <_malloc_r+0xd6>
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	d04b      	beq.n	8005a4e <_malloc_r+0xea>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	4639      	mov	r1, r7
 80059ba:	4630      	mov	r0, r6
 80059bc:	eb04 0903 	add.w	r9, r4, r3
 80059c0:	f000 fa98 	bl	8005ef4 <_sbrk_r>
 80059c4:	4581      	cmp	r9, r0
 80059c6:	d142      	bne.n	8005a4e <_malloc_r+0xea>
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	1a6d      	subs	r5, r5, r1
 80059cc:	4629      	mov	r1, r5
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7ff ffa6 	bl	8005920 <sbrk_aligned>
 80059d4:	3001      	adds	r0, #1
 80059d6:	d03a      	beq.n	8005a4e <_malloc_r+0xea>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	442b      	add	r3, r5
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	f8d8 3000 	ldr.w	r3, [r8]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	bb62      	cbnz	r2, 8005a40 <_malloc_r+0xdc>
 80059e6:	f8c8 7000 	str.w	r7, [r8]
 80059ea:	e00f      	b.n	8005a0c <_malloc_r+0xa8>
 80059ec:	6822      	ldr	r2, [r4, #0]
 80059ee:	1b52      	subs	r2, r2, r5
 80059f0:	d420      	bmi.n	8005a34 <_malloc_r+0xd0>
 80059f2:	2a0b      	cmp	r2, #11
 80059f4:	d917      	bls.n	8005a26 <_malloc_r+0xc2>
 80059f6:	1961      	adds	r1, r4, r5
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	6025      	str	r5, [r4, #0]
 80059fc:	bf18      	it	ne
 80059fe:	6059      	strne	r1, [r3, #4]
 8005a00:	6863      	ldr	r3, [r4, #4]
 8005a02:	bf08      	it	eq
 8005a04:	f8c8 1000 	streq.w	r1, [r8]
 8005a08:	5162      	str	r2, [r4, r5]
 8005a0a:	604b      	str	r3, [r1, #4]
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f000 f8db 	bl	8005bc8 <__malloc_unlock>
 8005a12:	f104 000b 	add.w	r0, r4, #11
 8005a16:	1d23      	adds	r3, r4, #4
 8005a18:	f020 0007 	bic.w	r0, r0, #7
 8005a1c:	1ac2      	subs	r2, r0, r3
 8005a1e:	bf1c      	itt	ne
 8005a20:	1a1b      	subne	r3, r3, r0
 8005a22:	50a3      	strne	r3, [r4, r2]
 8005a24:	e7af      	b.n	8005986 <_malloc_r+0x22>
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	bf0c      	ite	eq
 8005a2c:	f8c8 2000 	streq.w	r2, [r8]
 8005a30:	605a      	strne	r2, [r3, #4]
 8005a32:	e7eb      	b.n	8005a0c <_malloc_r+0xa8>
 8005a34:	4623      	mov	r3, r4
 8005a36:	6864      	ldr	r4, [r4, #4]
 8005a38:	e7ae      	b.n	8005998 <_malloc_r+0x34>
 8005a3a:	463c      	mov	r4, r7
 8005a3c:	687f      	ldr	r7, [r7, #4]
 8005a3e:	e7b6      	b.n	80059ae <_malloc_r+0x4a>
 8005a40:	461a      	mov	r2, r3
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	d1fb      	bne.n	8005a40 <_malloc_r+0xdc>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	6053      	str	r3, [r2, #4]
 8005a4c:	e7de      	b.n	8005a0c <_malloc_r+0xa8>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6033      	str	r3, [r6, #0]
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f8b8 	bl	8005bc8 <__malloc_unlock>
 8005a58:	e794      	b.n	8005984 <_malloc_r+0x20>
 8005a5a:	6005      	str	r5, [r0, #0]
 8005a5c:	e7d6      	b.n	8005a0c <_malloc_r+0xa8>
 8005a5e:	bf00      	nop
 8005a60:	20004bbc 	.word	0x20004bbc

08005a64 <__sflush_r>:
 8005a64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6c:	0716      	lsls	r6, r2, #28
 8005a6e:	4605      	mov	r5, r0
 8005a70:	460c      	mov	r4, r1
 8005a72:	d454      	bmi.n	8005b1e <__sflush_r+0xba>
 8005a74:	684b      	ldr	r3, [r1, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	dc02      	bgt.n	8005a80 <__sflush_r+0x1c>
 8005a7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dd48      	ble.n	8005b12 <__sflush_r+0xae>
 8005a80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d045      	beq.n	8005b12 <__sflush_r+0xae>
 8005a86:	2300      	movs	r3, #0
 8005a88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a8c:	682f      	ldr	r7, [r5, #0]
 8005a8e:	6a21      	ldr	r1, [r4, #32]
 8005a90:	602b      	str	r3, [r5, #0]
 8005a92:	d030      	beq.n	8005af6 <__sflush_r+0x92>
 8005a94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	0759      	lsls	r1, r3, #29
 8005a9a:	d505      	bpl.n	8005aa8 <__sflush_r+0x44>
 8005a9c:	6863      	ldr	r3, [r4, #4]
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005aa2:	b10b      	cbz	r3, 8005aa8 <__sflush_r+0x44>
 8005aa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aa6:	1ad2      	subs	r2, r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aac:	6a21      	ldr	r1, [r4, #32]
 8005aae:	4628      	mov	r0, r5
 8005ab0:	47b0      	blx	r6
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	89a3      	ldrh	r3, [r4, #12]
 8005ab6:	d106      	bne.n	8005ac6 <__sflush_r+0x62>
 8005ab8:	6829      	ldr	r1, [r5, #0]
 8005aba:	291d      	cmp	r1, #29
 8005abc:	d82b      	bhi.n	8005b16 <__sflush_r+0xb2>
 8005abe:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <__sflush_r+0x104>)
 8005ac0:	410a      	asrs	r2, r1
 8005ac2:	07d6      	lsls	r6, r2, #31
 8005ac4:	d427      	bmi.n	8005b16 <__sflush_r+0xb2>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	6062      	str	r2, [r4, #4]
 8005aca:	04d9      	lsls	r1, r3, #19
 8005acc:	6922      	ldr	r2, [r4, #16]
 8005ace:	6022      	str	r2, [r4, #0]
 8005ad0:	d504      	bpl.n	8005adc <__sflush_r+0x78>
 8005ad2:	1c42      	adds	r2, r0, #1
 8005ad4:	d101      	bne.n	8005ada <__sflush_r+0x76>
 8005ad6:	682b      	ldr	r3, [r5, #0]
 8005ad8:	b903      	cbnz	r3, 8005adc <__sflush_r+0x78>
 8005ada:	6560      	str	r0, [r4, #84]	@ 0x54
 8005adc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ade:	602f      	str	r7, [r5, #0]
 8005ae0:	b1b9      	cbz	r1, 8005b12 <__sflush_r+0xae>
 8005ae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ae6:	4299      	cmp	r1, r3
 8005ae8:	d002      	beq.n	8005af0 <__sflush_r+0x8c>
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 fa24 	bl	8005f38 <_free_r>
 8005af0:	2300      	movs	r3, #0
 8005af2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005af4:	e00d      	b.n	8005b12 <__sflush_r+0xae>
 8005af6:	2301      	movs	r3, #1
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b0      	blx	r6
 8005afc:	4602      	mov	r2, r0
 8005afe:	1c50      	adds	r0, r2, #1
 8005b00:	d1c9      	bne.n	8005a96 <__sflush_r+0x32>
 8005b02:	682b      	ldr	r3, [r5, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0c6      	beq.n	8005a96 <__sflush_r+0x32>
 8005b08:	2b1d      	cmp	r3, #29
 8005b0a:	d001      	beq.n	8005b10 <__sflush_r+0xac>
 8005b0c:	2b16      	cmp	r3, #22
 8005b0e:	d11e      	bne.n	8005b4e <__sflush_r+0xea>
 8005b10:	602f      	str	r7, [r5, #0]
 8005b12:	2000      	movs	r0, #0
 8005b14:	e022      	b.n	8005b5c <__sflush_r+0xf8>
 8005b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1a:	b21b      	sxth	r3, r3
 8005b1c:	e01b      	b.n	8005b56 <__sflush_r+0xf2>
 8005b1e:	690f      	ldr	r7, [r1, #16]
 8005b20:	2f00      	cmp	r7, #0
 8005b22:	d0f6      	beq.n	8005b12 <__sflush_r+0xae>
 8005b24:	0793      	lsls	r3, r2, #30
 8005b26:	680e      	ldr	r6, [r1, #0]
 8005b28:	bf08      	it	eq
 8005b2a:	694b      	ldreq	r3, [r1, #20]
 8005b2c:	600f      	str	r7, [r1, #0]
 8005b2e:	bf18      	it	ne
 8005b30:	2300      	movne	r3, #0
 8005b32:	eba6 0807 	sub.w	r8, r6, r7
 8005b36:	608b      	str	r3, [r1, #8]
 8005b38:	f1b8 0f00 	cmp.w	r8, #0
 8005b3c:	dde9      	ble.n	8005b12 <__sflush_r+0xae>
 8005b3e:	6a21      	ldr	r1, [r4, #32]
 8005b40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b42:	4643      	mov	r3, r8
 8005b44:	463a      	mov	r2, r7
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b0      	blx	r6
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	dc08      	bgt.n	8005b60 <__sflush_r+0xfc>
 8005b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b56:	81a3      	strh	r3, [r4, #12]
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b60:	4407      	add	r7, r0
 8005b62:	eba8 0800 	sub.w	r8, r8, r0
 8005b66:	e7e7      	b.n	8005b38 <__sflush_r+0xd4>
 8005b68:	dfbffffe 	.word	0xdfbffffe

08005b6c <_fflush_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	690b      	ldr	r3, [r1, #16]
 8005b70:	4605      	mov	r5, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	b913      	cbnz	r3, 8005b7c <_fflush_r+0x10>
 8005b76:	2500      	movs	r5, #0
 8005b78:	4628      	mov	r0, r5
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	b118      	cbz	r0, 8005b86 <_fflush_r+0x1a>
 8005b7e:	6a03      	ldr	r3, [r0, #32]
 8005b80:	b90b      	cbnz	r3, 8005b86 <_fflush_r+0x1a>
 8005b82:	f7ff fdf5 	bl	8005770 <__sinit>
 8005b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0f3      	beq.n	8005b76 <_fflush_r+0xa>
 8005b8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b90:	07d0      	lsls	r0, r2, #31
 8005b92:	d404      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b94:	0599      	lsls	r1, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_fflush_r+0x32>
 8005b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9a:	f7ff feb0 	bl	80058fe <__retarget_lock_acquire_recursive>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	f7ff ff5f 	bl	8005a64 <__sflush_r>
 8005ba6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba8:	07da      	lsls	r2, r3, #31
 8005baa:	4605      	mov	r5, r0
 8005bac:	d4e4      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	059b      	lsls	r3, r3, #22
 8005bb2:	d4e1      	bmi.n	8005b78 <_fflush_r+0xc>
 8005bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bb6:	f7ff fea3 	bl	8005900 <__retarget_lock_release_recursive>
 8005bba:	e7dd      	b.n	8005b78 <_fflush_r+0xc>

08005bbc <__malloc_lock>:
 8005bbc:	4801      	ldr	r0, [pc, #4]	@ (8005bc4 <__malloc_lock+0x8>)
 8005bbe:	f7ff be9e 	b.w	80058fe <__retarget_lock_acquire_recursive>
 8005bc2:	bf00      	nop
 8005bc4:	20004bb4 	.word	0x20004bb4

08005bc8 <__malloc_unlock>:
 8005bc8:	4801      	ldr	r0, [pc, #4]	@ (8005bd0 <__malloc_unlock+0x8>)
 8005bca:	f7ff be99 	b.w	8005900 <__retarget_lock_release_recursive>
 8005bce:	bf00      	nop
 8005bd0:	20004bb4 	.word	0x20004bb4

08005bd4 <__sread>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bdc:	f000 f978 	bl	8005ed0 <_read_r>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	bfab      	itete	ge
 8005be4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005be6:	89a3      	ldrhlt	r3, [r4, #12]
 8005be8:	181b      	addge	r3, r3, r0
 8005bea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bee:	bfac      	ite	ge
 8005bf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bf2:	81a3      	strhlt	r3, [r4, #12]
 8005bf4:	bd10      	pop	{r4, pc}

08005bf6 <__swrite>:
 8005bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	898b      	ldrh	r3, [r1, #12]
 8005bfe:	05db      	lsls	r3, r3, #23
 8005c00:	4605      	mov	r5, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	4616      	mov	r6, r2
 8005c06:	d505      	bpl.n	8005c14 <__swrite+0x1e>
 8005c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f000 f94c 	bl	8005eac <_lseek_r>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c1e:	81a3      	strh	r3, [r4, #12]
 8005c20:	4632      	mov	r2, r6
 8005c22:	463b      	mov	r3, r7
 8005c24:	4628      	mov	r0, r5
 8005c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c2a:	f000 b973 	b.w	8005f14 <_write_r>

08005c2e <__sseek>:
 8005c2e:	b510      	push	{r4, lr}
 8005c30:	460c      	mov	r4, r1
 8005c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c36:	f000 f939 	bl	8005eac <_lseek_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	bf15      	itete	ne
 8005c40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c4a:	81a3      	strheq	r3, [r4, #12]
 8005c4c:	bf18      	it	ne
 8005c4e:	81a3      	strhne	r3, [r4, #12]
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <__sclose>:
 8005c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c56:	f000 b8f7 	b.w	8005e48 <_close_r>

08005c5a <__swbuf_r>:
 8005c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5c:	460e      	mov	r6, r1
 8005c5e:	4614      	mov	r4, r2
 8005c60:	4605      	mov	r5, r0
 8005c62:	b118      	cbz	r0, 8005c6c <__swbuf_r+0x12>
 8005c64:	6a03      	ldr	r3, [r0, #32]
 8005c66:	b90b      	cbnz	r3, 8005c6c <__swbuf_r+0x12>
 8005c68:	f7ff fd82 	bl	8005770 <__sinit>
 8005c6c:	69a3      	ldr	r3, [r4, #24]
 8005c6e:	60a3      	str	r3, [r4, #8]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	071a      	lsls	r2, r3, #28
 8005c74:	d501      	bpl.n	8005c7a <__swbuf_r+0x20>
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	b943      	cbnz	r3, 8005c8c <__swbuf_r+0x32>
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f82b 	bl	8005cd8 <__swsetup_r>
 8005c82:	b118      	cbz	r0, 8005c8c <__swbuf_r+0x32>
 8005c84:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005c88:	4638      	mov	r0, r7
 8005c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	6922      	ldr	r2, [r4, #16]
 8005c90:	1a98      	subs	r0, r3, r2
 8005c92:	6963      	ldr	r3, [r4, #20]
 8005c94:	b2f6      	uxtb	r6, r6
 8005c96:	4283      	cmp	r3, r0
 8005c98:	4637      	mov	r7, r6
 8005c9a:	dc05      	bgt.n	8005ca8 <__swbuf_r+0x4e>
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f7ff ff64 	bl	8005b6c <_fflush_r>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d1ed      	bne.n	8005c84 <__swbuf_r+0x2a>
 8005ca8:	68a3      	ldr	r3, [r4, #8]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	60a3      	str	r3, [r4, #8]
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	6022      	str	r2, [r4, #0]
 8005cb4:	701e      	strb	r6, [r3, #0]
 8005cb6:	6962      	ldr	r2, [r4, #20]
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d004      	beq.n	8005cc8 <__swbuf_r+0x6e>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	07db      	lsls	r3, r3, #31
 8005cc2:	d5e1      	bpl.n	8005c88 <__swbuf_r+0x2e>
 8005cc4:	2e0a      	cmp	r6, #10
 8005cc6:	d1df      	bne.n	8005c88 <__swbuf_r+0x2e>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f7ff ff4e 	bl	8005b6c <_fflush_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0d9      	beq.n	8005c88 <__swbuf_r+0x2e>
 8005cd4:	e7d6      	b.n	8005c84 <__swbuf_r+0x2a>
	...

08005cd8 <__swsetup_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4b29      	ldr	r3, [pc, #164]	@ (8005d80 <__swsetup_r+0xa8>)
 8005cdc:	4605      	mov	r5, r0
 8005cde:	6818      	ldr	r0, [r3, #0]
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	b118      	cbz	r0, 8005cec <__swsetup_r+0x14>
 8005ce4:	6a03      	ldr	r3, [r0, #32]
 8005ce6:	b90b      	cbnz	r3, 8005cec <__swsetup_r+0x14>
 8005ce8:	f7ff fd42 	bl	8005770 <__sinit>
 8005cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf0:	0719      	lsls	r1, r3, #28
 8005cf2:	d422      	bmi.n	8005d3a <__swsetup_r+0x62>
 8005cf4:	06da      	lsls	r2, r3, #27
 8005cf6:	d407      	bmi.n	8005d08 <__swsetup_r+0x30>
 8005cf8:	2209      	movs	r2, #9
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d00:	81a3      	strh	r3, [r4, #12]
 8005d02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d06:	e033      	b.n	8005d70 <__swsetup_r+0x98>
 8005d08:	0758      	lsls	r0, r3, #29
 8005d0a:	d512      	bpl.n	8005d32 <__swsetup_r+0x5a>
 8005d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d0e:	b141      	cbz	r1, 8005d22 <__swsetup_r+0x4a>
 8005d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d002      	beq.n	8005d1e <__swsetup_r+0x46>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f90d 	bl	8005f38 <_free_r>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	6063      	str	r3, [r4, #4]
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	89a3      	ldrh	r3, [r4, #12]
 8005d34:	f043 0308 	orr.w	r3, r3, #8
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	6923      	ldr	r3, [r4, #16]
 8005d3c:	b94b      	cbnz	r3, 8005d52 <__swsetup_r+0x7a>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d48:	d003      	beq.n	8005d52 <__swsetup_r+0x7a>
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 f83f 	bl	8005dd0 <__smakebuf_r>
 8005d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d56:	f013 0201 	ands.w	r2, r3, #1
 8005d5a:	d00a      	beq.n	8005d72 <__swsetup_r+0x9a>
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	60a2      	str	r2, [r4, #8]
 8005d60:	6962      	ldr	r2, [r4, #20]
 8005d62:	4252      	negs	r2, r2
 8005d64:	61a2      	str	r2, [r4, #24]
 8005d66:	6922      	ldr	r2, [r4, #16]
 8005d68:	b942      	cbnz	r2, 8005d7c <__swsetup_r+0xa4>
 8005d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d6e:	d1c5      	bne.n	8005cfc <__swsetup_r+0x24>
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	0799      	lsls	r1, r3, #30
 8005d74:	bf58      	it	pl
 8005d76:	6962      	ldrpl	r2, [r4, #20]
 8005d78:	60a2      	str	r2, [r4, #8]
 8005d7a:	e7f4      	b.n	8005d66 <__swsetup_r+0x8e>
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	e7f7      	b.n	8005d70 <__swsetup_r+0x98>
 8005d80:	2000001c 	.word	0x2000001c

08005d84 <__swhatbuf_r>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	2900      	cmp	r1, #0
 8005d8e:	b096      	sub	sp, #88	@ 0x58
 8005d90:	4615      	mov	r5, r2
 8005d92:	461e      	mov	r6, r3
 8005d94:	da0d      	bge.n	8005db2 <__swhatbuf_r+0x2e>
 8005d96:	89a3      	ldrh	r3, [r4, #12]
 8005d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d9c:	f04f 0100 	mov.w	r1, #0
 8005da0:	bf14      	ite	ne
 8005da2:	2340      	movne	r3, #64	@ 0x40
 8005da4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005da8:	2000      	movs	r0, #0
 8005daa:	6031      	str	r1, [r6, #0]
 8005dac:	602b      	str	r3, [r5, #0]
 8005dae:	b016      	add	sp, #88	@ 0x58
 8005db0:	bd70      	pop	{r4, r5, r6, pc}
 8005db2:	466a      	mov	r2, sp
 8005db4:	f000 f858 	bl	8005e68 <_fstat_r>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	dbec      	blt.n	8005d96 <__swhatbuf_r+0x12>
 8005dbc:	9901      	ldr	r1, [sp, #4]
 8005dbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005dc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005dc6:	4259      	negs	r1, r3
 8005dc8:	4159      	adcs	r1, r3
 8005dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dce:	e7eb      	b.n	8005da8 <__swhatbuf_r+0x24>

08005dd0 <__smakebuf_r>:
 8005dd0:	898b      	ldrh	r3, [r1, #12]
 8005dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dd4:	079d      	lsls	r5, r3, #30
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	d507      	bpl.n	8005dec <__smakebuf_r+0x1c>
 8005ddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	6123      	str	r3, [r4, #16]
 8005de4:	2301      	movs	r3, #1
 8005de6:	6163      	str	r3, [r4, #20]
 8005de8:	b003      	add	sp, #12
 8005dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dec:	ab01      	add	r3, sp, #4
 8005dee:	466a      	mov	r2, sp
 8005df0:	f7ff ffc8 	bl	8005d84 <__swhatbuf_r>
 8005df4:	9f00      	ldr	r7, [sp, #0]
 8005df6:	4605      	mov	r5, r0
 8005df8:	4639      	mov	r1, r7
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff fdb2 	bl	8005964 <_malloc_r>
 8005e00:	b948      	cbnz	r0, 8005e16 <__smakebuf_r+0x46>
 8005e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e06:	059a      	lsls	r2, r3, #22
 8005e08:	d4ee      	bmi.n	8005de8 <__smakebuf_r+0x18>
 8005e0a:	f023 0303 	bic.w	r3, r3, #3
 8005e0e:	f043 0302 	orr.w	r3, r3, #2
 8005e12:	81a3      	strh	r3, [r4, #12]
 8005e14:	e7e2      	b.n	8005ddc <__smakebuf_r+0xc>
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	6020      	str	r0, [r4, #0]
 8005e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	9b01      	ldr	r3, [sp, #4]
 8005e22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e26:	b15b      	cbz	r3, 8005e40 <__smakebuf_r+0x70>
 8005e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f000 f82d 	bl	8005e8c <_isatty_r>
 8005e32:	b128      	cbz	r0, 8005e40 <__smakebuf_r+0x70>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	f023 0303 	bic.w	r3, r3, #3
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	431d      	orrs	r5, r3
 8005e44:	81a5      	strh	r5, [r4, #12]
 8005e46:	e7cf      	b.n	8005de8 <__smakebuf_r+0x18>

08005e48 <_close_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4d06      	ldr	r5, [pc, #24]	@ (8005e64 <_close_r+0x1c>)
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4604      	mov	r4, r0
 8005e50:	4608      	mov	r0, r1
 8005e52:	602b      	str	r3, [r5, #0]
 8005e54:	f7fa fe3b 	bl	8000ace <_close>
 8005e58:	1c43      	adds	r3, r0, #1
 8005e5a:	d102      	bne.n	8005e62 <_close_r+0x1a>
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	b103      	cbz	r3, 8005e62 <_close_r+0x1a>
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	bd38      	pop	{r3, r4, r5, pc}
 8005e64:	20004bc0 	.word	0x20004bc0

08005e68 <_fstat_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4d07      	ldr	r5, [pc, #28]	@ (8005e88 <_fstat_r+0x20>)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	602b      	str	r3, [r5, #0]
 8005e76:	f7fa fe36 	bl	8000ae6 <_fstat>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d102      	bne.n	8005e84 <_fstat_r+0x1c>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b103      	cbz	r3, 8005e84 <_fstat_r+0x1c>
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	bf00      	nop
 8005e88:	20004bc0 	.word	0x20004bc0

08005e8c <_isatty_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	4d06      	ldr	r5, [pc, #24]	@ (8005ea8 <_isatty_r+0x1c>)
 8005e90:	2300      	movs	r3, #0
 8005e92:	4604      	mov	r4, r0
 8005e94:	4608      	mov	r0, r1
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	f7fa fe35 	bl	8000b06 <_isatty>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_isatty_r+0x1a>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_isatty_r+0x1a>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	20004bc0 	.word	0x20004bc0

08005eac <_lseek_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	4d07      	ldr	r5, [pc, #28]	@ (8005ecc <_lseek_r+0x20>)
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	4608      	mov	r0, r1
 8005eb4:	4611      	mov	r1, r2
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	602a      	str	r2, [r5, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7fa fe2e 	bl	8000b1c <_lseek>
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	d102      	bne.n	8005eca <_lseek_r+0x1e>
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	b103      	cbz	r3, 8005eca <_lseek_r+0x1e>
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	bd38      	pop	{r3, r4, r5, pc}
 8005ecc:	20004bc0 	.word	0x20004bc0

08005ed0 <_read_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d07      	ldr	r5, [pc, #28]	@ (8005ef0 <_read_r+0x20>)
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	4611      	mov	r1, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	602a      	str	r2, [r5, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f7fa fdbc 	bl	8000a5c <_read>
 8005ee4:	1c43      	adds	r3, r0, #1
 8005ee6:	d102      	bne.n	8005eee <_read_r+0x1e>
 8005ee8:	682b      	ldr	r3, [r5, #0]
 8005eea:	b103      	cbz	r3, 8005eee <_read_r+0x1e>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	bd38      	pop	{r3, r4, r5, pc}
 8005ef0:	20004bc0 	.word	0x20004bc0

08005ef4 <_sbrk_r>:
 8005ef4:	b538      	push	{r3, r4, r5, lr}
 8005ef6:	4d06      	ldr	r5, [pc, #24]	@ (8005f10 <_sbrk_r+0x1c>)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	4608      	mov	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fa fe1a 	bl	8000b38 <_sbrk>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d102      	bne.n	8005f0e <_sbrk_r+0x1a>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	b103      	cbz	r3, 8005f0e <_sbrk_r+0x1a>
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
 8005f10:	20004bc0 	.word	0x20004bc0

08005f14 <_write_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d07      	ldr	r5, [pc, #28]	@ (8005f34 <_write_r+0x20>)
 8005f18:	4604      	mov	r4, r0
 8005f1a:	4608      	mov	r0, r1
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	602a      	str	r2, [r5, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	f7fa fdb7 	bl	8000a96 <_write>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	d102      	bne.n	8005f32 <_write_r+0x1e>
 8005f2c:	682b      	ldr	r3, [r5, #0]
 8005f2e:	b103      	cbz	r3, 8005f32 <_write_r+0x1e>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	20004bc0 	.word	0x20004bc0

08005f38 <_free_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d041      	beq.n	8005fc4 <_free_r+0x8c>
 8005f40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f44:	1f0c      	subs	r4, r1, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bfb8      	it	lt
 8005f4a:	18e4      	addlt	r4, r4, r3
 8005f4c:	f7ff fe36 	bl	8005bbc <__malloc_lock>
 8005f50:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc8 <_free_r+0x90>)
 8005f52:	6813      	ldr	r3, [r2, #0]
 8005f54:	b933      	cbnz	r3, 8005f64 <_free_r+0x2c>
 8005f56:	6063      	str	r3, [r4, #4]
 8005f58:	6014      	str	r4, [r2, #0]
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f60:	f7ff be32 	b.w	8005bc8 <__malloc_unlock>
 8005f64:	42a3      	cmp	r3, r4
 8005f66:	d908      	bls.n	8005f7a <_free_r+0x42>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	1821      	adds	r1, r4, r0
 8005f6c:	428b      	cmp	r3, r1
 8005f6e:	bf01      	itttt	eq
 8005f70:	6819      	ldreq	r1, [r3, #0]
 8005f72:	685b      	ldreq	r3, [r3, #4]
 8005f74:	1809      	addeq	r1, r1, r0
 8005f76:	6021      	streq	r1, [r4, #0]
 8005f78:	e7ed      	b.n	8005f56 <_free_r+0x1e>
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b10b      	cbz	r3, 8005f84 <_free_r+0x4c>
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	d9fa      	bls.n	8005f7a <_free_r+0x42>
 8005f84:	6811      	ldr	r1, [r2, #0]
 8005f86:	1850      	adds	r0, r2, r1
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d10b      	bne.n	8005fa4 <_free_r+0x6c>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	4401      	add	r1, r0
 8005f90:	1850      	adds	r0, r2, r1
 8005f92:	4283      	cmp	r3, r0
 8005f94:	6011      	str	r1, [r2, #0]
 8005f96:	d1e0      	bne.n	8005f5a <_free_r+0x22>
 8005f98:	6818      	ldr	r0, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	6053      	str	r3, [r2, #4]
 8005f9e:	4408      	add	r0, r1
 8005fa0:	6010      	str	r0, [r2, #0]
 8005fa2:	e7da      	b.n	8005f5a <_free_r+0x22>
 8005fa4:	d902      	bls.n	8005fac <_free_r+0x74>
 8005fa6:	230c      	movs	r3, #12
 8005fa8:	602b      	str	r3, [r5, #0]
 8005faa:	e7d6      	b.n	8005f5a <_free_r+0x22>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	1821      	adds	r1, r4, r0
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	bf04      	itt	eq
 8005fb4:	6819      	ldreq	r1, [r3, #0]
 8005fb6:	685b      	ldreq	r3, [r3, #4]
 8005fb8:	6063      	str	r3, [r4, #4]
 8005fba:	bf04      	itt	eq
 8005fbc:	1809      	addeq	r1, r1, r0
 8005fbe:	6021      	streq	r1, [r4, #0]
 8005fc0:	6054      	str	r4, [r2, #4]
 8005fc2:	e7ca      	b.n	8005f5a <_free_r+0x22>
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20004bbc 	.word	0x20004bbc

08005fcc <_init>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr

08005fd8 <_fini>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr
